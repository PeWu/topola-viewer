{"version":3,"sources":["menu/wikitree.png","topola.jpg","util/analytics.ts","chart.tsx","util/error.ts","util/gedcom_util.ts","util/date_util.ts","details.tsx","datasource/load_data.ts","datasource/embedded.ts","intro.tsx","menu/menu_item.tsx","menu/upload_menu.tsx","menu/url_menu.tsx","datasource/wikitree.ts","menu/wikitree_menu.tsx","menu/search_index.ts","menu/search.tsx","menu/top_bar.tsx","datasource/data_source.ts","app.tsx","util/error_i18n.ts","index.tsx"],"names":["module","exports","analyticsEvent","action","data","window","gtag","ChartType","zoomed","size","parent","select","node","scale","event","transform","k","offsetX","max","clientWidth","offsetY","clientHeight","attr","scrollLeft","x","scrollTop","y","scrolled","zoomTransform","call","zoom","translateTo","loadAsDataUrl","blob","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","e","target","result","inlineImage","image","a","href","baseVal","fetch","response","dataUrl","console","warn","inlineImages","svg","images","Array","from","getElementsByTagName","all","map","loadImage","Image","src","URL","createObjectURL","addEventListener","drawOnCanvas","canvas","document","createElement","width","height","ctx","getContext","oldFill","fillStyle","fillRect","drawImage","canvasToBlob","type","toBlob","Chart","chart","animating","rerenderRequired","zoomBehavior","this","props","chartType","Hourglass","HourglassChart","Relatives","RelativesChart","Fancy","FancyChart","CircleRenderer","DetailedRenderer","factor","scaleBy","args","initialRender","freezeAnimation","innerHTML","createChart","json","getChartType","renderer","getRendererType","svgSelector","indiCallback","info","onSelection","animate","updateSvgSize","locale","context","intl","setData","chartInfo","render","startIndi","selection","id","baseGeneration","generation","zoomOutFactor","min","extent","scaleExtent","translateExtent","on","scrollTopTween","i","interpolateNumber","t","scrollLeftTween","dx","origin","dy","svgTransition","transition","delay","duration","tween","animationPromise","then","renderChart","prevProps","Responsive","minWidth","className","onClick","getElementById","cloneNode","removeAttribute","setAttribute","String","Number","getAttribute","querySelector","XMLSerializer","serializeToString","getStrippedSvg","printWindow","style","position","top","left","contentDocument","open","write","getSvgContents","close","setTimeout","contentWindow","focus","print","parentNode","removeChild","body","appendChild","getSvgContentsWithInlinedImages","contents","Blob","saveAs","jspdf","default","doc","orientation","unit","format","addImage","save","React","contextTypes","intlShape","TopolaError","code","message","Error","pointerToId","pointer","substring","length","idToIndiMap","Map","indis","forEach","indi","set","idToFamMap","fams","fam","prepareGedcom","entries","head","find","entry","tag","other","strcmp","b","compareDates","event1","event2","date1","date","dateRange","date2","year","month","day","sortChildren","gedcom","comparator","indiMap","indiId1","indiId2","indi1","get","indi2","birth","birthDatesComparator","newFams","children","newChildren","sort","Object","assign","sortFamilyChildren","sortSpouses","famMap","famId1","famId2","fam1","fam2","marriage","marriageDatesComparator","newIndis","sortIndiSpouses","normalizeGedcom","IMAGE_EXTENSIONS","filterImage","newImages","fileName","url","match","has","push","title","startsWith","lowerName","toLowerCase","some","ext","endsWith","isImageFile","filterImages","getSoftware","sour","tree","name","DATE_QUALIFIERS","formatDate","hasDay","undefined","hasMonth","hasYear","text","dateObject","Date","qualifier","formatOptions","formatMessage","defaultMessage","Intl","DateTimeFormat","join","formatDateOrRange","dateOrRange","fromDate","toDate","to","translatedFromDate","translatedToDate","formatDateRage","EVENT_TAGS","EXCLUDED_TAGS","TAG_DESCRIPTIONS","translateTag","normalizedTag","replace","joinLines","lines","line","index","key","properties","getData","subentry","last","eventDetails","gedcomDate","getDate","translateDate","place","filter","note","noteDetails","nameDetails","split","getDetails","tags","detailsFunction","flatMap","element","hasData","getOtherDetails","includes","dataDetails","Details","entriesWithData","dereferenced","dereference","getSelection","prepareData","cacheId","parseGedcom","gedcomEntriesToJson","chartData","convertGedcom","serializedData","JSON","stringify","sessionStorage","setItem","loadFromUrl","handleCors","cachedData","getItem","parse","driveUrlMatch1","driveUrlMatch2","urlToFetch","status","statusText","loadGedcom","hash","EmbeddedMessageType","UploadedDataSource","newSource","oldSource","spec","source","event_label","event_value","GedcomUrlDataSource","EmbeddedDataSource","PARENT_READY","postMessage","READY","GEDCOM","onMessage","GedcomLink","Link","pathname","search","queryString","Intro","values","link","process","slice","Card","as","Content","Header","Grid","Row","Column","logo","alt","maxWidth","centered","MenuType","MenuItem","newProps","menuType","Menu","Item","Dropdown","loadFileAsText","file","evt","readAsText","isImageFileName","lower","UploadMenu","files","filesArray","value","gedcomFile","imageMap","imageFileNames","md5","location","history","state","content","Icon","htmlFor","accept","multiple","onChange","handleUpload","UrlMenu","dialogOpen","inputRef","setState","current","Modal","onClose","handleClose","txt","Form","onSubmit","handleLoad","Input","placeholder","fluid","handleUrlChange","ref","Actions","Button","secondary","primary","openDialog","loadFromUrlModal","getSessionStorageItem","setSessionStorageItem","wikiTreeGet","request","requestData","FormData","append","apiUrl","method","credentials","responseBody","getAncestors","cacheKey","fields","ancestors","getRelatives","keys","keysToFetch","getChildren","getSpouses","items","fetchedResults","person","Name","concat","clientLogin","authcode","getLoggedInUserName","Cookies","loadWikiTree","hostname","loginResult","clear","username","everyone","firstPerson","spouseKeys","Spouses","s","personId","ancestorKeys","flat","ancestorDetails","privateFathers","privateMothers","ancestorList","offset","Id","Father","Mother","privateFather","privateMother","privateAncestors","descendantGenerationLimit","toFetch","people","allSpouses","Children","c","families","spouses","idToName","famId","getFamilyId","getSet","add","wife","husband","converted","Set","convertPerson","spouse","familySpouses","Gender","husb","child","marriage_date","marriage_location","parsedDate","parseDate","buildGedcom","spouse1","spouse2","hideId","firstName","FirstName","RealName","LastNameAtBirth","lastName","famc","sex","BirthDate","BirthLocation","BirthDateDecade","DataStatus","parseDecade","DeathDate","DeathLocation","DeathDateDecade","death","PhotoData","dataStatus","matchedDate","decade","gedcomIndis","escapedId","level","newSet","WikiTreeLoginState","WikiTreeDataSource","WikiTreeMenu","wikiTreeId","standalone","preventDefault","handleIdChange","wikitreeLogo","handleSelectId","wikiTreeLink","rel","example1","enterId","example2","wikiTreeIdModal","WikiTreeLoginMenu","wikiTreeLoginState","UNKNOWN","wikiTreeLoginFormRef","wikiTreeReturnUrlRef","returnUrl","submit","wikiTreeLoginUsername","LOGGED_IN","NOT_LOGGED_IN","checkWikiTreeLoginState","wikiTreeLogin","display","tooltip","require","lunr","normalize","input","toLocaleLowerCase","compare","score","naturalSort","LunrSearchIndex","self","use","multiLanguage","field","boost","spouseLastName","husbId","getHusbandLastName","normalizedName","normalizedSpouseLastName","query","getNameLine","trim","ScreenSize","SearchBar","searchResults","searchRef","searchIndex","birthDate","deathDate","description","getDescriptionLine","results","displaySearchResult","setValue","initialize","buildSearchIndex","initializeSearchIndex","Search","onSearchChange","debounce","_","handleSearch","onResultSelect","handleResultSelect","noResultsMessage","selectFirstResult","DataSourceEnum","AppState","TopBar","view","screenSize","showingChart","chartTypeItems","changeView","allowAllRelativesChart","LARGE","eventHandlers","onPrint","trigger","onDownloadPdf","onDownloadPng","onDownloadSvg","SMALL","Divider","showWikiTreeMenus","icon","fileMenus","chartMenus","wikiTreeLoginMenu","attached","inverted","color","desktopMenus","mobileMenus","ErrorMessage","Message","negative","ErrorPopup","Portal","onDismiss","getArguments","getParam","chartTypes","embedded","sourceSpec","WIKITREE","UPLOADED","GEDCOM_URL","EMBEDDED","parsedGen","isNaN","showSidePanel","App","INITIAL","showErrorPopup","chartRef","uploadedDataSource","gedcomUrlDataSource","wikiTreeDataSource","embeddedDataSource","gen","downloadPdf","downloadPng","downloadSvg","onDismissErrorPopup","renderMainArea","SHOWING_CHART","LOADING_MORE","error","Loader","active","ERROR","LOADING","otherStateChanges","changes","componentDidUpdate","oldSouce","isNewData","loadData","setError","loadMoreFromWikitree","updateDisplay","Route","Switch","exact","path","component","Redirect","addLocaleData","locale_de","locale_en","locale_fr","locale_it","locale_pl","locale_ru","messages","de","messages_de","fr","messages_fr","it","messages_it","pl","messages_pl","ru","messages_ru","language","navigator","browser","detect","ReactDOM"],"mappings":"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","file":"static/js/main.45c6bbe8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wikitree.1dee3d66.png\";","module.exports = __webpack_public_path__ + \"static/media/topola.060eef13.jpg\";","/** Sends an event to Google Analytics. */\nexport function analyticsEvent(action: string, data?: any) {\n  (window as any).gtag('event', action, data);\n}\n","import * as React from 'react';\nimport {event, select, Selection} from 'd3-selection';\nimport {interpolateNumber} from 'd3-interpolate';\nimport {intlShape} from 'react-intl';\nimport {max, min} from 'd3-array';\nimport {Responsive} from 'semantic-ui-react';\nimport {saveAs} from 'file-saver';\nimport {zoom, ZoomBehavior, zoomTransform} from 'd3-zoom';\nimport 'd3-transition';\nimport {\n  JsonGedcomData,\n  ChartHandle,\n  IndiInfo,\n  createChart,\n  DetailedRenderer,\n  HourglassChart,\n  RelativesChart,\n  FancyChart,\n  CircleRenderer,\n} from 'topola';\n\n/** How much to zoom when using the +/- buttons. */\nconst ZOOM_FACTOR = 1.3;\n\n/**\n * Called when the view is dragged with the mouse.\n *\n * @param size the size of the chart\n */\nfunction zoomed(size: [number, number]) {\n  const parent = select('#svgContainer').node() as Element;\n\n  const scale = event.transform.k;\n  const offsetX = max([0, (parent.clientWidth - size[0] * scale) / 2]);\n  const offsetY = max([0, (parent.clientHeight - size[1] * scale) / 2]);\n  select('#chartSvg')\n    .attr('width', size[0] * scale)\n    .attr('height', size[1] * scale)\n    .attr('transform', `translate(${offsetX}, ${offsetY})`);\n  select('#chart').attr('transform', `scale(${scale})`);\n\n  parent.scrollLeft = -event.transform.x;\n  parent.scrollTop = -event.transform.y;\n}\n\n/** Called when the scrollbars are used. */\nfunction scrolled() {\n  const parent = select('#svgContainer').node() as Element;\n  const x = parent.scrollLeft + parent.clientWidth / 2;\n  const y = parent.scrollTop + parent.clientHeight / 2;\n  const scale = zoomTransform(parent).k;\n  select(parent).call(zoom().translateTo, x / scale, y / scale);\n}\n\n/** Loads blob as data URL. */\nfunction loadAsDataUrl(blob: Blob): Promise<string> {\n  const reader = new FileReader();\n  reader.readAsDataURL(blob);\n  return new Promise<string>((resolve, reject) => {\n    reader.onload = (e) => resolve((e.target as FileReader).result as string);\n  });\n}\n\nasync function inlineImage(image: SVGImageElement) {\n  const href = image.href.baseVal;\n  if (!href) {\n    return;\n  }\n  try {\n    const response = await fetch(href);\n    const blob = await response.blob();\n    const dataUrl = await loadAsDataUrl(blob);\n    image.href.baseVal = dataUrl;\n  } catch (e) {\n    console.warn('Failed to load image:', e);\n  }\n}\n\n/**\n * Fetches all images in the SVG and replaces them with inlined images as data\n * URLs. Images are replaced in place. The replacement is done, the returned\n * promise is resolved.\n */\nasync function inlineImages(svg: Element): Promise<void> {\n  const images = Array.from(svg.getElementsByTagName('image'));\n  await Promise.all(images.map(inlineImage));\n}\n\n/** Loads a blob into an image object. */\nfunction loadImage(blob: Blob): Promise<HTMLImageElement> {\n  const image = new Image();\n  image.src = URL.createObjectURL(blob);\n  return new Promise<HTMLImageElement>((resolve, reject) => {\n    image.addEventListener('load', () => resolve(image));\n  });\n}\n\n/** Draw image on a new canvas and return the canvas. */\nfunction drawOnCanvas(image: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  // Scale image for better quality.\n  canvas.width = image.width * 2;\n  canvas.height = image.height * 2;\n\n  const ctx = canvas.getContext('2d')!;\n  const oldFill = ctx.fillStyle;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = oldFill;\n\n  ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n  return canvas;\n}\n\nfunction canvasToBlob(canvas: HTMLCanvasElement, type: string) {\n  return new Promise<Blob>((resolve, reject) => {\n    canvas.toBlob((blob) => {\n      if (blob) {\n        resolve(blob);\n      } else {\n        reject();\n      }\n    }, type);\n  });\n}\n\n/** Supported chart types. */\nexport enum ChartType {\n  Hourglass,\n  Relatives,\n  Fancy,\n}\n\nexport interface ChartProps {\n  data: JsonGedcomData;\n  selection: IndiInfo;\n  chartType: ChartType;\n  onSelection: (indiInfo: IndiInfo) => void;\n  freezeAnimation?: boolean;\n}\n\n/** Component showing the genealogy chart and handling transition animations. */\nexport class Chart extends React.PureComponent<ChartProps, {}> {\n  private chart?: ChartHandle;\n  /** Animation is in progress. */\n  private animating = false;\n  /** Rendering is required after the current animation finishes. */\n  private rerenderRequired = false;\n  /** The d3 zoom behavior object. */\n  private zoomBehavior?: ZoomBehavior<Element, any>;\n\n  private getChartType() {\n    switch (this.props.chartType) {\n      case ChartType.Hourglass:\n        return HourglassChart;\n      case ChartType.Relatives:\n        return RelativesChart;\n      case ChartType.Fancy:\n        return FancyChart;\n      default:\n        // Fall back to hourglass chart.\n        return HourglassChart;\n    }\n  }\n\n  private getRendererType() {\n    switch (this.props.chartType) {\n      case ChartType.Fancy:\n        return CircleRenderer;\n      default:\n        // Use DetailedRenderer by default.\n        return DetailedRenderer;\n    }\n  }\n\n  private zoom(factor: number) {\n    const parent = select('#svgContainer') as Selection<Element, any, any, any>;\n    this.zoomBehavior!.scaleBy(parent, factor);\n  }\n\n  /**\n   * Renders the chart or performs a transition animation to a new state.\n   * If indiInfo is not given, it means that it is the initial render and no\n   * animation is performed.\n   */\n  private renderChart(args: {initialRender: boolean} = {initialRender: false}) {\n    // Wait for animation to finish if animation is in progress.\n    if (!args.initialRender && this.animating) {\n      this.rerenderRequired = true;\n      return;\n    }\n\n    // Freeze changing selection after initial rendering.\n    if (!args.initialRender && this.props.freezeAnimation) {\n      return;\n    }\n\n    if (args.initialRender) {\n      (select('#chart').node() as HTMLElement).innerHTML = '';\n      this.chart = createChart({\n        json: this.props.data,\n        chartType: this.getChartType(),\n        renderer: this.getRendererType(),\n        svgSelector: '#chart',\n        indiCallback: (info) => this.props.onSelection(info),\n        animate: true,\n        updateSvgSize: false,\n        locale: this.context.intl.locale,\n      });\n    } else {\n      this.chart!.setData(this.props.data);\n    }\n    const chartInfo = this.chart!.render({\n      startIndi: this.props.selection.id,\n      baseGeneration: this.props.selection.generation,\n    });\n    const svg = select('#chartSvg');\n    const parent = select('#svgContainer').node() as Element;\n\n    const scale = zoomTransform(parent).k;\n    const zoomOutFactor = min([\n      1,\n      scale,\n      parent.clientWidth / chartInfo.size[0],\n      parent.clientHeight / chartInfo.size[1],\n    ])!;\n    const extent: [number, number] = [max([0.1, zoomOutFactor])!, 2];\n\n    this.zoomBehavior = zoom()\n      .scaleExtent(extent)\n      .translateExtent([[0, 0], chartInfo.size])\n      .on('zoom', () => zoomed(chartInfo.size));\n    select(parent)\n      .on('scroll', scrolled)\n      .call(this.zoomBehavior);\n\n    const scrollTopTween = (scrollTop: number) => {\n      return () => {\n        const i = interpolateNumber(parent.scrollTop, scrollTop);\n        return (t: number) => {\n          parent.scrollTop = i(t);\n        };\n      };\n    };\n    const scrollLeftTween = (scrollLeft: number) => {\n      return () => {\n        const i = interpolateNumber(parent.scrollLeft, scrollLeft);\n        return (t: number) => {\n          parent.scrollLeft = i(t);\n        };\n      };\n    };\n\n    const dx = parent.clientWidth / 2 - chartInfo.origin[0] * scale;\n    const dy = parent.clientHeight / 2 - chartInfo.origin[1] * scale;\n    const offsetX = max([\n      0,\n      (parent.clientWidth - chartInfo.size[0] * scale) / 2,\n    ]);\n    const offsetY = max([\n      0,\n      (parent.clientHeight - chartInfo.size[1] * scale) / 2,\n    ]);\n    const svgTransition = svg\n      .transition()\n      .delay(200)\n      .duration(500);\n    const transition = args.initialRender ? svg : svgTransition;\n    transition\n      .attr('transform', `translate(${offsetX}, ${offsetY})`)\n      .attr('width', chartInfo.size[0] * scale)\n      .attr('height', chartInfo.size[1] * scale);\n    if (args.initialRender) {\n      parent.scrollLeft = -dx;\n      parent.scrollTop = -dy;\n    } else {\n      svgTransition\n        .tween('scrollLeft', scrollLeftTween(-dx))\n        .tween('scrollTop', scrollTopTween(-dy));\n    }\n\n    // After the animation is finished, rerender the chart if required.\n    this.animating = true;\n    chartInfo.animationPromise.then(() => {\n      this.animating = false;\n      if (this.rerenderRequired) {\n        this.rerenderRequired = false;\n        this.renderChart({initialRender: false});\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.renderChart({initialRender: true});\n  }\n\n  componentDidUpdate(prevProps: ChartProps) {\n    const initialRender = this.props.chartType !== prevProps.chartType;\n    this.renderChart({initialRender});\n  }\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    return (\n      <div id=\"svgContainer\">\n        <Responsive minWidth={768} className=\"zoom\">\n          <button className=\"zoom-in\" onClick={() => this.zoom(ZOOM_FACTOR)}>\n            +\n          </button>\n          <button\n            className=\"zoom-out\"\n            onClick={() => this.zoom(1 / ZOOM_FACTOR)}\n          >\n            −\n          </button>\n        </Responsive>\n        <svg id=\"chartSvg\">\n          <g id=\"chart\" />\n        </svg>\n      </div>\n    );\n  }\n\n  /** Return a copy of the SVG chart but without scaling and positioning. */\n  private getStrippedSvg() {\n    const svg = document.getElementById('chartSvg')!.cloneNode(true) as Element;\n\n    svg.removeAttribute('transform');\n    const parent = select('#svgContainer').node() as Element;\n    const scale = zoomTransform(parent).k;\n    svg.setAttribute(\n      'width',\n      String(Number(svg.getAttribute('width')) / scale),\n    );\n    svg.setAttribute(\n      'height',\n      String(Number(svg.getAttribute('height')) / scale),\n    );\n    svg.querySelector('#chart')!.removeAttribute('transform');\n\n    return svg;\n  }\n\n  private getSvgContents() {\n    return new XMLSerializer().serializeToString(this.getStrippedSvg());\n  }\n\n  private async getSvgContentsWithInlinedImages() {\n    const svg = this.getStrippedSvg();\n    await inlineImages(svg);\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  /** Shows the print dialog to print the currently displayed chart. */\n  print() {\n    const printWindow = document.createElement('iframe');\n    printWindow.style.position = 'absolute';\n    printWindow.style.top = '-1000px';\n    printWindow.style.left = '-1000px';\n    printWindow.onload = () => {\n      printWindow.contentDocument!.open();\n      printWindow.contentDocument!.write(this.getSvgContents());\n      printWindow.contentDocument!.close();\n      // Doesn't work on Firefox without the setTimeout.\n      setTimeout(() => {\n        printWindow.contentWindow!.focus();\n        printWindow.contentWindow!.print();\n        printWindow.parentNode!.removeChild(printWindow);\n      }, 500);\n    };\n    document.body.appendChild(printWindow);\n  }\n\n  async downloadSvg() {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    saveAs(blob, 'topola.svg');\n  }\n\n  private async drawOnCanvas(): Promise<HTMLCanvasElement> {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    return await drawOnCanvas(await loadImage(blob));\n  }\n\n  async downloadPng() {\n    const canvas = await this.drawOnCanvas();\n    const blob = await canvasToBlob(canvas, 'image/png');\n    saveAs(blob, 'topola.png');\n  }\n\n  async downloadPdf() {\n    // Lazy load jspdf.\n    const {default: jspdf} = await import('jspdf');\n    const canvas = await this.drawOnCanvas();\n    const doc = new jspdf({\n      orientation: canvas.width > canvas.height ? 'l' : 'p',\n      unit: 'pt',\n      format: [canvas.width, canvas.height],\n    });\n    doc.addImage(canvas, 'PNG', 0, 0, canvas.width, canvas.height, 'NONE');\n    doc.save('topola.pdf');\n  }\n}\n","/** Error class adding an error code used for i18n. */\nexport class TopolaError extends Error {\n  constructor(\n    public readonly code: string,\n    message: string,\n    public readonly args: {[key: string]: string} = {},\n  ) {\n    super(message);\n  }\n}\n","import {GedcomEntry, parse as parseGedcom} from 'parse-gedcom';\nimport {TopolaError} from './error';\nimport {\n  JsonFam,\n  JsonGedcomData,\n  JsonIndi,\n  gedcomEntriesToJson,\n  JsonImage,\n  JsonEvent,\n} from 'topola';\n\nexport interface GedcomData {\n  /** The HEAD entry. */\n  head: GedcomEntry;\n  /** INDI entries mapped by id. */\n  indis: {[key: string]: GedcomEntry};\n  /** FAM entries mapped by id. */\n  fams: {[key: string]: GedcomEntry};\n  /** Other entries mapped by id, e.g. NOTE, SOUR. */\n  other: {[key: string]: GedcomEntry};\n}\n\nexport interface TopolaData {\n  chartData: JsonGedcomData;\n  gedcom: GedcomData;\n}\n\n/**\n * Returns the identifier extracted from a pointer string.\n * E.g. '@I123@' -> 'I123'\n */\nexport function pointerToId(pointer: string): string {\n  return pointer.substring(1, pointer.length - 1);\n}\n\nexport function idToIndiMap(data: JsonGedcomData): Map<string, JsonIndi> {\n  const map = new Map<string, JsonIndi>();\n  data.indis.forEach((indi) => {\n    map.set(indi.id, indi);\n  });\n  return map;\n}\n\nexport function idToFamMap(data: JsonGedcomData): Map<string, JsonFam> {\n  const map = new Map<string, JsonFam>();\n  data.fams.forEach((fam) => {\n    map.set(fam.id, fam);\n  });\n  return map;\n}\n\nfunction prepareGedcom(entries: GedcomEntry[]): GedcomData {\n  const head = entries.find((entry) => entry.tag === 'HEAD')!;\n  const indis: {[key: string]: GedcomEntry} = {};\n  const fams: {[key: string]: GedcomEntry} = {};\n  const other: {[key: string]: GedcomEntry} = {};\n  entries.forEach((entry) => {\n    if (entry.tag === 'INDI') {\n      indis[pointerToId(entry.pointer)] = entry;\n    } else if (entry.tag === 'FAM') {\n      fams[pointerToId(entry.pointer)] = entry;\n    } else if (entry.pointer) {\n      other[pointerToId(entry.pointer)] = entry;\n    }\n  });\n  return {head, indis, fams, other};\n}\n\nfunction strcmp(a: string, b: string) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/** Compares dates of the given events. */\nfunction compareDates(\n  event1: JsonEvent | undefined,\n  event2: JsonEvent | undefined,\n): number {\n  const date1 =\n    event1 && (event1.date || (event1.dateRange && event1.dateRange.from));\n  const date2 =\n    event2 && (event2.date || (event2.dateRange && event2.dateRange.from));\n  if (!date1 || !date1.year || !date2 || !date2.year) {\n    return 0;\n  }\n  if (date1.year !== date2.year) {\n    return date1.year - date2.year;\n  }\n  if (!date1.month || !date2.month) {\n    return 0;\n  }\n  if (date1.month !== date2.month) {\n    return date1.month - date2.month;\n  }\n  if (date1.day && date2.day && date1.day !== date2.day) {\n    return date1.month - date2.month;\n  }\n  return 0;\n}\n\n/** Birth date comparator for individuals. */\nfunction birthDatesComparator(gedcom: JsonGedcomData) {\n  const indiMap = idToIndiMap(gedcom);\n\n  return (indiId1: string, indiId2: string) => {\n    const indi1: JsonIndi | undefined = indiMap.get(indiId1);\n    const indi2: JsonIndi | undefined = indiMap.get(indiId2);\n    return (\n      compareDates(indi1 && indi1.birth, indi2 && indi2.birth) ||\n      strcmp(indiId1, indiId2)\n    );\n  };\n}\n\n/** Marriage date comparator for families. */\nfunction marriageDatesComparator(gedcom: JsonGedcomData) {\n  const famMap = idToFamMap(gedcom);\n\n  return (famId1: string, famId2: string) => {\n    const fam1: JsonFam | undefined = famMap.get(famId1);\n    const fam2: JsonFam | undefined = famMap.get(famId2);\n    return (\n      compareDates(fam1 && fam1.marriage, fam2 && fam2.marriage) ||\n      strcmp(famId1, famId2)\n    );\n  };\n}\n\n/**\n * Sorts children by birth date in the given family.\n * Does not modify the input objects.\n */\nfunction sortFamilyChildren(\n  fam: JsonFam,\n  comparator: (id1: string, id2: string) => number,\n): JsonFam {\n  if (!fam.children) {\n    return fam;\n  }\n  const newChildren = fam.children.sort(comparator);\n  return Object.assign({}, fam, {children: newChildren});\n}\n\n/**\n * Sorts children by birth date.\n * Does not modify the input object.\n */\nfunction sortChildren(gedcom: JsonGedcomData): JsonGedcomData {\n  const comparator = birthDatesComparator(gedcom);\n  const newFams = gedcom.fams.map((fam) => sortFamilyChildren(fam, comparator));\n  return Object.assign({}, gedcom, {fams: newFams});\n}\n\n/**\n * Sorts spouses by marriage date.\n * Does not modify the input objects.\n */\nfunction sortIndiSpouses(\n  indi: JsonIndi,\n  comparator: (id1: string, id2: string) => number,\n): JsonFam {\n  if (!indi.fams) {\n    return indi;\n  }\n  const newFams = indi.fams.sort(comparator);\n  return Object.assign({}, indi, {fams: newFams});\n}\n\nfunction sortSpouses(gedcom: JsonGedcomData): JsonGedcomData {\n  const comparator = marriageDatesComparator(gedcom);\n  const newIndis = gedcom.indis.map((indi) =>\n    sortIndiSpouses(indi, comparator),\n  );\n  return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/** Sorts children and spouses. */\nexport function normalizeGedcom(gedcom: JsonGedcomData): JsonGedcomData {\n  return sortSpouses(sortChildren(gedcom));\n}\n\nconst IMAGE_EXTENSIONS = ['.jpg', '.png', '.gif'];\n\n/** Returns true if the given file name has a known image extension. */\nfunction isImageFile(fileName: string): boolean {\n  const lowerName = fileName.toLowerCase();\n  return IMAGE_EXTENSIONS.some((ext) => lowerName.endsWith(ext));\n}\n\n/**\n * Removes images that are not HTTP links or do not have known image extensions.\n * Does not modify the input object.\n */\nfunction filterImage(indi: JsonIndi, images: Map<string, string>): JsonIndi {\n  if (!indi.images || indi.images.length === 0) {\n    return indi;\n  }\n  const newImages: JsonImage[] = [];\n  indi.images.forEach((image) => {\n    const fileName = image.url.match(/[^/\\\\]*$/)![0];\n    // If the image file has been loaded into memory, use it.\n    if (images.has(fileName)) {\n      newImages.push({url: images.get(fileName)!, title: image.title});\n    } else if (image.url.startsWith('http') && isImageFile(image.url)) {\n      newImages.push(image);\n    }\n  });\n  return Object.assign({}, indi, {images: newImages});\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImages(\n  gedcom: JsonGedcomData,\n  images: Map<string, string>,\n): JsonGedcomData {\n  const newIndis = gedcom.indis.map((indi) => filterImage(indi, images));\n  return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/**\n * Converts GEDCOM file into JSON data performing additional transformations:\n * - sort children by birth date\n * - remove images that are not HTTP links and aren't mapped in `images`.\n *\n * @param images Map from file name to image URL. This is used to pass in\n *   uploaded images.\n */\nexport function convertGedcom(\n  gedcom: string,\n  images: Map<string, string>,\n): TopolaData {\n  const entries = parseGedcom(gedcom);\n  const json = gedcomEntriesToJson(entries);\n  if (\n    !json ||\n    !json.indis ||\n    !json.indis.length ||\n    !json.fams ||\n    !json.fams.length\n  ) {\n    throw new TopolaError('GEDCOM_READ_FAILED', 'Failed to read GEDCOM file');\n  }\n\n  return {\n    chartData: filterImages(normalizeGedcom(json), images),\n    gedcom: prepareGedcom(entries),\n  };\n}\n\nexport function getSoftware(head: GedcomEntry): string | null {\n  const sour =\n    head && head.tree && head.tree.find((entry) => entry.tag === 'SOUR');\n  const name =\n    sour && sour.tree && sour.tree.find((entry) => entry.tag === 'NAME');\n  return (name && name.data) || null;\n}\n","import {Date as TopolaDate, DateOrRange, DateRange, getDate} from 'topola';\nimport {InjectedIntl} from 'react-intl';\n\nconst DATE_QUALIFIERS = new Map([\n  ['abt', 'about'],\n  ['cal', 'calculated'],\n  ['est', 'estimated'],\n]);\n\nfunction formatDate(date: TopolaDate, intl: InjectedIntl) {\n  const hasDay = date.day !== undefined;\n  const hasMonth = date.month !== undefined;\n  const hasYear = date.year !== undefined;\n  if (!hasDay && !hasMonth && !hasYear) {\n    return date.text || '';\n  }\n  const dateObject = new Date(\n    hasYear ? date.year! : 0,\n    hasMonth ? date.month! - 1 : 0,\n    hasDay ? date.day! : 1,\n  );\n\n  const qualifier = date.qualifier && date.qualifier.toLowerCase();\n  const translatedQualifier =\n    qualifier &&\n    intl.formatMessage({\n      id: `date.${qualifier}`,\n      defaultMessage: DATE_QUALIFIERS.get(qualifier) || qualifier,\n    });\n\n  const formatOptions = {\n    day: hasDay ? 'numeric' : undefined,\n    month: hasMonth ? 'long' : undefined,\n    year: hasYear ? 'numeric' : undefined,\n  };\n  const translatedDate = new Intl.DateTimeFormat(\n    intl.locale,\n    formatOptions,\n  ).format(dateObject);\n\n  return [translatedQualifier, translatedDate].join(' ');\n}\n\nfunction formatDateRage(dateRange: DateRange, intl: InjectedIntl) {\n  const fromDate = dateRange.from;\n  const toDate = dateRange.to;\n  const translatedFromDate = fromDate && formatDate(fromDate, intl);\n  const translatedToDate = toDate && formatDate(toDate, intl);\n  if (translatedFromDate && translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.between',\n        defaultMessage: 'between {from} and {to}',\n      },\n      {from: translatedFromDate, to: translatedToDate},\n    );\n  }\n  if (translatedFromDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.after',\n        defaultMessage: 'after {from}',\n      },\n      {from: translatedFromDate},\n    );\n  }\n  if (translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.before',\n        defaultMessage: 'before {to}',\n      },\n      {to: translatedToDate},\n    );\n  }\n  return '';\n}\n\n/** Formats a DateOrRange object. */\nexport function formatDateOrRange(\n  dateOrRange: DateOrRange | undefined,\n  intl: InjectedIntl,\n): string {\n  if (!dateOrRange) {\n    return '';\n  }\n  if (dateOrRange.date) {\n    return formatDate(dateOrRange.date, intl);\n  }\n  if (dateOrRange.dateRange) {\n    return formatDateRage(dateOrRange.dateRange, intl);\n  }\n  return '';\n}\n\n/** Formats a date given in GEDCOM format. */\nexport function translateDate(gedcomDate: string, intl: InjectedIntl): string {\n  return formatDateOrRange(getDate(gedcomDate), intl);\n}\n","import * as React from 'react';\nimport flatMap from 'array.prototype.flatmap';\nimport Linkify from 'react-linkify';\nimport {FormattedMessage, InjectedIntl} from 'react-intl';\nimport {GedcomData, pointerToId} from './util/gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {intlShape} from 'react-intl';\nimport {translateDate} from './util/date_util';\n\ninterface Props {\n  gedcom: GedcomData;\n  indi: string;\n}\n\nconst EVENT_TAGS = ['BIRT', 'BAPM', 'CHR', 'DEAT', 'BURI', 'EVEN', 'CENS'];\nconst EXCLUDED_TAGS = ['NAME', 'SEX', 'FAMC', 'FAMS', 'NOTE', 'SOUR'];\nconst TAG_DESCRIPTIONS = new Map([\n  ['ADOP', 'Adoption'],\n  ['BAPM', 'Baptism'],\n  ['BIRT', 'Birth'],\n  ['BURI', 'Burial'],\n  ['CENS', 'Census'],\n  ['CHR', 'Christening'],\n  ['CREM', 'Cremation'],\n  ['DEAT', 'Death'],\n  ['EDUC', 'Education'],\n  ['EMAIL', 'E-mail'],\n  ['EMIG', 'Emigration'],\n  ['EVEN', 'Event'],\n  ['FACT', 'Fact'],\n  ['IMMI', 'Immigration'],\n  ['MILT', 'Military services'],\n  ['NATU', 'Naturalization'],\n  ['OCCU', 'Occupation'],\n  ['TITL', 'Title'],\n  ['WWW', 'WWW'],\n]);\n\nfunction translateTag(tag: string) {\n  const normalizedTag = tag.replace(/_/g, '');\n  return (\n    <FormattedMessage\n      id={`gedcom.${normalizedTag}`}\n      defaultMessage={TAG_DESCRIPTIONS.get(normalizedTag) || normalizedTag}\n    />\n  );\n}\n\nfunction joinLines(lines: (JSX.Element | string)[]) {\n  return (\n    <>\n      {lines.map((line, index) => (\n        <div key={index}>\n          <Linkify properties={{target: '_blank'}}>{line}</Linkify>\n          <br />\n        </div>\n      ))}\n    </>\n  );\n}\n\n/**\n * Returns the data for the given GEDCOM entry as an array of lines. Supports\n * continuations with CONT and CONC.\n */\nfunction getData(entry: GedcomEntry) {\n  const result = [entry.data];\n  entry.tree.forEach((subentry) => {\n    if (subentry.tag === 'CONC' && subentry.data) {\n      const last = result.length - 1;\n      result[last] += subentry.data;\n    } else if (subentry.tag === 'CONT' && subentry.data) {\n      result.push(subentry.data);\n    }\n  });\n  return result;\n}\n\nfunction eventDetails(entry: GedcomEntry, intl: InjectedIntl) {\n  const lines = [];\n  if (entry.data && entry.data.length > 1) {\n    lines.push(<i>{entry.data}</i>);\n  }\n  const date = entry.tree.find((subentry) => subentry.tag === 'DATE');\n  if (date && date.data) {\n    lines.push(translateDate(date.data, intl));\n  }\n  const place = entry.tree.find((subentry) => subentry.tag === 'PLAC');\n  if (place && place.data) {\n    lines.push(...getData(place));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction dataDetails(entry: GedcomEntry) {\n  const lines = [];\n  if (entry.data) {\n    lines.push(...getData(entry));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction noteDetails(entry: GedcomEntry) {\n  return joinLines(\n    getData(entry).map((line, index) => <i key={index}>{line}</i>),\n  );\n}\n\nfunction nameDetails(entry: GedcomEntry) {\n  return (\n    <h2 className=\"ui header\">\n      {entry.data\n        .split('/')\n        .filter((name) => !!name)\n        .map((name, index) => (\n          <div key={index}>\n            {name}\n            <br />\n          </div>\n        ))}\n    </h2>\n  );\n}\n\nfunction getDetails(\n  entries: GedcomEntry[],\n  tags: string[],\n  detailsFunction: (entry: GedcomEntry) => JSX.Element | null,\n): JSX.Element[] {\n  return flatMap(tags, (tag) =>\n    entries\n      .filter((entry) => entry.tag === tag)\n      .map((entry) => detailsFunction(entry)),\n  )\n    .filter((element) => element !== null)\n    .map((element, index) => (\n      <div className=\"ui segment\" key={index}>\n        {element}\n      </div>\n    ));\n}\n\n/**\n * Returns true if there is displayable information in this entry.\n * Returns false if there is no data in this entry or this is only a reference\n * to another entry.\n */\nfunction hasData(entry: GedcomEntry) {\n  return entry.tree.length > 0 || (entry.data && !entry.data.startsWith('@'));\n}\n\nfunction getOtherDetails(entries: GedcomEntry[]) {\n  return entries\n    .filter(\n      (entry) =>\n        !EXCLUDED_TAGS.includes(entry.tag) && !EVENT_TAGS.includes(entry.tag),\n    )\n    .filter(hasData)\n    .map((entry) => dataDetails(entry))\n    .filter((element) => element !== null)\n    .map((element, index) => (\n      <div className=\"ui segment\" key={index}>\n        {element}\n      </div>\n    ));\n}\n\n/**\n * If the entry is a reference to a top-level entry, the referenced entry is\n * returned. Otherwise, returns the given entry unmodified.\n */\nfunction dereference(entry: GedcomEntry, gedcom: GedcomData) {\n  if (entry.data) {\n    const dereferenced = gedcom.other[pointerToId(entry.data)];\n    if (dereferenced) {\n      return dereferenced;\n    }\n  }\n  return entry;\n}\n\nexport class Details extends React.Component<Props, {}> {\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    const entries = this.props.gedcom.indis[this.props.indi].tree;\n    const entriesWithData = entries\n      .map((entry) => dereference(entry, this.props.gedcom))\n      .filter(hasData);\n\n    return (\n      <div className=\"ui segments\" id=\"details\">\n        {getDetails(entries, ['NAME'], nameDetails)}\n        {getDetails(entries, EVENT_TAGS, (entry) =>\n          eventDetails(entry, this.context.intl as InjectedIntl),\n        )}\n        {getOtherDetails(entriesWithData)}\n        {getDetails(entriesWithData, ['NOTE'], noteDetails)}\n      </div>\n    );\n  }\n}\n","import {analyticsEvent} from '../util/analytics';\nimport {convertGedcom, getSoftware, TopolaData} from '../util/gedcom_util';\nimport {DataSource, DataSourceEnum, SourceSelection} from './data_source';\nimport {IndiInfo, JsonGedcomData} from 'topola';\nimport {TopolaError} from '../util/error';\n\n/**\n * Returns a valid IndiInfo object, either with the given indi and generation\n * or with an individual taken from the data and generation 0.\n */\nexport function getSelection(\n  data: JsonGedcomData,\n  selection?: IndiInfo,\n): IndiInfo {\n  // If ID is not given or it doesn't exist in the data, use the first ID in\n  // the data.\n  const id =\n    selection && data.indis.some((i) => i.id === selection.id)\n      ? selection.id\n      : data.indis[0].id;\n  return {id, generation: selection?.generation || 0};\n}\n\nfunction prepareData(\n  gedcom: string,\n  cacheId: string,\n  images?: Map<string, string>,\n): TopolaData {\n  const data = convertGedcom(gedcom, images || new Map());\n  const serializedData = JSON.stringify(data);\n  try {\n    sessionStorage.setItem(cacheId, serializedData);\n  } catch (e) {\n    console.warn('Failed to store data in session storage: ' + e);\n  }\n  return data;\n}\n\n/** Fetches data from the given URL. Uses cors-anywhere if handleCors is true. */\nexport async function loadFromUrl(\n  url: string,\n  handleCors: boolean,\n): Promise<TopolaData> {\n  try {\n    const cachedData = sessionStorage.getItem(url);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n\n  const driveUrlMatch1 = url.match(\n    /https:\\/\\/drive\\.google\\.com\\/file\\/d\\/(.*)\\/.*/,\n  );\n  if (driveUrlMatch1) {\n    url = `https://drive.google.com/uc?id=${driveUrlMatch1[1]}&export=download`;\n  }\n  const driveUrlMatch2 = url.match(\n    /https:\\/\\/drive\\.google\\.com\\/open\\?id=([^&]*)&?.*/,\n  );\n  if (driveUrlMatch2) {\n    url = `https://drive.google.com/uc?id=${driveUrlMatch2[1]}&export=download`;\n  }\n\n  const urlToFetch = handleCors\n    ? 'https://topola-cors.herokuapp.com/' + url\n    : url;\n\n  const response = await window.fetch(urlToFetch);\n  if (response.status !== 200) {\n    throw new Error(response.statusText);\n  }\n  const gedcom = await response.text();\n  return prepareData(gedcom, url);\n}\n\n/** Loads data from the given GEDCOM file contents. */\nexport async function loadGedcom(\n  hash: string,\n  gedcom?: string,\n  images?: Map<string, string>,\n): Promise<TopolaData> {\n  try {\n    const cachedData = sessionStorage.getItem(hash);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n  if (!gedcom) {\n    throw new TopolaError(\n      'ERROR_LOADING_UPLOADED_FILE',\n      'Error loading data. Please upload your file again.',\n    );\n  }\n  return prepareData(gedcom, hash, images);\n}\n\nexport interface UploadSourceSpec {\n  source: DataSourceEnum.UPLOADED;\n  gedcom?: string;\n  /** Hash of the GEDCOM contents. */\n  hash: string;\n  images?: Map<string, string>;\n}\n\n/** Files opened from the local computer. */\nexport class UploadedDataSource implements DataSource<UploadSourceSpec> {\n  // isNewData(args: Arguments, state: State): boolean {\n  isNewData(\n    newSource: SourceSelection<UploadSourceSpec>,\n    oldSource: SourceSelection<UploadSourceSpec>,\n    data?: TopolaData,\n  ): boolean {\n    return newSource.spec.hash !== oldSource.spec.hash;\n  }\n\n  async loadData(\n    source: SourceSelection<UploadSourceSpec>,\n  ): Promise<TopolaData> {\n    try {\n      const data = await loadGedcom(\n        source.spec.hash,\n        source.spec.gedcom,\n        source.spec.images,\n      );\n      const software = getSoftware(data.gedcom.head);\n      analyticsEvent('upload_file_loaded', {\n        event_label: software,\n        event_value: (source.spec.images && source.spec.images.size) || 0,\n      });\n      return data;\n    } catch (error) {\n      analyticsEvent('upload_file_error');\n      throw error;\n    }\n  }\n}\n\nexport interface UrlSourceSpec {\n  source: DataSourceEnum.GEDCOM_URL;\n  /** URL of the data that is loaded or is being loaded. */\n  url: string;\n  handleCors: boolean;\n}\n\n/** GEDCOM file loaded by pointing to a URL. */\nexport class GedcomUrlDataSource implements DataSource<UrlSourceSpec> {\n  isNewData(\n    newSource: SourceSelection<UrlSourceSpec>,\n    oldSource: SourceSelection<UrlSourceSpec>,\n    data?: TopolaData,\n  ): boolean {\n    return newSource.spec.url !== oldSource.spec.url;\n  }\n\n  async loadData(source: SourceSelection<UrlSourceSpec>): Promise<TopolaData> {\n    try {\n      const data = await loadFromUrl(source.spec.url, source.spec.handleCors);\n      const software = getSoftware(data.gedcom.head);\n      analyticsEvent('upload_file_loaded', {event_label: software});\n      return data;\n    } catch (error) {\n      analyticsEvent('url_file_error');\n      throw error;\n    }\n  }\n}\n","import {analyticsEvent} from '../util/analytics';\nimport {DataSource, DataSourceEnum, SourceSelection} from './data_source';\nimport {getSoftware, TopolaData} from '../util/gedcom_util';\nimport {loadGedcom} from './load_data';\n\n/**\n * Message types used in embedded mode.\n * When the parent is ready to receive messages, it sends PARENT_READY.\n * When the child (this app) is ready to receive messages, it sends READY.\n * When the child receives PARENT_READY, it sends READY.\n * When the parent receives READY, it sends data in a GEDCOM message.\n */\nenum EmbeddedMessageType {\n  GEDCOM = 'gedcom',\n  READY = 'ready',\n  PARENT_READY = 'parent_ready',\n}\n\n/** Message sent to parent or received from parent in embedded mode. */\ninterface EmbeddedMessage {\n  message: EmbeddedMessageType;\n}\n\ninterface GedcomMessage extends EmbeddedMessage {\n  message: EmbeddedMessageType.GEDCOM;\n  gedcom?: string;\n}\n\nexport interface EmbeddedSourceSpec {\n  source: DataSourceEnum.EMBEDDED;\n}\n\n/** GEDCOM file received from outside of the iframe. */\nexport class EmbeddedDataSource implements DataSource<EmbeddedSourceSpec> {\n  isNewData(\n    newSource: SourceSelection<EmbeddedSourceSpec>,\n    oldSource: SourceSelection<EmbeddedSourceSpec>,\n    data?: TopolaData,\n  ): boolean {\n    // Never reload data.\n    return false;\n  }\n\n  private async onMessage(\n    message: EmbeddedMessage,\n    resolve: (value: TopolaData) => void,\n    reject: (reason: any) => void,\n  ) {\n    if (message.message === EmbeddedMessageType.PARENT_READY) {\n      // Parent didn't receive the first 'ready' message, so we need to send it again.\n      window.parent.postMessage({message: EmbeddedMessageType.READY}, '*');\n    } else if (message.message === EmbeddedMessageType.GEDCOM) {\n      const gedcom = (message as GedcomMessage).gedcom;\n      if (!gedcom) {\n        return;\n      }\n      try {\n        const data = await loadGedcom('', gedcom);\n        const software = getSoftware(data.gedcom.head);\n        analyticsEvent('embedded_file_loaded', {\n          event_label: software,\n        });\n        resolve(data);\n      } catch (error) {\n        analyticsEvent('embedded_file_error');\n        reject(error);\n      }\n    }\n  }\n\n  async loadData(\n    source: SourceSelection<EmbeddedSourceSpec>,\n  ): Promise<TopolaData> {\n    // Notify the parent window that we are ready.\n    return new Promise<TopolaData>((resolve, reject) => {\n      window.parent.postMessage({message: EmbeddedMessageType.READY}, '*');\n      window.addEventListener('message', (data) =>\n        this.onMessage(data.data, resolve, reject),\n      );\n    });\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport logo from './topola.jpg';\nimport {Card, Grid, Image, Responsive} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\n/** Link that loads a GEDCOM file from URL. */\nfunction GedcomLink(props: {url: string; text: string}) {\n  return (\n    <Link\n      to={{pathname: '/view', search: queryString.stringify({url: props.url})}}\n    >\n      {props.text}\n    </Link>\n  );\n}\n\nfunction formatBuildDate(dateString: string) {\n  return dateString.slice(0, 16);\n}\n\n/** The intro page. */\nexport function Intro() {\n  const contents = (\n    <>\n      <p>\n        <FormattedMessage\n          id=\"intro.description\"\n          defaultMessage={\n            'Topola Genealogy is a genealogy tree viewer that lets you' +\n            ' browse the structure of the family.'\n          }\n        />\n      </p>\n      <p>\n        <FormattedMessage\n          id=\"intro.instructions\"\n          defaultMessage={\n            'Use the OPEN FILE or LOAD FROM URL buttons above to load' +\n            ' a GEDCOM file. You can export a GEDCOM file from most of the' +\n            ' existing genealogy programs and web sites.'\n          }\n        />\n      </p>\n      <p>\n        <FormattedMessage\n          id=\"intro.examples\"\n          defaultMessage={\n            'Here are some examples from the web that you can view:'\n          }\n        />\n      </p>\n      <ul>\n        <li>\n          <GedcomLink\n            url=\"http://genpol.com/module-Downloads-prep_hand_out-lid-32.html\"\n            text=\"Karol Wojtyła\"\n          />{' '}\n          (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n          <a href=\"http://genpol.com/module-Downloads-display-lid-32.html\">\n            GENPOL\n          </a>\n          )\n        </li>\n        <li>\n          <GedcomLink\n            url=\"https://webtreeprint.com/tp_downloader.php?path=famous_gedcoms/shakespeare.ged\"\n            text=\"Shakespeare\"\n          />{' '}\n          (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n          <a href=\"https://webtreeprint.com/tp_famous_gedcoms.php\">\n            webtreeprint.com\n          </a>\n          )\n        </li>\n        <li>\n          <GedcomLink\n            url=\"http://genealogyoflife.com/tng/gedcom/HarryPotter.ged\"\n            text=\"Harry Potter\"\n          />{' '}\n          (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n          <a href=\"http://famousfamilytrees.blogspot.com/\">\n            Famous Family Trees\n          </a>\n          )\n        </li>\n      </ul>\n      <p>\n        <b>\n          <FormattedMessage id=\"intro.privacy\" defaultMessage=\"Privacy\" />\n        </b>\n        {': '}\n        <FormattedMessage\n          id=\"intro.privacy_note\"\n          defaultMessage={\n            'When using the \"load from file\" option, this site does not' +\n            ' send your data anywhere and files loaded from disk do not' +\n            ' leave your computer. When using \"load from URL\", data is' +\n            ' passed through the {link} service to deal with an issue with' +\n            ' cross-site file loading in the browser (CORS).'\n          }\n          values={{\n            link: (\n              <a href=\"https://topola-cors.herokuapp.com/\">cors-anywhere</a>\n            ),\n          }}\n        />\n      </p>\n      <p className=\"ui right aligned version\">\n        version: {formatBuildDate(process.env.REACT_APP_GIT_TIME!)} (\n        <a\n          href={`https://github.com/PeWu/topola-viewer/commit/${process.env.REACT_APP_GIT_SHA}`}\n        >\n          {process.env.REACT_APP_GIT_SHA}\n        </a>\n        )\n      </p>\n    </>\n  );\n\n  return (\n    <div id=\"content\">\n      <div className=\"backgroundImage\" />\n      <Card className=\"intro\">\n        <Responsive as={Card.Content} minWidth={768}>\n          <Card.Header>\n            <FormattedMessage\n              id=\"intro.title\"\n              defaultMessage=\"Topola Genealogy Viewer\"\n            />\n          </Card.Header>\n        </Responsive>\n        <Card.Content>\n          <Responsive as={Grid} minWidth={768}>\n            <Grid.Row>\n              <Grid.Column width={5}>\n                <Image src={logo} alt=\"Topola logo\" />\n              </Grid.Column>\n              <Grid.Column width={11}>{contents}</Grid.Column>\n            </Grid.Row>\n          </Responsive>\n          <Responsive maxWidth={767}>\n            <Image\n              src={logo}\n              alt=\"Topola logo\"\n              centered={true}\n              size=\"tiny\"\n              className=\"blockImage\"\n            />\n            {contents}\n          </Responsive>\n        </Card.Content>\n      </Card>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport {\n  Menu,\n  Dropdown,\n  MenuItemProps,\n  DropdownItemProps,\n} from 'semantic-ui-react';\n\nexport enum MenuType {\n  Menu,\n  Dropdown,\n}\n\ninterface Props {\n  menuType?: MenuType;\n}\n\nexport class MenuItem extends React.Component<\n  Props & MenuItemProps & DropdownItemProps\n> {\n  render() {\n    const newProps = {...this.props};\n    // Remove menuType from props to avoid error message in the console.\n    delete newProps.menuType;\n    return (\n      <>\n        {this.props.menuType === MenuType.Menu ? (\n          <Menu.Item {...newProps}>{this.props.children}</Menu.Item>\n        ) : (\n          <Dropdown.Item {...newProps}>{this.props.children}</Dropdown.Item>\n        )}\n      </>\n    );\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport md5 from 'md5';\nimport {analyticsEvent} from '../util/analytics';\nimport {Dropdown, Icon, Menu} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {MenuType} from './menu_item';\nimport {RouteComponentProps} from 'react-router-dom';\n\nfunction loadFileAsText(file: File): Promise<string> {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.onload = (evt: ProgressEvent) => {\n      resolve((evt.target as FileReader).result as string);\n    };\n    reader.readAsText(file);\n  });\n}\n\nfunction isImageFileName(fileName: string) {\n  const lower = fileName.toLowerCase();\n  return lower.endsWith('.jpg') || lower.endsWith('.png');\n}\n\ninterface Props {\n  menuType: MenuType;\n}\n\n/** Displays and handles the \"Open file\" menu. */\nexport class UploadMenu extends React.Component<RouteComponentProps & Props> {\n  private async handleUpload(event: React.SyntheticEvent<HTMLInputElement>) {\n    const files = (event.target as HTMLInputElement).files;\n    if (!files || !files.length) {\n      return;\n    }\n    const filesArray = Array.from(files);\n    (event.target as HTMLInputElement).value = ''; // Reset the file input.\n    analyticsEvent('upload_files_selected', {\n      event_value: files.length,\n    });\n\n    const gedcomFile =\n      filesArray.length === 1\n        ? filesArray[0]\n        : filesArray.find((file) => file.name.toLowerCase().endsWith('.ged')) ||\n          filesArray[0];\n\n    // Convert uploaded images to object URLs.\n    const images = filesArray\n      .filter(\n        (file) => file.name !== gedcomFile.name && isImageFileName(file.name),\n      )\n      .map((file) => ({\n        name: file.name,\n        url: URL.createObjectURL(file),\n      }));\n    const imageMap = new Map(\n      images.map((entry) => [entry.name, entry.url] as [string, string]),\n    );\n\n    const data = await loadFileAsText(gedcomFile);\n    const imageFileNames = images\n      .map((image) => image.name)\n      .sort()\n      .join('|');\n    // Hash GEDCOM contents with uploaded image file names.\n    const hash = md5(md5(data) + imageFileNames);\n\n    // Use history.replace() when reuploading the same file and history.push() when loading\n    // a new file.\n    const search = queryString.parse(this.props.location.search);\n    const historyPush =\n      search.file === hash\n        ? this.props.history.replace\n        : this.props.history.push;\n\n    historyPush({\n      pathname: '/view',\n      search: queryString.stringify({file: hash}),\n      state: {data, images: imageMap},\n    });\n  }\n\n  render() {\n    const content = (\n      <>\n        <Icon name=\"folder open\" />\n        <FormattedMessage id=\"menu.open_file\" defaultMessage=\"Open file\" />\n      </>\n    );\n    return (\n      <>\n        {this.props.menuType === MenuType.Menu ? (\n          <label htmlFor=\"fileInput\">\n            <Menu.Item as=\"a\">{content}</Menu.Item>\n          </label>\n        ) : (\n          <Dropdown.Item as=\"label\" htmlFor=\"fileInput\">\n            {content}\n          </Dropdown.Item>\n        )}\n        <input\n          className=\"hidden\"\n          type=\"file\"\n          accept=\".ged,image/*\"\n          id=\"fileInput\"\n          multiple\n          onChange={(e) => this.handleUpload(e)}\n        />\n      </>\n    );\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {analyticsEvent} from '../util/analytics';\nimport {Button, Form, Header, Icon, Input, Modal} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {MenuItem, MenuType} from './menu_item';\nimport {RouteComponentProps} from 'react-router-dom';\n\ninterface Props {\n  menuType: MenuType;\n}\n\ninterface State {\n  dialogOpen: boolean;\n  url?: string;\n}\n\n/** Displays and handles the \"Open URL\" menu. */\nexport class UrlMenu extends React.Component<\n  RouteComponentProps & Props,\n  State\n> {\n  state: State = {dialogOpen: false};\n\n  inputRef: React.RefObject<Input> = React.createRef();\n\n  /** Opens the \"Load from URL\" dialog. */\n  private openDialog() {\n    this.setState(Object.assign({}, this.state, {dialogOpen: true}), () =>\n      this.inputRef.current!.focus(),\n    );\n  }\n\n  /** Cancels any of the open dialogs. */\n  private handleClose() {\n    this.setState(\n      Object.assign({}, this.state, {\n        dialogOpen: false,\n      }),\n    );\n  }\n\n  /** Load button clicked in the \"Load from URL\" dialog. */\n  private handleLoad() {\n    this.setState(\n      Object.assign({}, this.state, {\n        dialogOpen: false,\n      }),\n    );\n    if (this.state.url) {\n      analyticsEvent('url_selected');\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({url: this.state.url}),\n      });\n    }\n  }\n\n  /** Called when the URL input is typed into. */\n  private handleUrlChange(value: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        url: value,\n      }),\n    );\n  }\n\n  private loadFromUrlModal() {\n    return (\n      <Modal\n        open={this.state.dialogOpen}\n        onClose={() => this.handleClose()}\n        centered={false}\n      >\n        <Header>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"load_from_url.title\"\n            defaultMessage=\"Load from URL\"\n            children={(txt) => txt}\n          />\n        </Header>\n        <Modal.Content>\n          <Form onSubmit={() => this.handleLoad()}>\n            <Input\n              placeholder=\"https://\"\n              fluid\n              onChange={(e, data) => this.handleUrlChange(data.value)}\n              ref={this.inputRef}\n            />\n            <p>\n              <FormattedMessage\n                id=\"load_from_url.comment\"\n                defaultMessage={\n                  'Data from the URL will be loaded through {link} to avoid CORS issues.'\n                }\n                values={{\n                  link: (\n                    <a href=\"https://topola-cors.herokuapp.com/\">\n                      topola-cors.herokuapp.com\n                    </a>\n                  ),\n                }}\n              />\n            </p>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button secondary onClick={() => this.handleClose()}>\n            <FormattedMessage\n              id=\"load_from_url.cancel\"\n              defaultMessage=\"Cancel\"\n            />\n          </Button>\n          <Button primary onClick={() => this.handleLoad()}>\n            <FormattedMessage id=\"load_from_url.load\" defaultMessage=\"Load\" />\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <MenuItem\n          onClick={() => this.openDialog()}\n          menuType={this.props.menuType}\n        >\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"menu.load_from_url\"\n            defaultMessage=\"Load from URL\"\n          />\n        </MenuItem>\n        {this.loadFromUrlModal()}\n      </>\n    );\n  }\n}\n","import Cookies from 'js-cookie';\nimport {analyticsEvent} from '../util/analytics';\nimport {DataSource, DataSourceEnum, SourceSelection} from './data_source';\nimport {Date, DateOrRange, JsonFam, JsonIndi} from 'topola';\nimport {GedcomData, normalizeGedcom, TopolaData} from '../util/gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {InjectedIntl} from 'react-intl';\nimport {TopolaError} from '../util/error';\n\n/** Prefix for IDs of private individuals. */\nexport const PRIVATE_ID_PREFIX = '~Private';\n\n/**\n * Cookie where the logged in user name is stored. This cookie is shared\n * between apps hosted on apps.wikitree.com.\n */\nconst USER_NAME_COOKIE = 'wikidb_wtb_UserName';\n\n/** WikiTree API getAncestors request. */\ninterface GetAncestorsRequest {\n  action: 'getAncestors';\n  key: string;\n  fields: string;\n}\n\n/** WikiTree API getRelatives request. */\ninterface GetRelativesRequest {\n  action: 'getRelatives';\n  keys: string;\n  getChildren?: true;\n  getSpouses?: true;\n}\n\n/** WikiTree API clientLogin request. */\ninterface ClientLoginRequest {\n  action: 'clientLogin';\n  authcode: string;\n}\n\n/** WikiTree API clientLogin response. */\ninterface ClientLoginResponse {\n  result: string;\n  username: string;\n}\n\ntype WikiTreeRequest =\n  | GetAncestorsRequest\n  | GetRelativesRequest\n  | ClientLoginRequest;\n\n/** Person structure returned from WikiTree API. */\ninterface Person {\n  Id: number;\n  Name: string;\n  FirstName: string;\n  LastNameAtBirth: string;\n  RealName: string;\n  Spouses: {[key: number]: Person};\n  Children: {[key: number]: Person};\n  Mother: number;\n  Father: number;\n  Gender: string;\n  BirthDate: string;\n  DeathDate: string;\n  BirthLocation: string;\n  DeathLocation: string;\n  BirthDateDecade: string;\n  DeathDateDecade: string;\n  marriage_location: string;\n  marriage_date: string;\n  DataStatus?: {\n    BirthDate: string;\n    DeathDate: string;\n  };\n  PhotoData?: {\n    path: string;\n    url: string;\n  };\n}\n\n/** Gets item from session storage. Logs exception if one is thrown. */\nfunction getSessionStorageItem(key: string): string | null {\n  try {\n    return sessionStorage.getItem(key);\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n  return null;\n}\n\n/** Sets item in session storage. Logs exception if one is thrown. */\nfunction setSessionStorageItem(key: string, value: string) {\n  try {\n    sessionStorage.setItem(key, value);\n  } catch (e) {\n    console.warn('Failed to store data in session storage: ' + e);\n  }\n}\n\n/** Sends a request to the WikiTree API. Returns the parsed response JSON. */\nasync function wikiTreeGet(request: WikiTreeRequest, handleCors: boolean) {\n  const requestData = new FormData();\n  requestData.append('format', 'json');\n  for (const key in request) {\n    requestData.append(key, request[key]);\n  }\n  const apiUrl = handleCors\n    ? 'https://topola-cors.herokuapp.com/https://api.wikitree.com/api.php'\n    : 'https://api.wikitree.com/api.php';\n  const response = await window.fetch(apiUrl, {\n    method: 'POST',\n    body: requestData,\n    credentials: handleCors ? undefined : 'include',\n  });\n  const responseBody = await response.text();\n  return JSON.parse(responseBody);\n}\n\n/**\n * Retrieves ancestors from WikiTree for the given person ID.\n * Uses sessionStorage for caching responses.\n */\nasync function getAncestors(\n  key: string,\n  handleCors: boolean,\n): Promise<Person[]> {\n  const cacheKey = `wikitree:ancestors:${key}`;\n  const cachedData = getSessionStorageItem(cacheKey);\n  if (cachedData) {\n    return JSON.parse(cachedData);\n  }\n  const response = await wikiTreeGet(\n    {\n      action: 'getAncestors',\n      key: key,\n      fields: '*',\n    },\n    handleCors,\n  );\n  const result = response[0].ancestors as Person[];\n  setSessionStorageItem(cacheKey, JSON.stringify(result));\n  return result;\n}\n\n/**\n * Retrieves relatives from WikiTree for the given array of person IDs.\n * Uses sessionStorage for caching responses.\n */\nasync function getRelatives(\n  keys: string[],\n  handleCors: boolean,\n): Promise<Person[]> {\n  const result: Person[] = [];\n  const keysToFetch: string[] = [];\n  keys.forEach((key) => {\n    const cachedData = getSessionStorageItem(`wikitree:relatives:${key}`);\n    if (cachedData) {\n      result.push(JSON.parse(cachedData));\n    } else {\n      keysToFetch.push(key);\n    }\n  });\n  if (keysToFetch.length === 0) {\n    return result;\n  }\n  const response = await wikiTreeGet(\n    {\n      action: 'getRelatives',\n      keys: keysToFetch.join(','),\n      getChildren: true,\n      getSpouses: true,\n    },\n    handleCors,\n  );\n  if (response[0].items === null) {\n    const id = keysToFetch[0];\n    throw new TopolaError(\n      'WIKITREE_PROFILE_NOT_FOUND',\n      `WikiTree profile ${id} not found`,\n      {id},\n    );\n  }\n  const fetchedResults = response[0].items.map(\n    (x: {person: Person}) => x.person,\n  ) as Person[];\n  fetchedResults.forEach((person) => {\n    setSessionStorageItem(\n      `wikitree:relatives:${person.Name}`,\n      JSON.stringify(person),\n    );\n  });\n  return result.concat(fetchedResults);\n}\n\nexport async function clientLogin(\n  authcode: string,\n): Promise<ClientLoginResponse> {\n  const response = await wikiTreeGet(\n    {\n      action: 'clientLogin',\n      authcode,\n    },\n    false,\n  );\n  return response.clientLogin;\n}\n\n/**\n * Returnes the logged in user name or undefined if not logged in.\n *\n * This is not an authoritative answer. The result of this function relies on\n * the cookies set on the apps.wikitree.com domain under which this application\n * is hosted. The authoritative source of login information is in cookies set on\n * the api.wikitree.com domain.\n */\nexport function getLoggedInUserName(): string | undefined {\n  return Cookies.get(USER_NAME_COOKIE);\n}\n\n/**\n * Loads data from WikiTree to populate an hourglass chart starting from the\n * given person ID.\n */\nexport async function loadWikiTree(\n  key: string,\n  intl: InjectedIntl,\n  authcode?: string,\n): Promise<TopolaData> {\n  // Work around CORS if not in apps.wikitree.com domain.\n  const handleCors = window.location.hostname !== 'apps.wikitree.com';\n\n  if (!handleCors && !getLoggedInUserName() && authcode) {\n    const loginResult = await clientLogin(authcode);\n    if (loginResult.result === 'Success') {\n      sessionStorage.clear();\n      Cookies.set(USER_NAME_COOKIE, loginResult.username);\n    }\n  }\n\n  const everyone: Person[] = [];\n\n  // Fetch the ancestors of the input person and ancestors of his/her spouses.\n  const firstPerson = await getRelatives([key], handleCors);\n  if (!firstPerson[0].Name) {\n    const id = key;\n    throw new TopolaError(\n      'WIKITREE_PROFILE_NOT_ACCESSIBLE',\n      `WikiTree profile ${id} is not accessible. Try logging in.`,\n      {id},\n    );\n  }\n\n  const spouseKeys = Object.values(firstPerson[0].Spouses).map((s) => s.Name);\n  const ancestors = await Promise.all(\n    [key]\n      .concat(spouseKeys)\n      .map((personId) => getAncestors(personId, handleCors)),\n  );\n  const ancestorKeys = ancestors\n    .flat()\n    .map((person) => person.Name)\n    .filter((key) => !!key);\n  const ancestorDetails = await getRelatives(ancestorKeys, handleCors);\n\n  // Map from person id to father id if the father profile is private.\n  const privateFathers: Map<number, number> = new Map();\n  // Map from person id to mother id if the mother profile is private.\n  const privateMothers: Map<number, number> = new Map();\n\n  // Andujst private individual ids so that there are no collisions in the case\n  // that ancestors were collected for more than one person.\n  ancestors.forEach((ancestorList, index) => {\n    const offset = 1000 * index;\n    // Adjust ids by offset.\n    ancestorList.forEach((person) => {\n      if (person.Id < 0) {\n        person.Id -= offset;\n        person.Name = `${PRIVATE_ID_PREFIX}${person.Id}`;\n      }\n      if (person.Father < 0) {\n        person.Father -= offset;\n        privateFathers.set(person.Id, person.Father);\n      }\n      if (person.Mother < 0) {\n        person.Mother -= offset;\n        privateMothers.set(person.Id, person.Mother);\n      }\n    });\n  });\n\n  // Set the Father and Mother fields again because getRelatives doesn't return\n  // private parents.\n  ancestorDetails.forEach((person) => {\n    const privateFather = privateFathers.get(person.Id);\n    if (privateFather) {\n      person.Father = privateFather;\n    }\n    const privateMother = privateMothers.get(person.Id);\n    if (privateMother) {\n      person.Mother = privateMother;\n    }\n  });\n  everyone.push(...ancestorDetails);\n\n  // Collect private individuals.\n  const privateAncestors = ancestors.flat().filter((person) => person.Id < 0);\n  everyone.push(...privateAncestors);\n\n  // Limit the number of generations of descendants because there may be tens of\n  // generations for some profiles.\n  const descendantGenerationLimit = 5;\n\n  // Fetch descendants recursively.\n  let toFetch = [key];\n  let generation = 0;\n  while (toFetch.length > 0 && generation <= descendantGenerationLimit) {\n    const people = await getRelatives(toFetch, handleCors);\n    everyone.push(...people);\n    const allSpouses = people.flatMap((person) =>\n      Object.values(person.Spouses),\n    );\n    everyone.push(...allSpouses);\n    // Fetch all children.\n    toFetch = people.flatMap((person) =>\n      Object.values(person.Children).map((c) => c.Name),\n    );\n    generation++;\n  }\n\n  // Map from person id to the set of families where they are a spouse.\n  const families = new Map<number, Set<string>>();\n  // Map from family id to the set of children.\n  const children = new Map<string, Set<number>>();\n  // Map from famliy id to the spouses.\n  const spouses = new Map<\n    string,\n    {wife?: number; husband?: number; spouse?: Person}\n  >();\n  // Map from numerical id to human-readable id.\n  const idToName = new Map<number, string>();\n\n  everyone.forEach((person) => {\n    idToName.set(person.Id, person.Name);\n    if (person.Mother || person.Father) {\n      const famId = getFamilyId(person.Mother, person.Father);\n      getSet(families, person.Mother).add(famId);\n      getSet(families, person.Father).add(famId);\n      getSet(children, famId).add(person.Id);\n      spouses.set(famId, {\n        wife: person.Mother || undefined,\n        husband: person.Father || undefined,\n      });\n    }\n  });\n\n  const indis: JsonIndi[] = [];\n  const converted = new Set<number>();\n  everyone.forEach((person) => {\n    if (converted.has(person.Id)) {\n      return;\n    }\n    converted.add(person.Id);\n    const indi = convertPerson(person, intl);\n    if (person.Spouses) {\n      Object.values(person.Spouses).forEach((spouse) => {\n        const famId = getFamilyId(person.Id, spouse.Id);\n        getSet(families, person.Id).add(famId);\n        getSet(families, spouse.Id).add(famId);\n        const familySpouses =\n          person.Gender === 'Male'\n            ? {wife: spouse.Id, husband: person.Id, spouse}\n            : {wife: person.Id, husband: spouse.Id, spouse};\n        spouses.set(famId, familySpouses);\n      });\n    }\n    indi.fams = Array.from(getSet(families, person.Id));\n    indis.push(indi);\n  });\n\n  const fams = Array.from(spouses.entries()).map(([key, value]) => {\n    const fam: JsonFam = {\n      id: key,\n    };\n    const wife = value.wife && idToName.get(value.wife);\n    if (wife) {\n      fam.wife = wife;\n    }\n    const husband = value.husband && idToName.get(value.husband);\n    if (husband) {\n      fam.husb = husband;\n    }\n    fam.children = Array.from(getSet(children, key)).map(\n      (child) => idToName.get(child)!,\n    );\n    if (\n      value.spouse &&\n      ((value.spouse.marriage_date &&\n        value.spouse.marriage_date !== '0000-00-00') ||\n        value.spouse.marriage_location)\n    ) {\n      const parsedDate = parseDate(value.spouse.marriage_date);\n      fam.marriage = Object.assign({}, parsedDate, {\n        place: value.spouse.marriage_location,\n      });\n    }\n    return fam;\n  });\n\n  const chartData = normalizeGedcom({indis, fams});\n  const gedcom = buildGedcom(indis);\n  return {chartData, gedcom};\n}\n\n/** Creates a family identifier given 2 spouse identifiers. */\nfunction getFamilyId(spouse1: number, spouse2: number) {\n  if (spouse2 > spouse1) {\n    return `${spouse1}_${spouse2}`;\n  }\n  return `${spouse2}_${spouse1}`;\n}\n\nfunction convertPerson(person: Person, intl: InjectedIntl): JsonIndi {\n  const indi: JsonIndi = {\n    id: person.Name,\n  };\n  if (person.Name.startsWith(PRIVATE_ID_PREFIX)) {\n    indi.hideId = true;\n    indi.firstName = intl.formatMessage({\n      id: 'wikitree.private',\n      defaultMessage: 'Private',\n    });\n  }\n  if (person.FirstName && person.FirstName !== 'Unknown') {\n    indi.firstName = person.FirstName;\n  } else if (person.RealName && person.RealName !== 'Unknown') {\n    indi.firstName = person.RealName;\n  }\n  if (person.LastNameAtBirth !== 'Unknown') {\n    indi.lastName = person.LastNameAtBirth;\n  }\n  if (person.Mother || person.Father) {\n    indi.famc = getFamilyId(person.Mother, person.Father);\n  }\n  if (person.Gender === 'Male') {\n    indi.sex = 'M';\n  } else if (person.Gender === 'Female') {\n    indi.sex = 'F';\n  }\n  if (\n    (person.BirthDate && person.BirthDate !== '0000-00-00') ||\n    person.BirthLocation ||\n    person.BirthDateDecade !== 'unknown'\n  ) {\n    const parsedDate = parseDate(\n      person.BirthDate,\n      person.DataStatus && person.DataStatus.BirthDate,\n    );\n    const date = parsedDate || parseDecade(person.BirthDateDecade);\n    indi.birth = Object.assign({}, date, {place: person.BirthLocation});\n  }\n  if (\n    (person.DeathDate && person.DeathDate !== '0000-00-00') ||\n    person.DeathLocation ||\n    person.DeathDateDecade !== 'unknown'\n  ) {\n    const parsedDate = parseDate(\n      person.DeathDate,\n      person.DataStatus && person.DataStatus.DeathDate,\n    );\n    const date = parsedDate || parseDecade(person.DeathDateDecade);\n    indi.death = Object.assign({}, date, {place: person.DeathLocation});\n  }\n  if (person.PhotoData) {\n    indi.images = [{url: `https://www.wikitree.com${person.PhotoData.url}`}];\n  }\n  return indi;\n}\n\n/**\n * Parses a date in the format returned by WikiTree and converts in to\n * the format defined by Topola.\n */\nfunction parseDate(date: string, dataStatus?: string): DateOrRange | undefined {\n  if (!date) {\n    return undefined;\n  }\n  const matchedDate = date.match(/(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)/);\n  if (!matchedDate) {\n    return {date: {text: date}};\n  }\n  const parsedDate: Date = {};\n  if (matchedDate[1] !== '0000') {\n    parsedDate.year = ~~matchedDate[1];\n  }\n  if (matchedDate[2] !== '00') {\n    parsedDate.month = ~~matchedDate[2];\n  }\n  if (matchedDate[3] !== '00') {\n    parsedDate.day = ~~matchedDate[3];\n  }\n  if (dataStatus === 'after') {\n    return {dateRange: {from: parsedDate}};\n  }\n  if (dataStatus === 'before') {\n    return {dateRange: {to: parsedDate}};\n  }\n  if (dataStatus === 'guess') {\n    parsedDate.qualifier = 'abt';\n  }\n  return {date: parsedDate};\n}\n\nfunction parseDecade(decade: string): DateOrRange | undefined {\n  return decade !== 'unknown' ? {date: {text: decade}} : undefined;\n}\n\n/**\n * Creates a GEDCOM structure for the purpose of displaying the details\n * panel.\n */\nfunction buildGedcom(indis: JsonIndi[]): GedcomData {\n  const gedcomIndis: {[key: string]: GedcomEntry} = {};\n  indis.forEach((indi) => {\n    // WikiTree URLs replace spaces with underscores.\n    const escapedId = indi.id.replace(/ /g, '_');\n    gedcomIndis[indi.id] = {\n      level: 0,\n      pointer: `@${indi.id}@`,\n      tag: 'INDI',\n      data: '',\n      tree: [\n        {\n          level: 1,\n          pointer: '',\n          tag: 'NAME',\n          data: `${indi.firstName || ''} /${indi.lastName || ''}/`,\n          tree: [],\n        },\n      ],\n    };\n    if (!indi.id.startsWith('~')) {\n      gedcomIndis[indi.id].tree.push({\n        level: 1,\n        pointer: '',\n        tag: 'WWW',\n        data: `https://www.wikitree.com/wiki/${escapedId}`,\n        tree: [],\n      });\n    }\n  });\n\n  return {\n    head: {level: 0, pointer: '', tag: 'HEAD', data: '', tree: []},\n    indis: gedcomIndis,\n    fams: {},\n    other: {},\n  };\n}\n\n/**\n * Returns a set which is a value from a SetMultimap. If the key doesn't exist,\n * an empty set is added to the map.\n */\nfunction getSet<K, V>(map: Map<K, Set<V>>, key: K): Set<V> {\n  const set = map.get(key);\n  if (set) {\n    return set;\n  }\n  const newSet = new Set<V>();\n  map.set(key, newSet);\n  return newSet;\n}\n\nexport interface WikiTreeSourceSpec {\n  source: DataSourceEnum.WIKITREE;\n  authcode?: string;\n}\n\n/** Loading data from the WikiTree API. */\nexport class WikiTreeDataSource implements DataSource<WikiTreeSourceSpec> {\n  constructor(private intl: InjectedIntl) {}\n\n  isNewData(\n    newSource: SourceSelection<WikiTreeSourceSpec>,\n    oldSource: SourceSelection<WikiTreeSourceSpec>,\n    data?: TopolaData,\n  ): boolean {\n    if (!newSource.selection) {\n      return false;\n    }\n    if (oldSource.selection?.id === newSource.selection.id) {\n      // Selection unchanged -> don't reload.\n      return false;\n    }\n    if (\n      data &&\n      data.chartData.indis.some((indi) => indi.id === newSource.selection?.id)\n    ) {\n      // New selection exists in current view -> animate instead of reloading.\n      return false;\n    }\n    return true;\n  }\n\n  async loadData(\n    source: SourceSelection<WikiTreeSourceSpec>,\n  ): Promise<TopolaData> {\n    if (!source.selection) {\n      throw new TopolaError(\n        'WIKITREE_ID_NOT_PROVIDED',\n        'WikiTree id needs to be provided',\n      );\n    }\n    try {\n      const data = await loadWikiTree(\n        source.selection.id,\n        this.intl,\n        source.spec.authcode,\n      );\n      analyticsEvent('wikitree_loaded');\n      return data;\n    } catch (error) {\n      analyticsEvent('wikitree_error');\n      throw error;\n    }\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport wikitreeLogo from './wikitree.png';\nimport {analyticsEvent} from '../util/analytics';\nimport {FormattedMessage, intlShape} from 'react-intl';\nimport {getLoggedInUserName} from '../datasource/wikitree';\nimport {MenuItem, MenuType} from './menu_item';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {Header, Button, Modal, Input, Form} from 'semantic-ui-react';\n\nenum WikiTreeLoginState {\n  UNKNOWN,\n  NOT_LOGGED_IN,\n  LOGGED_IN,\n}\n\ninterface Props {\n  menuType: MenuType;\n}\n\ninterface State {\n  dialogOpen: boolean;\n  wikiTreeId?: string;\n}\n\n/** Displays and handles the \"Select WikiTree ID\" menu. */\nexport class WikiTreeMenu extends React.Component<\n  RouteComponentProps & Props,\n  State\n> {\n  state: State = {\n    dialogOpen: false,\n  };\n\n  inputRef: React.RefObject<Input> = React.createRef();\n\n  private openDialog() {\n    this.setState(Object.assign({}, this.state, {dialogOpen: true}), () =>\n      this.inputRef.current!.focus(),\n    );\n  }\n\n  /** Cancels any of the open dialogs. */\n  private handleClose() {\n    this.setState(\n      Object.assign({}, this.state, {\n        dialogOpen: false,\n      }),\n    );\n  }\n\n  /** Select button clicked in the \"Select WikiTree ID\" dialog. */\n  private handleSelectId() {\n    this.setState(\n      Object.assign({}, this.state, {\n        dialogOpen: false,\n      }),\n    );\n    if (this.state.wikiTreeId) {\n      analyticsEvent('wikitree_id_selected');\n      const search = queryString.parse(this.props.location.search);\n      const standalone =\n        search.standalone !== undefined ? search.standalone : true;\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({\n          indi: this.state.wikiTreeId,\n          source: 'wikitree',\n          standalone,\n        }),\n      });\n    }\n  }\n\n  /** Called when the WikiTree ID input is typed into. */\n  private handleIdChange(value: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        wikiTreeId: value,\n      }),\n    );\n  }\n\n  private enterId(event: React.MouseEvent, id: string) {\n    event.preventDefault(); // Do not follow link in href.\n    ((this.inputRef.current as unknown) as {\n      inputRef: HTMLInputElement;\n    }).inputRef.value = id;\n    this.handleIdChange(id);\n    this.inputRef.current!.focus();\n  }\n\n  private wikiTreeIdModal() {\n    return (\n      <Modal\n        open={this.state.dialogOpen}\n        onClose={() => this.handleClose()}\n        centered={false}\n      >\n        <Header>\n          <img\n            src={wikitreeLogo}\n            alt=\"WikiTree logo\"\n            style={{width: '32px', height: '32px'}}\n          />\n          <FormattedMessage\n            id=\"select_wikitree_id.title\"\n            defaultMessage=\"Select WikiTree ID\"\n            children={(txt) => txt}\n          />\n        </Header>\n        <Modal.Content>\n          <Form onSubmit={() => this.handleSelectId()}>\n            <p>\n              <FormattedMessage\n                id=\"select_wikitree_id.comment\"\n                defaultMessage={\n                  'Enter a {wikiTreeLink} profile ID. Examples: {example1}, {example2}.'\n                }\n                values={{\n                  wikiTreeLink: (\n                    <a\n                      href=\"https://wikitree.com/\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      WikiTree\n                    </a>\n                  ),\n                  example1: (\n                    <span\n                      onClick={(e) => this.enterId(e, 'Wojtyla-13')}\n                      className=\"link-span\"\n                    >\n                      Wojtyla-13\n                    </span>\n                  ),\n                  example2: (\n                    <span\n                      onClick={(e) => this.enterId(e, 'Skłodowska-2')}\n                      className=\"link-span\"\n                    >\n                      Skłodowska-2\n                    </span>\n                  ),\n                }}\n              />\n            </p>\n            <Input\n              fluid\n              onChange={(e, data) => this.handleIdChange(data.value)}\n              ref={this.inputRef}\n            />\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button secondary onClick={() => this.handleClose()}>\n            <FormattedMessage\n              id=\"select_wikitree_id.cancel\"\n              defaultMessage=\"Cancel\"\n            />\n          </Button>\n          <Button primary onClick={() => this.handleSelectId()}>\n            <FormattedMessage\n              id=\"select_wikitree_id.load\"\n              defaultMessage=\"Load\"\n            />\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <MenuItem\n          menuType={this.props.menuType}\n          onClick={() => this.openDialog()}\n        >\n          <img src={wikitreeLogo} alt=\"WikiTree logo\" className=\"menu-icon\" />\n          <FormattedMessage\n            id=\"menu.select_wikitree_id\"\n            defaultMessage=\"Select WikiTree ID\"\n          />\n        </MenuItem>\n        {this.wikiTreeIdModal()}\n      </>\n    );\n  }\n}\n\ninterface LoginState {\n  wikiTreeLoginState: WikiTreeLoginState;\n  wikiTreeLoginUsername?: string;\n}\n\n/** Displays and handles the \"Log in to WikiTree\" menu. */\nexport class WikiTreeLoginMenu extends React.Component<\n  RouteComponentProps & Props,\n  LoginState\n> {\n  state: LoginState = {\n    wikiTreeLoginState: WikiTreeLoginState.UNKNOWN,\n  };\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  wikiTreeLoginFormRef: React.RefObject<HTMLFormElement> = React.createRef();\n  wikiTreeReturnUrlRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  /**\n   * Redirect to the WikiTree Apps login page with a return URL pointing to\n   * Topola Viewer hosted on apps.wikitree.com.\n   */\n  private wikiTreeLogin() {\n    const wikiTreeTopolaUrl =\n      'https://apps.wikitree.com/apps/wiech13/topola-viewer';\n    // Append '&' because the login page appends '?authcode=...' to this URL.\n    // TODO: remove ?authcode if it is in the current URL.\n    const returnUrl = `${wikiTreeTopolaUrl}${window.location.hash}&`;\n    this.wikiTreeReturnUrlRef.current!.value = returnUrl;\n    this.wikiTreeLoginFormRef.current!.submit();\n  }\n\n  private checkWikiTreeLoginState() {\n    const wikiTreeLoginUsername = getLoggedInUserName();\n    const wikiTreeLoginState = wikiTreeLoginUsername\n      ? WikiTreeLoginState.LOGGED_IN\n      : WikiTreeLoginState.NOT_LOGGED_IN;\n    if (this.state.wikiTreeLoginState !== wikiTreeLoginState) {\n      this.setState(\n        Object.assign({}, this.state, {\n          wikiTreeLoginState,\n          wikiTreeLoginUsername,\n        }),\n      );\n    }\n  }\n\n  componentDidMount() {\n    this.checkWikiTreeLoginState();\n  }\n\n  componentDidUpdate() {\n    this.checkWikiTreeLoginState();\n  }\n\n  render() {\n    switch (this.state.wikiTreeLoginState) {\n      case WikiTreeLoginState.NOT_LOGGED_IN:\n        return (\n          <>\n            <MenuItem\n              menuType={this.props.menuType}\n              onClick={() => this.wikiTreeLogin()}\n            >\n              <img\n                src={wikitreeLogo}\n                alt=\"WikiTree logo\"\n                className=\"menu-icon\"\n              />\n              <FormattedMessage\n                id=\"menu.wikitree_login\"\n                defaultMessage=\"Log in to WikiTree\"\n              />\n            </MenuItem>\n            <form\n              action=\"https://api.wikitree.com/api.php\"\n              method=\"POST\"\n              style={{display: 'hidden'}}\n              ref={this.wikiTreeLoginFormRef}\n            >\n              <input type=\"hidden\" name=\"action\" value=\"clientLogin\" />\n              <input\n                type=\"hidden\"\n                name=\"returnURL\"\n                ref={this.wikiTreeReturnUrlRef}\n              />\n            </form>\n          </>\n        );\n\n      case WikiTreeLoginState.LOGGED_IN:\n        const tooltip = this.state.wikiTreeLoginUsername\n          ? this.context.intl.formatMessage(\n              {\n                id: 'menu.wikitree_popup_username',\n                defaultMessage: 'Logged in to WikiTree as {username}',\n              },\n              {username: this.state.wikiTreeLoginUsername},\n            )\n          : this.context.intl.formatMessage({\n              id: 'menu.wikitree_popup',\n              defaultMessage: 'Logged in to WikiTree',\n            });\n        return (\n          <MenuItem menuType={this.props.menuType} title={tooltip}>\n            <img src={wikitreeLogo} alt=\"WikiTree logo\" className=\"menu-icon\" />\n            <FormattedMessage\n              id=\"menu.wikitree_logged_in\"\n              defaultMessage=\"Logged in\"\n            />\n          </MenuItem>\n        );\n    }\n    return null;\n  }\n}\n","import lunr from 'lunr';\nimport naturalSort from 'javascript-natural-sort';\nimport {idToFamMap, idToIndiMap} from '../util/gedcom_util';\nimport {JsonFam, JsonGedcomData, JsonIndi} from 'topola';\n\n// TODO: Add type declarations and use import instead of require.\nrequire('lunr-languages/lunr.stemmer.support')(lunr);\nrequire('lunr-languages/lunr.multi')(lunr);\nrequire('lunr-languages/lunr.de')(lunr);\nrequire('lunr-languages/lunr.fr')(lunr);\nrequire('lunr-languages/lunr.it')(lunr);\nrequire('lunr-languages/lunr.ru')(lunr);\n\nconst MAX_RESULTS = 8;\n\nexport interface SearchResult {\n  id: string;\n  indi: JsonIndi;\n}\n\nexport interface SearchIndex {\n  search(input: string): SearchResult[];\n}\n\n/** Removes accents from letters, e.g. ó->o, ę->e. */\nfunction normalize(input: string) {\n  return input\n    .toLocaleLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/\\u0142/g, 'l'); // Special case: ł is not affected by NFD.\n}\n\n/** Comparator to sort by score first, then by id. */\nfunction compare(a: lunr.Index.Result, b: lunr.Index.Result) {\n  if (a.score !== b.score) {\n    return b.score - a.score;\n  }\n  return naturalSort(a.ref, b.ref);\n}\n\n/** Returns all last names of all husbands as a space-separated string. */\nfunction getHusbandLastName(\n  indi: JsonIndi,\n  indiMap: Map<String, JsonIndi>,\n  famMap: Map<string, JsonFam>,\n): string {\n  return (indi.fams || [])\n    .map((famId) => famMap.get(famId))\n    .map((fam) => fam && fam.husb)\n    .map((husbId) => husbId && indiMap.get(husbId))\n    .map((husband) => husband && husband.lastName)\n    .join(' ');\n}\n\nclass LunrSearchIndex implements SearchIndex {\n  private index: lunr.Index | undefined;\n  private indiMap: Map<string, JsonIndi>;\n  private famMap: Map<string, JsonFam>;\n\n  constructor(data: JsonGedcomData) {\n    this.indiMap = idToIndiMap(data);\n    this.famMap = idToFamMap(data);\n  }\n\n  initialize() {\n    const self = this;\n    this.index = lunr(function() {\n      this.use((lunr as any).multiLanguage('de', 'en', 'fr', 'it', 'ru'));\n      this.ref('id');\n      this.field('id');\n      this.field('name', {boost: 10});\n      this.field('normalizedName', {boost: 8});\n      this.field('spouseLastName', {boost: 2});\n      this.field('normalizedSpouseLastName', {boost: 2});\n\n      self.indiMap.forEach((indi) => {\n        const name = [indi.firstName, indi.lastName].join(' ');\n        const spouseLastName = getHusbandLastName(\n          indi,\n          self.indiMap,\n          self.famMap,\n        );\n        this.add({\n          id: indi.id,\n          name,\n          normalizedName: normalize(name),\n          spouseLastName,\n          normalizedSpouseLastName: normalize(spouseLastName),\n        });\n      });\n    });\n  }\n\n  public search(input: string): SearchResult[] {\n    const query = input\n      .split(' ')\n      .filter((s) => !!s)\n      .map((s) => `+${s}*`)\n      .join(' ');\n    const results = this.index!.search(query);\n    return results\n      .sort(compare)\n      .slice(0, MAX_RESULTS)\n      .map((result) => ({id: result.ref, indi: this.indiMap.get(result.ref)!}));\n  }\n}\n\n/** Builds a search index from data. */\nexport function buildSearchIndex(data: JsonGedcomData): SearchIndex {\n  const index = new LunrSearchIndex(data);\n  index.initialize();\n  return index;\n}\n","import * as React from 'react';\nimport debounce from 'debounce';\nimport {analyticsEvent} from '../util/analytics';\nimport {buildSearchIndex, SearchIndex, SearchResult} from './search_index';\nimport {formatDateOrRange} from '../util/date_util';\nimport {IndiInfo, JsonGedcomData} from 'topola';\nimport {intlShape} from 'react-intl';\nimport {JsonIndi} from 'topola';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {Search, SearchProps, SearchResultProps} from 'semantic-ui-react';\n\nfunction getNameLine(result: SearchResult) {\n  const name = [result.indi.firstName, result.indi.lastName].join(' ').trim();\n  if (result.id.length > 8) {\n    return name;\n  }\n  return (\n    <>\n      {name} <i>({result.id})</i>\n    </>\n  );\n}\n\ninterface Props {\n  /** Data used for the search index. */\n  data: JsonGedcomData;\n  onSelection: (indiInfo: IndiInfo) => void;\n}\n\ninterface State {\n  searchResults: SearchResultProps[];\n}\n\n/** Displays and handles the search box in the top bar. */\nexport class SearchBar extends React.Component<\n  RouteComponentProps & Props,\n  State\n> {\n  state: State = {\n    searchResults: [],\n  };\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  searchRef?: {setValue(value: string): void};\n  searchIndex?: SearchIndex;\n\n  private getDescriptionLine(indi: JsonIndi) {\n    const birthDate = formatDateOrRange(indi.birth, this.context.intl);\n    const deathDate = formatDateOrRange(indi.death, this.context.intl);\n    if (!deathDate) {\n      return birthDate;\n    }\n    return `${birthDate} – ${deathDate}`;\n  }\n\n  /** Produces an object that is displayed in the Semantic UI Search results. */\n  private displaySearchResult(result: SearchResult) {\n    return {\n      id: result.id,\n      key: result.id,\n      title: getNameLine(result),\n      description: this.getDescriptionLine(result.indi),\n    };\n  }\n\n  /** On search input change. */\n  private handleSearch(input: string | undefined) {\n    if (!input) {\n      return;\n    }\n    const results = this.searchIndex!.search(input).map((result) =>\n      this.displaySearchResult(result),\n    );\n    this.setState(Object.assign({}, this.state, {searchResults: results}));\n  }\n\n  /** On search result selected. */\n  private handleResultSelect(id: string) {\n    analyticsEvent('search_result_selected');\n    this.props.onSelection({id, generation: 0});\n    this.searchRef!.setValue('');\n  }\n\n  private initializeSearchIndex() {\n    this.searchIndex = buildSearchIndex(this.props.data);\n  }\n\n  componentDidMount() {\n    this.initializeSearchIndex();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.data !== this.props.data) {\n      this.initializeSearchIndex();\n    }\n  }\n\n  render() {\n    return (\n      <Search\n        onSearchChange={debounce(\n          (_: React.MouseEvent<HTMLElement>, data: SearchProps) =>\n            this.handleSearch(data.value),\n          200,\n        )}\n        onResultSelect={(_, data) => this.handleResultSelect(data.result.id)}\n        results={this.state.searchResults}\n        noResultsMessage={this.context.intl.formatMessage({\n          id: 'menu.search.no_results',\n          defaultMessage: 'No results found',\n        })}\n        placeholder={this.context.intl.formatMessage({\n          id: 'menu.search.placeholder',\n          defaultMessage: 'Search for people',\n        })}\n        selectFirstResult={true}\n        ref={(ref) =>\n          (this.searchRef = (ref as unknown) as {\n            setValue(value: string): void;\n          })\n        }\n        id=\"search\"\n      />\n    );\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {IndiInfo, JsonGedcomData} from 'topola';\nimport {Link} from 'react-router-dom';\nimport {MenuType} from './menu_item';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {UploadMenu} from './upload_menu';\nimport {UrlMenu} from './url_menu';\nimport {WikiTreeLoginMenu, WikiTreeMenu} from './wikitree_menu';\nimport {Icon, Menu, Dropdown, Responsive} from 'semantic-ui-react';\nimport {SearchBar} from './search';\n\nenum ScreenSize {\n  LARGE,\n  SMALL,\n}\n\ninterface EventHandlers {\n  onSelection: (indiInfo: IndiInfo) => void;\n  onPrint: () => void;\n  onDownloadPdf: () => void;\n  onDownloadPng: () => void;\n  onDownloadSvg: () => void;\n}\n\ninterface Props {\n  /** True if the application is currently showing a chart. */\n  showingChart: boolean;\n  /** Data used for the search index. */\n  data?: JsonGedcomData;\n  standalone: boolean;\n  /** Whether to show the \"All relatives\" chart type in the menu. */\n  allowAllRelativesChart: boolean;\n  eventHandlers: EventHandlers;\n  /** Whether to show additional WikiTree menus. */\n  showWikiTreeMenus: boolean;\n}\n\nexport class TopBar extends React.Component<RouteComponentProps & Props> {\n  private changeView(view: string) {\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    if (search.view !== view) {\n      search.view = view;\n      location.search = queryString.stringify(search);\n      this.props.history.push(location);\n    }\n  }\n\n  private chartMenus(screenSize: ScreenSize) {\n    if (!this.props.showingChart) {\n      return null;\n    }\n    const chartTypeItems = (\n      <>\n        <Dropdown.Item onClick={() => this.changeView('hourglass')}>\n          <Icon name=\"hourglass\" />\n          <FormattedMessage\n            id=\"menu.hourglass\"\n            defaultMessage=\"Hourglass chart\"\n          />\n        </Dropdown.Item>\n        {this.props.allowAllRelativesChart ? (\n          <Dropdown.Item onClick={() => this.changeView('relatives')}>\n            <Icon name=\"users\" />\n            <FormattedMessage\n              id=\"menu.relatives\"\n              defaultMessage=\"All relatives\"\n            />\n          </Dropdown.Item>\n        ) : null}\n        <Dropdown.Item onClick={() => this.changeView('fancy')}>\n          <Icon name=\"users\" />\n          <FormattedMessage\n            id=\"menu.fancy\"\n            defaultMessage=\"Fancy tree (experimental)\"\n          />\n        </Dropdown.Item>\n      </>\n    );\n    switch (screenSize) {\n      case ScreenSize.LARGE:\n        return (\n          <>\n            <Menu.Item onClick={() => this.props.eventHandlers.onPrint()}>\n              <Icon name=\"print\" />\n              <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\n            </Menu.Item>\n\n            <Dropdown\n              trigger={\n                <div>\n                  <Icon name=\"download\" />\n                  <FormattedMessage\n                    id=\"menu.download\"\n                    defaultMessage=\"Download\"\n                  />\n                </div>\n              }\n              className=\"item\"\n            >\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  onClick={() => this.props.eventHandlers.onDownloadPdf()}\n                >\n                  <FormattedMessage\n                    id=\"menu.pdf_file\"\n                    defaultMessage=\"PDF file\"\n                  />\n                </Dropdown.Item>\n                <Dropdown.Item\n                  onClick={() => this.props.eventHandlers.onDownloadPng()}\n                >\n                  <FormattedMessage\n                    id=\"menu.png_file\"\n                    defaultMessage=\"PNG file\"\n                  />\n                </Dropdown.Item>\n                <Dropdown.Item\n                  onClick={() => this.props.eventHandlers.onDownloadSvg()}\n                >\n                  <FormattedMessage\n                    id=\"menu.svg_file\"\n                    defaultMessage=\"SVG file\"\n                  />\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n\n            <Dropdown\n              trigger={\n                <div>\n                  <Icon name=\"eye\" />\n                  <FormattedMessage id=\"menu.view\" defaultMessage=\"View\" />\n                </div>\n              }\n              className=\"item\"\n            >\n              <Dropdown.Menu>{chartTypeItems}</Dropdown.Menu>\n            </Dropdown>\n            <SearchBar\n              data={this.props.data!}\n              onSelection={this.props.eventHandlers.onSelection}\n              {...this.props}\n            />\n          </>\n        );\n\n      case ScreenSize.SMALL:\n        return (\n          <>\n            <Dropdown.Item onClick={() => this.props.eventHandlers.onPrint()}>\n              <Icon name=\"print\" />\n              <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\n            </Dropdown.Item>\n\n            <Dropdown.Divider />\n\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadPdf()}\n            >\n              <Icon name=\"download\" />\n              <FormattedMessage\n                id=\"menu.download_pdf\"\n                defaultMessage=\"Downlod PDF\"\n              />\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadPng()}\n            >\n              <Icon name=\"download\" />\n              <FormattedMessage\n                id=\"menu.download_png\"\n                defaultMessage=\"Download PNG\"\n              />\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadSvg()}\n            >\n              <Icon name=\"download\" />\n              <FormattedMessage\n                id=\"menu.download_svg\"\n                defaultMessage=\"Download SVG\"\n              />\n            </Dropdown.Item>\n\n            <Dropdown.Divider />\n            {chartTypeItems}\n            <Dropdown.Divider />\n          </>\n        );\n    }\n  }\n\n  private title() {\n    return (\n      <Menu.Item>\n        <b>Topola Genealogy</b>\n      </Menu.Item>\n    );\n  }\n\n  private fileMenus(screenSize: ScreenSize) {\n    // In standalone WikiTree mode, show only the \"Select WikiTree ID\" menu.\n    if (!this.props.standalone && this.props.showWikiTreeMenus) {\n      switch (screenSize) {\n        case ScreenSize.LARGE:\n          return <WikiTreeMenu menuType={MenuType.Menu} {...this.props} />;\n        case ScreenSize.SMALL:\n          return (\n            <>\n              <WikiTreeMenu menuType={MenuType.Dropdown} {...this.props} />\n              <Dropdown.Divider />\n            </>\n          );\n      }\n    }\n\n    // Don't show \"open\" menus in non-standalone mode.\n    if (!this.props.standalone) {\n      return null;\n    }\n\n    switch (screenSize) {\n      case ScreenSize.LARGE:\n        // Show dropdown if chart is shown, otherwise show individual menu\n        // items.\n        const menus = this.props.showingChart ? (\n          <Dropdown\n            trigger={\n              <div>\n                <Icon name=\"folder open\" />\n                <FormattedMessage id=\"menu.open\" defaultMessage=\"Open\" />\n              </div>\n            }\n            className=\"item\"\n          >\n            <Dropdown.Menu>\n              <UploadMenu menuType={MenuType.Dropdown} {...this.props} />\n              <UrlMenu menuType={MenuType.Dropdown} {...this.props} />\n              <WikiTreeMenu menuType={MenuType.Dropdown} {...this.props} />\n            </Dropdown.Menu>\n          </Dropdown>\n        ) : (\n          <>\n            <UploadMenu menuType={MenuType.Menu} {...this.props} />\n            <UrlMenu menuType={MenuType.Menu} {...this.props} />\n            <WikiTreeMenu menuType={MenuType.Menu} {...this.props} />\n          </>\n        );\n        return menus;\n\n      case ScreenSize.SMALL:\n        return (\n          <>\n            <UploadMenu menuType={MenuType.Dropdown} {...this.props} />\n            <UrlMenu menuType={MenuType.Dropdown} {...this.props} />\n            <WikiTreeMenu menuType={MenuType.Dropdown} {...this.props} />\n            <Dropdown.Divider />\n          </>\n        );\n    }\n  }\n\n  private wikiTreeLoginMenu(screenSize: ScreenSize) {\n    if (!this.props.showWikiTreeMenus) {\n      return null;\n    }\n    return (\n      <>\n        <WikiTreeLoginMenu\n          menuType={\n            screenSize === ScreenSize.SMALL ? MenuType.Dropdown : MenuType.Menu\n          }\n          {...this.props}\n        />\n        {screenSize === ScreenSize.SMALL ? <Dropdown.Divider /> : null}\n      </>\n    );\n  }\n\n  private mobileMenus() {\n    return (\n      <>\n        <Dropdown\n          trigger={\n            <div>\n              <Icon name=\"sidebar\" />\n            </div>\n          }\n          className=\"item\"\n          icon={null}\n        >\n          <Dropdown.Menu>\n            {this.fileMenus(ScreenSize.SMALL)}\n            {this.chartMenus(ScreenSize.SMALL)}\n            {this.wikiTreeLoginMenu(ScreenSize.SMALL)}\n\n            <Dropdown.Item\n              href=\"https://github.com/PeWu/topola-viewer\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <FormattedMessage\n                id=\"menu.github\"\n                defaultMessage=\"GitHub project\"\n              />\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n        {this.props.standalone ? (\n          <Link to=\"/\">{this.title()}</Link>\n        ) : (\n          this.title()\n        )}\n      </>\n    );\n  }\n\n  private desktopMenus() {\n    return (\n      <>\n        {this.props.standalone ? <Link to=\"/\">{this.title()}</Link> : null}\n        {this.fileMenus(ScreenSize.LARGE)}\n        {this.chartMenus(ScreenSize.LARGE)}\n        <Menu.Menu position=\"right\">\n          {this.wikiTreeLoginMenu(ScreenSize.LARGE)}\n          <Menu.Item\n            href=\"https://github.com/PeWu/topola-viewer\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <FormattedMessage\n              id=\"menu.github\"\n              defaultMessage=\"GitHub project\"\n            />\n          </Menu.Item>\n        </Menu.Menu>\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Responsive\n          as={Menu}\n          attached=\"top\"\n          inverted\n          color=\"blue\"\n          size=\"large\"\n          minWidth={768}\n        >\n          {this.desktopMenus()}\n        </Responsive>\n        <Responsive\n          as={Menu}\n          attached=\"top\"\n          inverted\n          color=\"blue\"\n          size=\"large\"\n          maxWidth={767}\n        >\n          {this.mobileMenus()}\n        </Responsive>\n      </>\n    );\n  }\n}\n","import {IndiInfo} from 'topola';\nimport {TopolaData} from '../util/gedcom_util';\n\n/** Supported data sources. */\nexport enum DataSourceEnum {\n  UPLOADED,\n  GEDCOM_URL,\n  WIKITREE,\n  EMBEDDED,\n}\n\n/** Source specification together with individual selection. */\nexport interface SourceSelection<SourceSpecT> {\n  spec: SourceSpecT;\n  selection?: IndiInfo;\n}\n\n/** Interface encapsulating functions specific for a data source. */\nexport interface DataSource<SourceSpecT> {\n  /**\n   * Returns true if the application is now loading a completely new data set\n   * and the existing one should be wiped.\n   */\n  isNewData(\n    newSource: SourceSelection<SourceSpecT>,\n    oldSource: SourceSelection<SourceSpecT>,\n    data?: TopolaData,\n  ): boolean;\n  /** Loads data from the data source. */\n  loadData(spec: SourceSelection<SourceSpecT>): Promise<TopolaData>;\n}\n","import * as H from 'history';\nimport * as queryString from 'query-string';\nimport * as React from 'react';\nimport {analyticsEvent} from './util/analytics';\nimport {Chart, ChartType} from './chart';\nimport {Details} from './details';\nimport {EmbeddedDataSource, EmbeddedSourceSpec} from './datasource/embedded';\nimport {FormattedMessage} from 'react-intl';\nimport {TopolaData} from './util/gedcom_util';\nimport {IndiInfo} from 'topola';\nimport {intlShape} from 'react-intl';\nimport {Intro} from './intro';\nimport {Loader, Message, Portal, Responsive} from 'semantic-ui-react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\nimport {TopBar} from './menu/top_bar';\nimport {DataSourceEnum, SourceSelection} from './datasource/data_source';\nimport {\n  getSelection,\n  UploadSourceSpec,\n  UrlSourceSpec,\n  GedcomUrlDataSource,\n  UploadedDataSource,\n} from './datasource/load_data';\nimport {\n  loadWikiTree,\n  PRIVATE_ID_PREFIX,\n  WikiTreeDataSource,\n  WikiTreeSourceSpec,\n} from './datasource/wikitree';\nimport {getI18nMessage} from './util/error_i18n';\n\n/** Shows an error message in the middle of the screen. */\nfunction ErrorMessage(props: {message?: string}) {\n  return (\n    <Message negative className=\"error\">\n      <Message.Header>\n        <FormattedMessage\n          id=\"error.failed_to_load_file\"\n          defaultMessage={'Failed to load file'}\n        />\n      </Message.Header>\n      <p>{props.message}</p>\n    </Message>\n  );\n}\n\ninterface ErrorPopupProps {\n  message?: string;\n  open: boolean;\n  onDismiss: () => void;\n}\n\n/**\n * Shows a dismissable error message in the bottom left corner of the screen.\n */\nfunction ErrorPopup(props: ErrorPopupProps) {\n  return (\n    <Portal open={props.open} onClose={props.onDismiss}>\n      <Message negative className=\"errorPopup\" onDismiss={props.onDismiss}>\n        <Message.Header>\n          <FormattedMessage id=\"error.error\" defaultMessage={'Error'} />\n        </Message.Header>\n        <p>{props.message}</p>\n      </Message>\n    </Portal>\n  );\n}\n\nenum AppState {\n  INITIAL,\n  LOADING,\n  ERROR,\n  SHOWING_CHART,\n  LOADING_MORE,\n}\n\ntype DataSourceSpec =\n  | UrlSourceSpec\n  | UploadSourceSpec\n  | WikiTreeSourceSpec\n  | EmbeddedSourceSpec;\n\n/** Arguments passed to the application, primarily through URL parameters. */\ninterface Arguments {\n  sourceSpec?: DataSourceSpec;\n  selection?: IndiInfo;\n  chartType: ChartType;\n  standalone: boolean;\n  freezeAnimation?: boolean;\n  showSidePanel: boolean;\n}\n\n/**\n * Retrieve arguments passed into the application through the URL and uploaded\n * data.\n */\nfunction getArguments(location: H.Location<any>): Arguments {\n  const search = queryString.parse(location.search);\n  const getParam = (name: string) => {\n    const value = search[name];\n    return typeof value === 'string' ? value : undefined;\n  };\n\n  const view = getParam('view');\n  const chartTypes = new Map<string | undefined, ChartType>([\n    ['relatives', ChartType.Relatives],\n    ['fancy', ChartType.Fancy],\n  ]);\n\n  const hash = getParam('file');\n  const url = getParam('url');\n  const embedded = getParam('embedded') === 'true'; // False by default.\n  var sourceSpec: DataSourceSpec | undefined = undefined;\n  if (getParam('source') === 'wikitree') {\n    sourceSpec = {\n      source: DataSourceEnum.WIKITREE,\n      authcode: getParam('?authcode'),\n    };\n  } else if (hash) {\n    sourceSpec = {\n      source: DataSourceEnum.UPLOADED,\n      hash,\n      gedcom: location.state && location.state.data,\n      images: location.state && location.state.images,\n    };\n  } else if (url) {\n    sourceSpec = {\n      source: DataSourceEnum.GEDCOM_URL,\n      url,\n      handleCors: getParam('handleCors') !== 'false', // True by default.\n    };\n  } else if (embedded) {\n    sourceSpec = {source: DataSourceEnum.EMBEDDED};\n  }\n\n  const indi = getParam('indi');\n  const parsedGen = Number(getParam('gen'));\n  const selection = indi\n    ? {id: indi, generation: !isNaN(parsedGen) ? parsedGen : 0}\n    : undefined;\n\n  return {\n    sourceSpec,\n    selection,\n    // Hourglass is the default view.\n    chartType: chartTypes.get(view) || ChartType.Hourglass,\n\n    showSidePanel: getParam('sidePanel') !== 'false', // True by default.\n    standalone: getParam('standalone') !== 'false' && !embedded,\n    freezeAnimation: getParam('freeze') === 'true', // False by default\n  };\n}\n\n/**\n * Returs true if the changes object has values that are different than those\n * in state.\n */\nfunction hasUpdatedValues<T>(state: T, changes: Partial<T> | undefined) {\n  if (!changes) {\n    return false;\n  }\n  return Object.entries(changes).some(\n    ([key, value]) => value !== undefined && state[key] !== value,\n  );\n}\n\ninterface State {\n  /** State of the application. */\n  state: AppState;\n  /** Loaded data. */\n  data?: TopolaData;\n  /** Selected individual. */\n  selection?: IndiInfo;\n  /** Error to display. */\n  error?: string;\n  /** Whether the side panel is shown. */\n  showSidePanel?: boolean;\n  /** Whether the app is in standalone mode, i.e. showing 'open file' menus. */\n  standalone: boolean;\n  /** Type of displayed chart. */\n  chartType: ChartType;\n  /** Whether to show the error popup. */\n  showErrorPopup: boolean;\n  /** Specification of the source of the data. */\n  sourceSpec?: DataSourceSpec;\n  /** Freeze animations after initial chart render. */\n  freezeAnimation?: boolean;\n}\n\nexport class App extends React.Component<RouteComponentProps, {}> {\n  state: State = {\n    state: AppState.INITIAL,\n    standalone: true,\n    chartType: ChartType.Hourglass,\n    showErrorPopup: false,\n  };\n  chartRef: Chart | null = null;\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  /** Sets the state with a new individual selection and chart type. */\n  private updateDisplay(\n    selection: IndiInfo,\n    otherStateChanges?: Partial<State>,\n  ) {\n    if (\n      !this.state.selection ||\n      this.state.selection.id !== selection.id ||\n      this.state.selection!.generation !== selection.generation ||\n      hasUpdatedValues(this.state, otherStateChanges)\n    ) {\n      this.setState(\n        Object.assign({}, this.state, {selection}, otherStateChanges),\n      );\n    }\n  }\n\n  /** Sets error message after data load failure. */\n  private setError(error: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        state: AppState.ERROR,\n        error,\n      }),\n    );\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate();\n  }\n\n  private readonly uploadedDataSource = new UploadedDataSource();\n  private readonly gedcomUrlDataSource = new GedcomUrlDataSource();\n  private readonly wikiTreeDataSource = new WikiTreeDataSource(\n    this.context.intl,\n  );\n  private readonly embeddedDataSource = new EmbeddedDataSource();\n\n  private isNewData(sourceSpec: DataSourceSpec, selection?: IndiInfo) {\n    if (\n      !this.state.sourceSpec ||\n      this.state.sourceSpec.source !== sourceSpec.source\n    ) {\n      // New data source means new data.\n      return true;\n    }\n    const newSource = {spec: sourceSpec, selection};\n    const oldSouce = {\n      spec: this.state.sourceSpec,\n      selection: this.state.selection,\n    };\n    switch (newSource.spec.source) {\n      case DataSourceEnum.UPLOADED:\n        return this.uploadedDataSource.isNewData(\n          newSource as SourceSelection<UploadSourceSpec>,\n          oldSouce as SourceSelection<UploadSourceSpec>,\n          this.state.data,\n        );\n      case DataSourceEnum.GEDCOM_URL:\n        return this.gedcomUrlDataSource.isNewData(\n          newSource as SourceSelection<UrlSourceSpec>,\n          oldSouce as SourceSelection<UrlSourceSpec>,\n          this.state.data,\n        );\n      case DataSourceEnum.WIKITREE:\n        return this.wikiTreeDataSource.isNewData(\n          newSource as SourceSelection<WikiTreeSourceSpec>,\n          oldSouce as SourceSelection<WikiTreeSourceSpec>,\n          this.state.data,\n        );\n      case DataSourceEnum.EMBEDDED:\n        return this.embeddedDataSource.isNewData(\n          newSource as SourceSelection<EmbeddedSourceSpec>,\n          oldSouce as SourceSelection<EmbeddedSourceSpec>,\n          this.state.data,\n        );\n    }\n  }\n\n  private loadData(sourceSpec: DataSourceSpec, selection?: IndiInfo) {\n    switch (sourceSpec.source) {\n      case DataSourceEnum.UPLOADED:\n        return this.uploadedDataSource.loadData({spec: sourceSpec, selection});\n      case DataSourceEnum.GEDCOM_URL:\n        return this.gedcomUrlDataSource.loadData({spec: sourceSpec, selection});\n      case DataSourceEnum.WIKITREE:\n        return this.wikiTreeDataSource.loadData({spec: sourceSpec, selection});\n      case DataSourceEnum.EMBEDDED:\n        return this.embeddedDataSource.loadData({spec: sourceSpec, selection});\n    }\n  }\n\n  async componentDidUpdate() {\n    if (this.props.location.pathname !== '/view') {\n      if (this.state.state !== AppState.INITIAL) {\n        this.setState(Object.assign({}, this.state, {state: AppState.INITIAL}));\n      }\n      return;\n    }\n\n    const args = getArguments(this.props.location);\n\n    if (!args.sourceSpec) {\n      this.props.history.replace({pathname: '/'});\n    } else if (\n      this.state.state === AppState.INITIAL ||\n      this.isNewData(args.sourceSpec, args.selection)\n    ) {\n      // Set loading state.\n      this.setState(\n        Object.assign({}, this.state, {\n          state: AppState.LOADING,\n          sourceSpec: args.sourceSpec,\n          selection: args.selection,\n          standalone: args.standalone,\n          chartType: args.chartType,\n        }),\n      );\n      try {\n        const data = await this.loadData(args.sourceSpec, args.selection);\n        // Set state with data.\n        this.setState(\n          Object.assign({}, this.state, {\n            state: AppState.SHOWING_CHART,\n            data,\n            selection: getSelection(data.chartData, args.selection),\n            showSidePanel: args.showSidePanel,\n          }),\n        );\n      } catch (error) {\n        this.setError(getI18nMessage(error, this.context.intl));\n      }\n    } else if (\n      this.state.state === AppState.SHOWING_CHART ||\n      this.state.state === AppState.LOADING_MORE\n    ) {\n      // Update selection if it has changed in the URL.\n      const selection = getSelection(\n        this.state.data!.chartData,\n        args.selection,\n      );\n      const loadMoreFromWikitree =\n        args.sourceSpec.source === DataSourceEnum.WIKITREE &&\n        (!this.state.selection || this.state.selection.id !== selection.id);\n      this.updateDisplay(selection, {\n        chartType: args.chartType,\n        state: loadMoreFromWikitree\n          ? AppState.LOADING_MORE\n          : AppState.SHOWING_CHART,\n      });\n      if (loadMoreFromWikitree) {\n        try {\n          const data = await loadWikiTree(\n            args.selection!.id,\n            this.context.intl,\n          );\n          const selection = getSelection(data.chartData, args.selection);\n          this.setState(\n            Object.assign({}, this.state, {\n              state: AppState.SHOWING_CHART,\n              data,\n              selection,\n            }),\n          );\n        } catch (error) {\n          this.showErrorPopup(\n            this.context.intl.formatMessage(\n              {\n                id: 'error.failed_wikitree_load_more',\n                defaultMessage: 'Failed to load data from WikiTree. {error}',\n              },\n              {error},\n            ),\n            {state: AppState.SHOWING_CHART},\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Called when the user clicks an individual box in the chart.\n   * Updates the browser URL.\n   */\n  private onSelection = (selection: IndiInfo) => {\n    // Don't allow selecting WikiTree private profiles.\n    if (selection.id.startsWith(PRIVATE_ID_PREFIX)) {\n      return;\n    }\n    analyticsEvent('selection_changed');\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    search.indi = selection.id;\n    search.gen = String(selection.generation);\n    location.search = queryString.stringify(search);\n    this.props.history.push(location);\n  };\n\n  private onPrint = () => {\n    analyticsEvent('print');\n    this.chartRef && this.chartRef.print();\n  };\n\n  private showErrorPopup(message: string, otherStateChanges?: Partial<State>) {\n    this.setState(\n      Object.assign(\n        {},\n        this.state,\n        {\n          showErrorPopup: true,\n          error: message,\n        },\n        otherStateChanges,\n      ),\n    );\n  }\n\n  private onDownloadPdf = async () => {\n    analyticsEvent('download_pdf');\n    try {\n      this.chartRef && (await this.chartRef.downloadPdf());\n    } catch (e) {\n      this.showErrorPopup(\n        this.context.intl.formatMessage({\n          id: 'error.failed_pdf',\n          defaultMessage:\n            'Failed to generate PDF file.' +\n            ' Please try with a smaller diagram or download an SVG file.',\n        }),\n      );\n    }\n  };\n\n  private onDownloadPng = async () => {\n    analyticsEvent('download_png');\n    try {\n      this.chartRef && (await this.chartRef.downloadPng());\n    } catch (e) {\n      this.showErrorPopup(\n        this.context.intl.formatMessage({\n          id: 'error.failed_png',\n          defaultMessage:\n            'Failed to generate PNG file.' +\n            ' Please try with a smaller diagram or download an SVG file.',\n        }),\n      );\n    }\n  };\n\n  private onDownloadSvg = () => {\n    analyticsEvent('download_svg');\n    this.chartRef && this.chartRef.downloadSvg();\n  };\n\n  private onDismissErrorPopup = () => {\n    this.setState(\n      Object.assign({}, this.state, {\n        showErrorPopup: false,\n      }),\n    );\n  };\n\n  private renderMainArea = () => {\n    switch (this.state.state) {\n      case AppState.SHOWING_CHART:\n      case AppState.LOADING_MORE:\n        return (\n          <div id=\"content\">\n            <ErrorPopup\n              open={this.state.showErrorPopup}\n              message={this.state.error}\n              onDismiss={this.onDismissErrorPopup}\n            />\n            {this.state.state === AppState.LOADING_MORE ? (\n              <Loader active size=\"small\" className=\"loading-more\" />\n            ) : null}\n            <Chart\n              data={this.state.data!.chartData}\n              selection={this.state.selection!}\n              chartType={this.state.chartType}\n              onSelection={this.onSelection}\n              freezeAnimation={this.state.freezeAnimation}\n              ref={(ref) => (this.chartRef = ref)}\n            />\n            {this.state.showSidePanel ? (\n              <Responsive minWidth={768} id=\"sidePanel\">\n                <Details\n                  gedcom={this.state.data!.gedcom}\n                  indi={this.state.selection!.id}\n                />\n              </Responsive>\n            ) : null}\n          </div>\n        );\n\n      case AppState.ERROR:\n        return <ErrorMessage message={this.state.error!} />;\n\n      case AppState.INITIAL:\n      case AppState.LOADING:\n        return <Loader active size=\"large\" />;\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Route\n          render={(props: RouteComponentProps) => (\n            <TopBar\n              {...props}\n              data={this.state.data && this.state.data.chartData}\n              allowAllRelativesChart={\n                this.state.sourceSpec?.source !== DataSourceEnum.WIKITREE\n              }\n              showingChart={\n                this.props.history.location.pathname === '/view' &&\n                (this.state.state === AppState.SHOWING_CHART ||\n                  this.state.state === AppState.LOADING_MORE)\n              }\n              standalone={this.state.standalone}\n              eventHandlers={{\n                onSelection: this.onSelection,\n                onPrint: this.onPrint,\n                onDownloadPdf: this.onDownloadPdf,\n                onDownloadPng: this.onDownloadPng,\n                onDownloadSvg: this.onDownloadSvg,\n              }}\n              showWikiTreeMenus={\n                this.state.sourceSpec?.source === DataSourceEnum.WIKITREE\n              }\n            />\n          )}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={Intro} />\n          <Route exact path=\"/view\" render={this.renderMainArea} />\n          <Redirect to={'/'} />\n        </Switch>\n      </>\n    );\n  }\n}\n","import {InjectedIntl} from 'react-intl';\nimport {TopolaError} from './error';\n\n/**\n * Returns a translated message for the given error. If the message can't be\n * translated, the original error.message is returned.\n */\nexport function getI18nMessage(error: Error, intl: InjectedIntl): string {\n  if (!(error instanceof TopolaError)) {\n    return error.message;\n  }\n  return intl.formatMessage(\n    {\n      id: `error.${error.code}`,\n      defaultMessage: error.message,\n    },\n    error.args,\n  );\n}\n","import * as locale_de from 'react-intl/locale-data/de';\nimport * as locale_en from 'react-intl/locale-data/en';\nimport * as locale_fr from 'react-intl/locale-data/fr';\nimport * as locale_it from 'react-intl/locale-data/it';\nimport * as locale_pl from 'react-intl/locale-data/pl';\nimport * as locale_ru from 'react-intl/locale-data/ru';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport messages_de from './translations/de.json';\nimport messages_fr from './translations/fr.json';\nimport messages_it from './translations/it.json';\nimport messages_pl from './translations/pl.json';\nimport messages_ru from './translations/ru.json';\nimport {addLocaleData} from 'react-intl';\nimport {App} from './app';\nimport {detect} from 'detect-browser';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport {IntlProvider} from 'react-intl';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'canvas-toBlob';\n\naddLocaleData([\n  ...locale_de,\n  ...locale_en,\n  ...locale_fr,\n  ...locale_it,\n  ...locale_pl,\n  ...locale_ru,\n]);\n\nconst messages = {\n  de: messages_de,\n  fr: messages_fr,\n  it: messages_it,\n  pl: messages_pl,\n  ru: messages_ru,\n};\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nconst browser = detect();\n\nif (browser && browser.name === 'ie') {\n  ReactDOM.render(\n    <p>\n      Topola Genealogy Viewer does not support Internet Explorer. Please try a\n      different (modern) browser.\n    </p>,\n    document.querySelector('#root'),\n  );\n} else {\n  ReactDOM.render(\n    <IntlProvider locale={language} messages={messages[language]}>\n      <Router>\n        <Route component={App} />\n      </Router>\n    </IntlProvider>,\n    document.querySelector('#root'),\n  );\n}\n"],"sourceRoot":""}
{"version":3,"sources":["util/analytics.ts","config.tsx","chart.tsx","util/media.ts","datasource/data_source.ts","util/error.ts","util/gedcom_util.ts","util/date_util.ts","details.tsx","datasource/load_data.ts","datasource/embedded.ts","topola.jpg","intro.tsx","menu/menu_item.tsx","menu/search_index.ts","menu/search.tsx","menu/upload_menu.tsx","menu/url_menu.tsx","menu/wikitree.png","datasource/wikitree.ts","menu/wikitree_menu.tsx","menu/top_bar.tsx","app.tsx","util/error_i18n.ts","index.tsx"],"names":["analyticsEvent","action","data","window","gtag","ChartColors","DEFALUT_CONFIG","color","COLOR_BY_GENERATION","COLOR_ARG","Map","NO_COLOR","COLOR_BY_SEX","COLOR_ARG_INVERSE","argsToConfig","args","get","name","value","undefined","getParam","configToArgs","config","c","ConfigPanel","props","Form","className","id","defaultMessage","Field","Checkbox","radio","label","tagName","checked","onClick","onChange","forEach","v","k","set","ChartType","AppMedia","createMedia","breakpoints","small","large","mediaStyles","createMediaStyle","Media","MediaContextProvider","zoomed","size","event","parent","select","node","scale","transform","offsetX","max","clientWidth","offsetY","clientHeight","attr","scrollLeft","x","scrollTop","y","scrolled","zoomTransform","call","zoom","translateTo","loadAsDataUrl","blob","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","e","target","result","inlineImage","image","a","href","baseVal","fetch","response","dataUrl","console","warn","inlineImages","svg","images","Array","from","getElementsByTagName","all","map","loadImage","Image","src","URL","createObjectURL","addEventListener","drawOnCanvas","canvas","document","createElement","width","height","ctx","getContext","oldFill","fillStyle","fillRect","drawImage","canvasToBlob","type","toBlob","DataSourceEnum","chartColors","TopolaChartColors","ChartComponent","chart","animating","rerenderRequired","zoomBehavior","this","chartType","Hourglass","HourglassChart","Relatives","RelativesChart","Fancy","FancyChart","CircleRenderer","DetailedRenderer","factor","scaleBy","initialRender","resetPosition","freezeAnimation","innerHTML","createChart","json","getChartType","renderer","getRendererType","svgSelector","indiCallback","info","onSelection","colors","animate","updateSvgSize","locale","intl","setData","chartInfo","render","startIndi","selection","baseGeneration","generation","zoomOutFactor","min","extent","scaleExtent","translateExtent","on","scrollTopTween","i","interpolateNumber","t","scrollLeftTween","dx","origin","dy","svgTransition","transition","delay","duration","tween","animationPromise","then","renderChart","prevProps","at","getElementById","cloneNode","removeAttribute","setAttribute","String","Number","getAttribute","querySelector","XMLSerializer","serializeToString","getStrippedSvg","printWindow","style","position","top","left","contentDocument","open","write","getSvgContents","close","setTimeout","contentWindow","focus","print","parentNode","removeChild","body","appendChild","getSvgContentsWithInlinedImages","contents","Blob","saveAs","jspdf","default","doc","orientation","unit","format","addImage","save","React","Chart","injectIntl","forwardRef","TopolaError","code","message","Error","pointerToId","pointer","substring","length","idToIndiMap","indis","indi","idToFamMap","fams","fam","prepareGedcom","entries","head","find","entry","tag","other","strcmp","b","compareDates","event1","event2","date1","date","dateRange","date2","year","month","day","sortChildren","gedcom","comparator","indiMap","indiId1","indiId2","indi1","indi2","birth","birthDatesComparator","newFams","children","newChildren","sort","Object","assign","sortFamilyChildren","sortSpouses","famMap","famId1","famId2","fam1","fam2","marriage","marriageDatesComparator","newIndis","sortIndiSpouses","normalizeGedcom","IMAGE_EXTENSIONS","filterImage","newImages","fileName","url","match","has","push","title","startsWith","lowerName","toLowerCase","some","ext","endsWith","isImageFile","filterImages","getSoftware","sour","tree","DATE_QUALIFIERS","formatDate","hasDay","hasMonth","hasYear","text","dateObject","Date","qualifier","formatOptions","formatMessage","Intl","DateTimeFormat","join","formatDateOrRange","dateOrRange","fromDate","toDate","to","translatedFromDate","translatedToDate","formatDateRage","EVENT_TAGS","EXCLUDED_TAGS","TAG_DESCRIPTIONS","translateTag","normalizedTag","replace","joinLines","lines","line","index","properties","getData","subentry","last","eventDetails","gedcomDate","getDate","translateDate","place","filter","note","noteDetails","nameDetails","split","getDetails","tags","detailsFunction","flatMap","element","hasData","getOtherDetails","includes","dataDetails","DetailsComponent","entriesWithData","dereferenced","dereference","Details","getSelection","prepareData","cacheId","parseGedcom","gedcomEntriesToJson","chartData","convertGedcom","serializedData","JSON","stringify","sessionStorage","setItem","loadFromUrl","handleCors","cachedData","getItem","parse","driveUrlMatch1","driveUrlMatch2","urlToFetch","status","statusText","loadGedcom","hash","EmbeddedMessageType","UploadedDataSource","newSource","oldSource","spec","source","event_label","event_value","GedcomUrlDataSource","EmbeddedDataSource","PARENT_READY","postMessage","READY","GEDCOM","onMessage","GedcomLink","pathname","search","queryString","Intro","dateString","values","link","process","slice","Card","Content","as","Header","Grid","Row","Column","logo","alt","centered","MenuType","MenuItem","newProps","menuType","Menu","Item","Dropdown","require","lunr","normalize","input","toLocaleLowerCase","compare","score","naturalSort","ref","LunrSearchIndex","self","use","multiLanguage","field","boost","firstName","lastName","spouseLastName","famId","husb","husbId","husband","getHusbandLastName","add","normalizedName","normalizedSpouseLastName","query","s","getNameLine","trim","SearchBarComponent","state","searchResults","searchRef","searchIndex","birthDate","deathDate","death","key","description","getDescriptionLine","results","displaySearchResult","setState","setValue","initialize","buildSearchIndex","initializeSearchIndex","Search","onSearchChange","debounce","_","handleSearch","onResultSelect","handleResultSelect","noResultsMessage","placeholder","selectFirstResult","SearchBar","loadFileAsText","file","evt","readAsText","isImageFileName","lower","UploadMenu","files","filesArray","gedcomFile","imageMap","imageFileNames","md5","location","history","content","Icon","htmlFor","accept","multiple","handleUpload","UrlMenu","dialogOpen","inputRef","current","Modal","onClose","handleClose","onSubmit","handleLoad","Input","fluid","handleUrlChange","Actions","Button","secondary","primary","openDialog","loadFromUrlModal","PRIVATE_ID_PREFIX","USER_NAME_COOKIE","getSessionStorageItem","setSessionStorageItem","wikiTreeGet","request","requestData","FormData","append","apiUrl","method","credentials","responseBody","getAncestors","cacheKey","fields","ancestors","getRelatives","keys","keysToFetch","getChildren","getSpouses","items","fetchedResults","person","Name","concat","clientLogin","authcode","getLoggedInUserName","Cookies","loadWikiTree","hostname","loginResult","clear","username","everyone","firstPerson","spouseKeys","Spouses","personId","ancestorKeys","flat","ancestorDetails","privateFathers","privateMothers","ancestorList","offset","Id","Father","Mother","privateFather","privateMother","privateAncestors","descendantGenerationLimit","toFetch","people","allSpouses","Children","families","spouses","idToName","getFamilyId","getSet","wife","converted","Set","convertPerson","spouse","familySpouses","Gender","child","marriage_date","marriage_location","parsedDate","parseDate","buildGedcom","spouse1","spouse2","hideId","FirstName","RealName","LastNameAtBirth","famc","sex","BirthDate","BirthLocation","BirthDateDecade","DataStatus","parseDecade","DeathDate","DeathLocation","DeathDateDecade","PhotoData","dataStatus","matchedDate","decade","gedcomIndis","escapedId","level","newSet","WikiTreeLoginState","WikiTreeDataSource","ScreenSize","WikiTreeMenu","firstChild","wikiTreeId","standalone","preventDefault","handleIdChange","wikitreeLogo","handleSelectId","wikiTreeLink","rel","example1","enterId","example2","Ref","innerRef","wikiTreeIdModal","WikiTreeLoginMenuComponent","wikiTreeLoginState","UNKNOWN","wikiTreeLoginFormRef","wikiTreeReturnUrlRef","returnUrl","submit","wikiTreeLoginUsername","LOGGED_IN","NOT_LOGGED_IN","checkWikiTreeLoginState","wikiTreeLogin","display","tooltip","WikiTreeLoginMenu","AppState","TopBar","view","screenSize","showingChart","chartTypeItems","changeView","allowAllRelativesChart","LARGE","eventHandlers","onPrint","trigger","onDownloadPdf","onDownloadPng","onDownloadSvg","SMALL","Divider","showWikiTreeMenus","icon","fileMenus","chartMenus","wikiTreeLoginMenu","attached","inverted","desktopMenus","mobileMenus","ErrorMessage","Message","negative","ErrorPopup","Portal","onDismiss","getArguments","chartTypes","embedded","sourceSpec","WIKITREE","UPLOADED","GEDCOM_URL","EMBEDDED","parsedGen","isNaN","showSidePanel","AppComponent","INITIAL","showErrorPopup","chartRef","uploadedDataSource","gedcomUrlDataSource","wikiTreeDataSource","embeddedDataSource","updateUrl","gen","downloadPdf","downloadPng","downloadSvg","onDismissErrorPopup","renderMainArea","SHOWING_CHART","LOADING_MORE","sidePanelTabs","menuItem","error","Loader","active","Tab","panes","ERROR","LOADING","otherStateChanges","changes","componentDidUpdate","oldSouce","isNewData","loadData","setError","loadMoreFromWikitree","updateDisplay","exact","path","component","Component","App","messages","cs","messages_cs","de","messages_de","fr","messages_fr","it","messages_it","pl","messages_pl","ru","messages_ru","language","navigator","browser","detect","ReactDOM"],"mappings":"0x1BACO,SAASA,EAAeC,EAAgBC,GAC5CC,OAAeC,KAAK,QAASH,EAAQC,G,ICE5BG,E,4CAAAA,O,uBAAAA,I,+BAAAA,I,8CAAAA,M,KAUL,IAAMC,EAAyB,CACpCC,MAAOF,EAAYG,qBAGfC,EAAY,IAAIC,IAAyB,CAC7C,CAAC,IAAKL,EAAYM,UAClB,CAAC,IAAKN,EAAYG,qBAClB,CAAC,IAAKH,EAAYO,gBAEdC,EAAoB,IAAIH,IAGvB,SAASI,EAAaC,GAAiC,IAAD,IAM3D,MAAO,CACLR,MAAK,UAAEE,EAAUO,IAAV,UANQ,SAACC,GAChB,IAAMC,EAAQH,EAAKE,GACnB,MAAwB,kBAAVC,EAAqBA,OAAQC,EAItBC,CAAS,YAAvB,QAA+B,WAAjC,QAAwCd,EAAeC,OAIzD,SAASc,EAAaC,GAC3B,MAAO,CAACC,EAAGV,EAAkBG,IAAIM,EAAOf,QAGnC,SAASiB,EAAYC,GAI1B,OACE,mCACE,cAACC,EAAA,EAAD,CAAMC,UAAU,sBAAhB,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,IAAD,CAAkBC,GAAG,gBAAgBC,eAAe,aAEtD,cAACH,EAAA,EAAKI,MAAN,CAAYH,UAAU,YAAtB,SACE,cAACI,EAAA,EAAD,CACEC,OAAK,EACLC,MACE,cAAC,IAAD,CACEC,QAAQ,QACRN,GAAG,yBACHC,eAAe,SAGnBZ,KAAK,qBACLC,MAAM,OACNiB,QAASV,EAAMH,OAAOf,QAAUF,EAAYM,SAC5CyB,QAAS,kBAAMX,EAAMY,SAAS,CAAC9B,MAAOF,EAAYM,gBAGtD,cAACe,EAAA,EAAKI,MAAN,CAAYH,UAAU,YAAtB,SACE,cAACI,EAAA,EAAD,CACEC,OAAK,EACLC,MACE,cAAC,IAAD,CACEC,QAAQ,QACRN,GAAG,oCACHC,eAAe,kBAGnBZ,KAAK,qBACLC,MAAM,aACNiB,QAASV,EAAMH,OAAOf,QAAUF,EAAYG,oBAC5C4B,QAAS,kBACPX,EAAMY,SAAS,CAAC9B,MAAOF,EAAYG,2BAIzC,cAACkB,EAAA,EAAKI,MAAN,CAAYH,UAAU,YAAtB,SACE,cAACI,EAAA,EAAD,CACEC,OAAK,EACLC,MACE,cAAC,IAAD,CACEC,QAAQ,QACRN,GAAG,6BACHC,eAAe,WAGnBZ,KAAK,qBACLC,MAAM,SACNiB,QAASV,EAAMH,OAAOf,QAAUF,EAAYO,aAC5CwB,QAAS,kBAAMX,EAAMY,SAAS,CAAC9B,MAAOF,EAAYO,2BA3EhEH,EAAU6B,SAAQ,SAACC,EAAGC,GAAJ,OAAU3B,EAAkB4B,IAAIF,EAAGC,M,ICkHzCE,E,2CCvINC,EAAWC,sBAAY,CAC3BC,YAAa,CACXC,MAAO,IACPC,MAAO,OAGEC,EAAcL,EAASM,mBACtBC,EAA+BP,EAA/BO,MAAOC,EAAwBR,EAAxBQ,qB,2CD2BrB,SAASC,EACPC,EACAC,GAEA,IAAMC,EAASC,YAAO,iBAAiBC,OAEjCC,EAAQJ,EAAMK,UAAUnB,EACxBoB,EAAUC,YAAI,CAAC,GAAIN,EAAOO,YAAcT,EAAK,GAAKK,GAAS,IAC3DK,EAAUF,YAAI,CAAC,GAAIN,EAAOS,aAAeX,EAAK,GAAKK,GAAS,IAClEF,YAAO,aACJS,KAAK,QAASZ,EAAK,GAAKK,GACxBO,KAAK,SAAUZ,EAAK,GAAKK,GACzBO,KAAK,YAHR,oBAGkCL,EAHlC,aAG8CG,EAH9C,MAIAP,YAAO,UAAUS,KAAK,YAAtB,gBAA4CP,EAA5C,MAEAH,EAAOW,YAAcZ,EAAMK,UAAUQ,EACrCZ,EAAOa,WAAad,EAAMK,UAAUU,EAItC,SAASC,IACP,IAAMf,EAASC,YAAO,iBAAiBC,OACjCU,EAAIZ,EAAOW,WAAaX,EAAOO,YAAc,EAC7CO,EAAId,EAAOa,UAAYb,EAAOS,aAAe,EAC7CN,EAAQa,YAAchB,GAAQf,EACpCgB,YAAOD,GAAQiB,KAAKC,cAAOC,YAAaP,EAAIT,EAAOW,EAAIX,GAIzD,SAASiB,EAAcC,GACrB,IAAMC,EAAS,IAAIC,WAEnB,OADAD,EAAOE,cAAcH,GACd,IAAII,SAAgB,SAACC,EAASC,GACnCL,EAAOM,OAAS,SAACC,GAAD,OAAOH,EAASG,EAAEC,OAAsBC,Y,SAI7CC,E,8EAAf,WAA2BC,GAA3B,qBAAAC,EAAA,yDACQC,EAAOF,EAAME,KAAKC,QAD1B,0EAM2BC,MAAMF,GANjC,cAMUG,EANV,gBAOuBA,EAASjB,OAPhC,cAOUA,EAPV,iBAQ0BD,EAAcC,GARxC,QAQUkB,EARV,OASIN,EAAME,KAAKC,QAAUG,EATzB,kDAWIC,QAAQC,KAAK,wBAAb,MAXJ,2D,+BAoBeC,E,iFAAf,WAA4BC,GAA5B,eAAAT,EAAA,6DACQU,EAASC,MAAMC,KAAKH,EAAII,qBAAqB,UADrD,SAEQtB,QAAQuB,IAAIJ,EAAOK,IAAIjB,IAF/B,4C,sBAMA,SAASkB,GAAU7B,GACjB,IAAMY,EAAQ,IAAIkB,MAElB,OADAlB,EAAMmB,IAAMC,IAAIC,gBAAgBjC,GACzB,IAAII,SAA0B,SAACC,EAASC,GAC7CM,EAAMsB,iBAAiB,QAAQ,kBAAM7B,EAAQO,SAKjD,SAASuB,GAAavB,GACpB,IAAMwB,EAASC,SAASC,cAAc,UAEtCF,EAAOG,MAAsB,EAAd3B,EAAM2B,MACrBH,EAAOI,OAAwB,EAAf5B,EAAM4B,OAEtB,IAAMC,EAAML,EAAOM,WAAW,MACxBC,EAAUF,EAAIG,UAMpB,OALAH,EAAIG,UAAY,QAChBH,EAAII,SAAS,EAAG,EAAGT,EAAOG,MAAOH,EAAOI,QACxCC,EAAIG,UAAYD,EAEhBF,EAAIK,UAAUlC,EAAO,EAAG,EAAGwB,EAAOG,MAAOH,EAAOI,QACzCJ,EAGT,SAASW,GAAaX,EAA2BY,GAC/C,OAAO,IAAI5C,SAAc,SAACC,EAASC,GACjC8B,EAAOa,QAAO,SAACjD,GACTA,EACFK,EAAQL,GAERM,MAED0C,O,SAKKlF,O,yBAAAA,I,yBAAAA,I,kBAAAA,M,KAMZ,IE5IYoF,GF4INC,GAAc,IAAIrH,IAAoC,CAC1D,CAACL,EAAYM,SAAUqH,cAAkBrH,UACzC,CAACN,EAAYG,oBAAqBwH,cAAkBxH,qBACpD,CAACH,EAAYO,aAAcoH,cAAkBpH,gBAalCqH,GAAb,4MAIUC,WAJV,IAMUC,WAAY,EANtB,EAQUC,kBAAmB,EAR7B,EAUUC,kBAVV,oDAYE,WACE,OAAQC,KAAK7G,MAAM8G,WACjB,KAAK7F,EAAU8F,UACb,OAAOC,iBACT,KAAK/F,EAAUgG,UACb,OAAOC,iBACT,KAAKjG,EAAUkG,MACb,OAAOC,aACT,QAEE,OAAOJ,oBAtBf,6BA0BE,WACE,OAAQH,KAAK7G,MAAM8G,WACjB,KAAK7F,EAAUkG,MACb,OAAOE,iBACT,QAEE,OAAOC,sBAhCf,kBAoCE,SAAaC,GACX,IAAMzF,EAASC,YAAO,iBACtB8E,KAAKD,aAAcY,QAAQ1F,EAAQyF,KAtCvC,yBA8CE,WAKG,IAAD,OAJAjI,EAIA,uDAJyD,CACvDmI,eAAe,EACfC,eAAe,GAIjB,GAAKpI,EAAKmI,gBAAiBZ,KAAKH,WAMhC,GAAKpH,EAAKmI,gBAAiBZ,KAAK7G,MAAM2H,gBAAtC,CAIIrI,EAAKmI,eACN1F,YAAO,UAAUC,OAAuB4F,UAAY,GACrDf,KAAKJ,MAAQoB,sBAAY,CACvBC,KAAMjB,KAAK7G,MAAMvB,KACjBqI,UAAWD,KAAKkB,eAChBC,SAAUnB,KAAKoB,kBACfC,YAAa,SACbC,aAAc,SAACC,GAAD,OAAU,EAAKpI,MAAMqI,YAAYD,IAC/CE,OAAQhC,GAAY/G,IAAIsH,KAAK7G,MAAMsI,QACnCC,SAAS,EACTC,eAAe,EACfC,OAAQ5B,KAAK7G,MAAM0I,KAAKD,UAG1B5B,KAAKJ,MAAOkC,QAAQ9B,KAAK7G,MAAMvB,MAEjC,IAAMmK,EAAY/B,KAAKJ,MAAOoC,OAAO,CACnCC,UAAWjC,KAAK7G,MAAM+I,UAAU5I,GAChC6I,eAAgBnC,KAAK7G,MAAM+I,UAAUE,aAEjCxE,EAAM1C,YAAO,aACbD,EAASC,YAAO,iBAAiBC,OAEjCC,EAAQa,YAAchB,GAAQf,EAC9BmI,EAAgBC,YAAI,CACxB,EACAlH,EACAH,EAAOO,YAAcuG,EAAUhH,KAAK,GACpCE,EAAOS,aAAeqG,EAAUhH,KAAK,KAEjCwH,EAA2B,CAAChH,YAAI,CAAC,GAAK8G,IAAkB,GAE9DrC,KAAKD,aAAe5D,cACjBqG,YAAYD,GACZE,gBAAgB,CAAC,CAAC,EAAG,GAAIV,EAAUhH,OACnC2H,GAAG,QAAQ,SAAC1H,GAAD,OAAWF,EAAOiH,EAAUhH,KAAMC,MAChDE,YAAOD,GAAQyH,GAAG,SAAU1G,GAAUE,KAAK8D,KAAKD,cAEhD,IAAM4C,EAAiB,SAAC7G,GACtB,OAAO,WACL,IAAM8G,EAAIC,YAAkB5H,EAAOa,UAAWA,GAC9C,OAAO,SAACgH,GACN7H,EAAOa,UAAY8G,EAAEE,MAIrBC,EAAkB,SAACnH,GACvB,OAAO,WACL,IAAMgH,EAAIC,YAAkB5H,EAAOW,WAAYA,GAC/C,OAAO,SAACkH,GACN7H,EAAOW,WAAagH,EAAEE,MAKtBE,EAAK/H,EAAOO,YAAc,EAAIuG,EAAUkB,OAAO,GAAK7H,EACpD8H,EAAKjI,EAAOS,aAAe,EAAIqG,EAAUkB,OAAO,GAAK7H,EACrDE,EAAUC,YAAI,CAClB,GACCN,EAAOO,YAAcuG,EAAUhH,KAAK,GAAKK,GAAS,IAE/CK,EAAUF,YAAI,CAClB,GACCN,EAAOS,aAAeqG,EAAUhH,KAAK,GAAKK,GAAS,IAEhD+H,EAAgBvF,EAAIwF,aAAaC,MAAM,KAAKC,SAAS,KACrDF,EAAa3K,EAAKmI,cAAgBhD,EAAMuF,EAC9CC,EACGzH,KAAK,YADR,oBACkCL,EADlC,aAC8CG,EAD9C,MAEGE,KAAK,QAASoG,EAAUhH,KAAK,GAAKK,GAClCO,KAAK,SAAUoG,EAAUhH,KAAK,GAAKK,GAClC3C,EAAKoI,gBACHpI,EAAKmI,eACP3F,EAAOW,YAAcoH,EACrB/H,EAAOa,WAAaoH,GAEpBC,EACGI,MAAM,aAAcR,GAAiBC,IACrCO,MAAM,YAAaZ,GAAgBO,KAK1ClD,KAAKH,WAAY,EACjBkC,EAAUyB,iBAAiBC,MAAK,WAC9B,EAAK5D,WAAY,EACb,EAAKC,mBACP,EAAKA,kBAAmB,EACxB,EAAK4D,YAAY,CAAC9C,eAAe,EAAOC,eAAe,cAjGzDb,KAAKF,kBAAmB,IAtD9B,+BA4JE,WACEE,KAAK0D,YAAY,CAAC9C,eAAe,EAAMC,eAAe,MA7J1D,gCAgKE,SAAmB8C,GACjB,IAAM/C,EACJZ,KAAK7G,MAAM8G,YAAc0D,EAAU1D,WACnCD,KAAK7G,MAAMsI,SAAWkC,EAAUlC,OAC5BZ,EAAgBb,KAAK7G,MAAM8G,YAAc0D,EAAU1D,UACzDD,KAAK0D,YAAY,CAAC9C,gBAAeC,oBArKrC,oBAwKE,WAAU,IAAD,OACP,OACE,sBAAKvH,GAAG,eAAR,UACE,eAACsB,EAAD,CAAOgJ,GAAG,QAAQvK,UAAU,OAA5B,UACE,wBAAQA,UAAU,UAAUS,QAAS,kBAAM,EAAKqC,KA9StC,MA8SV,eAGA,wBACE9C,UAAU,WACVS,QAAS,kBAAM,EAAKqC,KAAK,EAnTjB,MAiTV,uBAOF,qBAAK7C,GAAG,WAAR,SACE,mBAAGA,GAAG,iBAvLhB,4BA8LE,WACE,IAAMsE,EAAMe,SAASkF,eAAe,YAAaC,WAAU,GAE3DlG,EAAImG,gBAAgB,aACpB,IAAM9I,EAASC,YAAO,iBAAiBC,OACjCC,EAAQa,YAAchB,GAAQf,EAWpC,OAVA0D,EAAIoG,aACF,QACAC,OAAOC,OAAOtG,EAAIuG,aAAa,UAAY/I,IAE7CwC,EAAIoG,aACF,SACAC,OAAOC,OAAOtG,EAAIuG,aAAa,WAAa/I,IAE9CwC,EAAIwG,cAAc,UAAWL,gBAAgB,aAEtCnG,IA9MX,4BAiNE,WACE,OAAO,IAAIyG,eAAgBC,kBAAkBtE,KAAKuE,oBAlNtD,oFAqNE,2FACQ3G,EAAMoC,KAAKuE,iBADnB,SAEQ5G,EAAaC,GAFrB,iCAGS,IAAIyG,eAAgBC,kBAAkB1G,IAH/C,gDArNF,yEA4NE,WAAS,IAAD,OACA4G,EAAc7F,SAASC,cAAc,UAC3C4F,EAAYC,MAAMC,SAAW,WAC7BF,EAAYC,MAAME,IAAM,UACxBH,EAAYC,MAAMG,KAAO,UACzBJ,EAAY3H,OAAS,WACnB2H,EAAYK,gBAAiBC,OAC7BN,EAAYK,gBAAiBE,MAAM,EAAKC,kBACxCR,EAAYK,gBAAiBI,QAE7BC,YAAW,WACTV,EAAYW,cAAeC,QAC3BZ,EAAYW,cAAeE,QAC3Bb,EAAYc,WAAYC,YAAYf,KACnC,MAEL7F,SAAS6G,KAAKC,YAAYjB,KA5O9B,gEA+OE,8BAAArH,EAAA,sEACyB6C,KAAK0F,kCAD9B,OACQC,EADR,OAEQrJ,EAAO,IAAIsJ,KAAK,CAACD,GAAW,CAACrG,KAAM,kBACzCuG,iBAAOvJ,EAAM,cAHf,gDA/OF,uHAqPE,sGACyB0D,KAAK0F,kCAD9B,cACQC,EADR,OAEQrJ,EAAO,IAAIsJ,KAAK,CAACD,GAAW,CAACrG,KAAM,kBAF3C,KAGeb,GAHf,SAGkCN,GAAU7B,GAH5C,6IArPF,sHA2PE,8BAAAa,EAAA,sEACuB6C,KAAKvB,eAD5B,cACQC,EADR,gBAEqBW,GAAaX,EAAQ,aAF1C,OAEQpC,EAFR,OAGEuJ,iBAAOvJ,EAAM,cAHf,gDA3PF,sHAiQE,kCAAAa,EAAA,sEAEiC,8BAFjC,uBAEkB2I,EAFlB,EAESC,QAFT,SAGuB/F,KAAKvB,eAH5B,OAGQC,EAHR,QAIQsH,EAAM,IAAIF,EAAM,CACpBG,YAAavH,EAAOG,MAAQH,EAAOI,OAAS,IAAM,IAClDoH,KAAM,KACNC,OAAQ,CAACzH,EAAOG,MAAOH,EAAOI,WAE5BsH,SAAS1H,EAAQ,MAAO,EAAG,EAAGA,EAAOG,MAAOH,EAAOI,OAAQ,QAC/DkH,EAAIK,KAAK,cAVX,iDAjQF,2DAAoCC,iBA8QvBC,GAAQC,YAAW7G,GAAgB,CAAC8G,YAAY,K,SE1ajDjH,O,uBAAAA,I,2BAAAA,I,uBAAAA,I,wBAAAA,Q,gFCHCkH,GAAb,kDACE,WACkBC,EAChBC,GAEC,IAAD,EADgBnO,EAChB,uDADgD,GAChD,4BACA,cAAMmO,IAJUD,OAGhB,EADgBlO,OAChB,EALJ,uBAAiCoO,QC8B1B,SAASC,GAAYC,GAC1B,OAAOA,EAAQC,UAAU,EAAGD,EAAQE,OAAS,GAGxC,SAASC,GAAYtP,GAC1B,IAAMsG,EAAM,IAAI9F,IAIhB,OAHAR,EAAKuP,MAAMnN,SAAQ,SAACoN,GAClBlJ,EAAI/D,IAAIiN,EAAK9N,GAAI8N,MAEZlJ,EAGF,SAASmJ,GAAWzP,GACzB,IAAMsG,EAAM,IAAI9F,IAIhB,OAHAR,EAAK0P,KAAKtN,SAAQ,SAACuN,GACjBrJ,EAAI/D,IAAIoN,EAAIjO,GAAIiO,MAEXrJ,EAGT,SAASsJ,GAAcC,GACrB,IAAMC,EAAOD,EAAQE,MAAK,SAACC,GAAD,MAAyB,SAAdA,EAAMC,OACrCV,EAAsC,GACtCG,EAAqC,GACrCQ,EAAsC,GAU5C,OATAL,EAAQzN,SAAQ,SAAC4N,GACG,SAAdA,EAAMC,IACRV,EAAML,GAAYc,EAAMb,UAAYa,EACb,QAAdA,EAAMC,IACfP,EAAKR,GAAYc,EAAMb,UAAYa,EAC1BA,EAAMb,UACfe,EAAMhB,GAAYc,EAAMb,UAAYa,MAGjC,CAACF,OAAMP,QAAOG,OAAMQ,SAG7B,SAASC,GAAO5K,EAAW6K,GACzB,OAAI7K,EAAI6K,GACE,EAEN7K,EAAI6K,EACC,EAEF,EAIT,SAASC,GACPC,EACAC,GAEA,IAAMC,EACJF,IAAWA,EAAOG,MAASH,EAAOI,WAAaJ,EAAOI,UAAUvK,MAC5DwK,EACJJ,IAAWA,EAAOE,MAASF,EAAOG,WAAaH,EAAOG,UAAUvK,MAClE,OAAKqK,GAAUA,EAAMI,MAASD,GAAUA,EAAMC,KAG1CJ,EAAMI,OAASD,EAAMC,KAChBJ,EAAMI,KAAOD,EAAMC,KAEvBJ,EAAMK,OAAUF,EAAME,QAGvBL,EAAMK,QAAUF,EAAME,OAGtBL,EAAMM,KAAOH,EAAMG,KAAON,EAAMM,MAAQH,EAAMG,KAFzCN,EAAMK,MAAQF,EAAME,MAHpB,EANA,EAgEX,SAASE,GAAaC,GACpB,IAAMC,EA/CR,SAA8BD,GAC5B,IAAME,EAAU5B,GAAY0B,GAE5B,OAAO,SAACG,EAAiBC,GACvB,IAAMC,EAA8BH,EAAQpQ,IAAIqQ,GAC1CG,EAA8BJ,EAAQpQ,IAAIsQ,GAChD,OACEf,GAAagB,GAASA,EAAME,MAAOD,GAASA,EAAMC,QAClDpB,GAAOgB,EAASC,IAuCDI,CAAqBR,GAClCS,EAAUT,EAAOtB,KAAKpJ,KAAI,SAACqJ,GAAD,OAjBlC,SACEA,EACAsB,GAEA,IAAKtB,EAAI+B,SACP,OAAO/B,EAET,IAAMgC,EAAchC,EAAI+B,SAASE,KAAKX,GACtC,OAAOY,OAAOC,OAAO,GAAInC,EAAK,CAAC+B,SAAUC,IASAI,CAAmBpC,EAAKsB,MACjE,OAAOY,OAAOC,OAAO,GAAId,EAAQ,CAACtB,KAAM+B,IAkB1C,SAASO,GAAYhB,GACnB,IAAMC,EAtDR,SAAiCD,GAC/B,IAAMiB,EAASxC,GAAWuB,GAE1B,OAAO,SAACkB,EAAgBC,GACtB,IAAMC,EAA4BH,EAAOnR,IAAIoR,GACvCG,EAA4BJ,EAAOnR,IAAIqR,GAC7C,OACE9B,GAAa+B,GAAQA,EAAKE,SAAUD,GAAQA,EAAKC,WACjDnC,GAAO+B,EAAQC,IA8CAI,CAAwBvB,GACrCwB,EAAWxB,EAAOzB,MAAMjJ,KAAI,SAACkJ,GAAD,OAbpC,SACEA,EACAyB,GAEA,IAAKzB,EAAKE,KACR,OAAOF,EAET,IAAMiC,EAAUjC,EAAKE,KAAKkC,KAAKX,GAC/B,OAAOY,OAAOC,OAAO,GAAItC,EAAM,CAACE,KAAM+B,IAMpCgB,CAAgBjD,EAAMyB,MAExB,OAAOY,OAAOC,OAAO,GAAId,EAAQ,CAACzB,MAAOiD,IAIpC,SAASE,GAAgB1B,GAC9B,OAAOgB,GAAYjB,GAAaC,IAGlC,IAAM2B,GAAmB,CAAC,OAAQ,OAAQ,QAY1C,SAASC,GAAYpD,EAAgBvJ,GACnC,IAAKuJ,EAAKvJ,QAAiC,IAAvBuJ,EAAKvJ,OAAOoJ,OAC9B,OAAOG,EAET,IAAMqD,EAAyB,GAU/B,OATArD,EAAKvJ,OAAO7D,SAAQ,SAACkD,GACnB,IAAMwN,EAAWxN,EAAMyN,IAAIC,MAAM,YAAa,GAE1C/M,EAAOgN,IAAIH,GACbD,EAAUK,KAAK,CAACH,IAAK9M,EAAOnF,IAAIgS,GAAYK,MAAO7N,EAAM6N,QAChD7N,EAAMyN,IAAIK,WAAW,SAnBpC,SAAqBN,GACnB,IAAMO,EAAYP,EAASQ,cAC3B,OAAOX,GAAiBY,MAAK,SAACC,GAAD,OAASH,EAAUI,SAASD,MAiBZE,CAAYpO,EAAMyN,MAC3DF,EAAUK,KAAK5N,MAGZuM,OAAOC,OAAO,GAAItC,EAAM,CAACvJ,OAAQ4M,IAO1C,SAASc,GACP3C,EACA/K,GAEA,IAAMuM,EAAWxB,EAAOzB,MAAMjJ,KAAI,SAACkJ,GAAD,OAAUoD,GAAYpD,EAAMvJ,MAC9D,OAAO4L,OAAOC,OAAO,GAAId,EAAQ,CAACzB,MAAOiD,IAiCpC,SAASoB,GAAY9D,GAC1B,IAAM+D,EACJ/D,GAAQA,EAAKgE,MAAQhE,EAAKgE,KAAK/D,MAAK,SAACC,GAAD,MAAyB,SAAdA,EAAMC,OACjDlP,EACJ8S,GAAQA,EAAKC,MAAQD,EAAKC,KAAK/D,MAAK,SAACC,GAAD,MAAyB,SAAdA,EAAMC,OACvD,OAAQlP,GAAQA,EAAKf,MAAS,KCnQhC,IAAM+T,GAAkB,IAAIvT,IAAI,CAC9B,CAAC,MAAO,SACR,CAAC,MAAO,cACR,CAAC,MAAO,eAGV,SAASwT,GAAWvD,EAAkBxG,GACpC,IAAMgK,OAAsBhT,IAAbwP,EAAKK,IACdoD,OAA0BjT,IAAfwP,EAAKI,MAChBsD,OAAwBlT,IAAdwP,EAAKG,KACrB,IAAKqD,IAAWC,IAAaC,EAC3B,OAAO1D,EAAK2D,MAAQ,GAEtB,IAAMC,EAAa,IAAIC,KACrBH,EAAU1D,EAAKG,KAAQ,EACvBsD,EAAWzD,EAAKI,MAAS,EAAI,EAC7BoD,EAASxD,EAAKK,IAAO,GAGjByD,EAAY9D,EAAK8D,WAAa9D,EAAK8D,UAAUjB,cAQ7CkB,EAA4C,CAChD1D,IAAKmD,EAAS,eAAYhT,EAC1B4P,MAAOqD,EAAW,YAASjT,EAC3B2P,KAAMuD,EAAU,eAAYlT,GAO9B,MAAO,CAhBLsT,GACAtK,EAAKwK,cAAc,CACjB/S,GAAG,QAAD,OAAU6S,GACZ5S,eAAgBoS,GAAgBjT,IAAIyT,IAAcA,IAQ/B,IAAIG,KAAKC,eAC9B1K,EAAKD,OACLwK,GACAjG,OAAO8F,IAEoCO,KAAK,KAuC7C,SAASC,GACdC,EACA7K,GAEA,OAAK6K,EAGDA,EAAYrE,KACPuD,GAAWc,EAAYrE,KAAMxG,GAElC6K,EAAYpE,UA9ClB,SAAwBA,EAAsBzG,GAC5C,IAAM8K,EAAWrE,EAAUvK,KACrB6O,EAAStE,EAAUuE,GACnBC,EAAqBH,GAAYf,GAAWe,EAAU9K,GACtDkL,EAAmBH,GAAUhB,GAAWgB,EAAQ/K,GACtD,OAAIiL,GAAsBC,EACjBlL,EAAKwK,cACV,CACE/S,GAAI,eACJC,eAAgB,2BAElB,CAACwE,KAAM+O,EAAoBD,GAAIE,IAG/BD,EACKjL,EAAKwK,cACV,CACE/S,GAAI,aACJC,eAAgB,gBAElB,CAACwE,KAAM+O,IAGPC,EACKlL,EAAKwK,cACV,CACE/S,GAAI,cACJC,eAAgB,eAElB,CAACsT,GAAIE,IAGF,GAeEC,CAAeN,EAAYpE,UAAWzG,GAExC,GARE,GClEX,IAAMoL,GAAa,CAAC,OAAQ,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,QAC7DC,GAAgB,CAAC,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,QACxDC,GAAmB,IAAI/U,IAAI,CAC/B,CAAC,OAAQ,YACT,CAAC,OAAQ,WACT,CAAC,OAAQ,SACT,CAAC,OAAQ,UACT,CAAC,OAAQ,UACT,CAAC,MAAO,eACR,CAAC,OAAQ,aACT,CAAC,OAAQ,SACT,CAAC,OAAQ,aACT,CAAC,QAAS,UACV,CAAC,OAAQ,cACT,CAAC,OAAQ,SACT,CAAC,OAAQ,QACT,CAAC,OAAQ,eACT,CAAC,OAAQ,YACT,CAAC,OAAQ,qBACT,CAAC,OAAQ,kBACT,CAAC,OAAQ,cACT,CAAC,OAAQ,SACT,CAAC,MAAO,SAGV,SAASgV,GAAavF,GACpB,IAAMwF,EAAgBxF,EAAIyF,QAAQ,KAAM,IACxC,OACE,cAAC,IAAD,CACEhU,GAAE,iBAAY+T,GACd9T,eAAgB4T,GAAiBzU,IAAI2U,IAAkBA,IAK7D,SAASE,GAAUC,GACjB,OACE,mCACGA,EAAMtP,KAAI,SAACuP,EAAMC,GAAP,OACT,gCACE,cAAC,KAAD,CAASC,WAAY,CAAC5Q,OAAQ,UAA9B,SAA0C0Q,IAC1C,yBAFQC,QAalB,SAASE,GAAQhG,GACf,IAAM5K,EAAS,CAAC4K,EAAMhQ,MAStB,OARAgQ,EAAM8D,KAAK1R,SAAQ,SAAC6T,GAClB,GAAqB,SAAjBA,EAAShG,KAAkBgG,EAASjW,KAAM,CAC5C,IAAMkW,EAAO9Q,EAAOiK,OAAS,EAC7BjK,EAAO8Q,IAASD,EAASjW,SACC,SAAjBiW,EAAShG,KAAkBgG,EAASjW,MAC7CoF,EAAO8N,KAAK+C,EAASjW,SAGlBoF,EAGT,SAAS+Q,GAAanG,EAAoB/F,GACxC,IAAM2L,EAAQ,GACV5F,EAAMhQ,MAAQgQ,EAAMhQ,KAAKqP,OAAS,GACpCuG,EAAM1C,KAAK,4BAAIlD,EAAMhQ,QAEvB,IAAMyQ,EAAOT,EAAM8D,KAAK/D,MAAK,SAACkG,GAAD,MAA+B,SAAjBA,EAAShG,OAChDQ,GAAQA,EAAKzQ,MACf4V,EAAM1C,KDMH,SAAuBkD,EAAoBnM,GAChD,OAAO4K,GAAkBwB,kBAAQD,GAAanM,GCPjCqM,CAAc7F,EAAKzQ,KAAMiK,IAEtC,IAAMsM,EAAQvG,EAAM8D,KAAK/D,MAAK,SAACkG,GAAD,MAA+B,SAAjBA,EAAShG,OASrD,OARIsG,GAASA,EAAMvW,MACjB4V,EAAM1C,KAAN,MAAA0C,EAAK,aAASI,GAAQO,KAExBvG,EAAM8D,KACH0C,QAAO,SAACP,GAAD,MAA+B,SAAjBA,EAAShG,OAC9B7N,SAAQ,SAACqU,GAAD,OACPT,GAAQS,GAAMrU,SAAQ,SAACyT,GAAD,OAAUD,EAAM1C,KAAK,4BAAI2C,WAE9CD,EAAMvG,OAIT,qCACE,qBAAK5N,UAAU,gBAAf,SAAgC+T,GAAaxF,EAAMC,OACnD,+BAAO0F,GAAUC,QALZ,KA+BX,SAASc,GAAY1G,GACnB,OAAO2F,GACLK,GAAQhG,GAAO1J,KAAI,SAACuP,EAAMC,GAAP,OAAiB,4BAAgBD,GAARC,OAIhD,SAASa,GAAY3G,GACnB,OACE,oBAAIvO,UAAU,YAAd,SACGuO,EAAMhQ,KACJ4W,MAAM,KACNJ,QAAO,SAACzV,GAAD,QAAYA,KACnBuF,KAAI,SAACvF,EAAM+U,GAAP,OACH,gCACG/U,EACD,yBAFQ+U,QASpB,SAASe,GACPhH,EACAiH,EACAC,GAEA,OAAOC,KAAQF,GAAM,SAAC7G,GAAD,OACnBJ,EACG2G,QAAO,SAACxG,GAAD,OAAWA,EAAMC,MAAQA,KAChC3J,KAAI,SAAC0J,GAAD,OAAW+G,EAAgB/G,SAEjCwG,QAAO,SAACS,GAAD,OAAyB,OAAZA,KACpB3Q,KAAI,SAAC2Q,EAASnB,GAAV,OACH,qBAAKrU,UAAU,aAAf,SACGwV,GAD8BnB,MAWvC,SAASoB,GAAQlH,GACf,OAAOA,EAAM8D,KAAKzE,OAAS,GAAMW,EAAMhQ,OAASgQ,EAAMhQ,KAAKoT,WAAW,KAGxE,SAAS+D,GAAgBtH,GACvB,OAAOA,EACJ2G,QACC,SAACxG,GAAD,OACGsF,GAAc8B,SAASpH,EAAMC,OAASoF,GAAW+B,SAASpH,EAAMC,QAEpEuG,OAAOU,IACP5Q,KAAI,SAAC0J,GAAD,OA7ET,SAAqBA,GACnB,IAAM4F,EAAQ,GASd,OARI5F,EAAMhQ,MACR4V,EAAM1C,KAAN,MAAA0C,EAAK,aAASI,GAAQhG,KAExBA,EAAM8D,KACH0C,QAAO,SAACP,GAAD,MAA+B,SAAjBA,EAAShG,OAC9B7N,SAAQ,SAACqU,GAAD,OACPT,GAAQS,GAAMrU,SAAQ,SAACyT,GAAD,OAAUD,EAAM1C,KAAK,4BAAI2C,WAE9CD,EAAMvG,OAIT,qCACE,qBAAK5N,UAAU,gBAAf,SAAgC+T,GAAaxF,EAAMC,OACnD,+BAAO0F,GAAUC,QALZ,KAkESyB,CAAYrH,MAC3BwG,QAAO,SAACS,GAAD,OAAyB,OAAZA,KACpB3Q,KAAI,SAAC2Q,EAASnB,GAAV,OACH,qBAAKrU,UAAU,aAAf,SACGwV,GAD8BnB,M,IAoBjCwB,G,4JAIJ,WAAU,IAAD,OACDzH,EAAUzH,KAAK7G,MAAMyP,OAAOzB,MAAMnH,KAAK7G,MAAMiO,MAAMsE,KACnDyD,EAAkB1H,EACrBvJ,KAAI,SAAC0J,GAAD,OAjBX,SAAqBA,EAAoBgB,GACvC,GAAIhB,EAAMhQ,KAAM,CACd,IAAMwX,EAAexG,EAAOd,MAAMhB,GAAYc,EAAMhQ,OACpD,GAAIwX,EACF,OAAOA,EAGX,OAAOxH,EAUayH,CAAYzH,EAAO,EAAKzO,MAAMyP,WAC7CwF,OAAOU,IAEV,OACE,sBAAKzV,UAAU,sBAAf,UACGoV,GAAWhH,EAAS,CAAC,QAAS8G,IAC9BE,GAAWhH,EAASwF,IAAY,SAACrF,GAAD,OAC/BmG,GAAanG,EAAO,EAAKzO,MAAM0I,SAEhCkN,GAAgBI,GAChBV,GAAWU,EAAiB,CAAC,QAASb,W,GAjBhBhI,aAsBlBgJ,GAAU9I,YAAW0I,IChO3B,SAASK,GACd3X,EACAsK,GAQA,MAAO,CAAC5I,GAHN4I,GAAatK,EAAKuP,MAAMgE,MAAK,SAACvI,GAAD,OAAOA,EAAEtJ,KAAO4I,EAAU5I,MACnD4I,EAAU5I,GACV1B,EAAKuP,MAAM,GAAG7N,GACR8I,YAAqB,OAATF,QAAS,IAATA,OAAA,EAAAA,EAAWE,aAAc,GAGnD,SAASoN,GACP5G,EACA6G,EACA5R,GAEA,IAAMjG,EH+MD,SACLgR,EACA/K,GAEA,IAAM4J,EAAUiI,iBAAY9G,GACtB3H,EAAO0O,8BAAoBlI,GACjC,IACGxG,IACAA,EAAKkG,QACLlG,EAAKkG,MAAMF,SACXhG,EAAKqG,OACLrG,EAAKqG,KAAKL,OAEX,MAAM,IAAIP,GAAY,qBAAsB,8BAG9C,MAAO,CACLkJ,UAAWrE,GAAajB,GAAgBrJ,GAAOpD,GAC/C+K,OAAQpB,GAAcC,IGjOXoI,CAAcjH,EAAQ/K,GAAU,IAAIzF,KAC3C0X,EAAiBC,KAAKC,UAAUpY,GACtC,IACEqY,eAAeC,QAAQT,EAASK,GAChC,MAAOhT,GACPW,QAAQC,KAAK,4CAA8CZ,GAE7D,OAAOlF,EAIF,SAAeuY,GAAtB,qC,8CAAO,WACLxF,EACAyF,GAFK,yBAAAjT,EAAA,oEAKGkT,EAAaJ,eAAeK,QAAQ3F,IALvC,yCAOMoF,KAAKQ,MAAMF,IAPjB,sDAUH5S,QAAQC,KAAK,mDAVV,cAaC8S,EAAiB7F,EAAIC,MACzB,sDAGAD,EAAG,yCAAqC6F,EAAe,GAApD,sBAECC,EAAiB9F,EAAIC,MACzB,yDAGAD,EAAG,yCAAqC8F,EAAe,GAApD,qBAGCC,EAAaN,EACf,qCAAuCzF,EACvCA,EA5BC,UA8BkB9S,OAAOyF,MAAMoT,GA9B/B,WA+BmB,OADlBnT,EA9BD,QA+BQoT,OA/BR,uBAgCG,IAAI9J,MAAMtJ,EAASqT,YAhCtB,yBAkCgBrT,EAASyO,OAlCzB,eAkCCpD,EAlCD,yBAmCE4G,GAAY5G,EAAQ+B,IAnCtB,0D,sBAuCA,SAAekG,GAAtB,uC,8CAAO,WACLC,EACAlI,EACA/K,GAHK,eAAAV,EAAA,oEAMGkT,EAAaJ,eAAeK,QAAQQ,IANvC,yCAQMf,KAAKQ,MAAMF,IARjB,sDAWH5S,QAAQC,KAAK,mDAXV,UAaAkL,EAbA,uBAcG,IAAIlC,GACR,8BACA,sDAhBC,iCAmBE8I,GAAY5G,EAAQkI,EAAMjT,IAnB5B,0D,sBA+BA,ICjGFkT,GDiGQC,GAAb,yFAEE,SACEC,EACAC,EACAtZ,GAEA,OAAOqZ,EAAUE,KAAKL,OAASI,EAAUC,KAAKL,OAPlD,6DAUE,WACEM,GADF,eAAAjU,EAAA,+EAIuB0T,GACjBO,EAAOD,KAAKL,KACZM,EAAOD,KAAKvI,OACZwI,EAAOD,KAAKtT,QAPlB,cAIUjG,EAJV,OAUIF,EAAe,qBAAsB,CACnC2Z,YAFe7F,GAAY5T,EAAKgR,OAAOlB,MAGvC4J,YAAcF,EAAOD,KAAKtT,QAAUuT,EAAOD,KAAKtT,OAAO9C,MAAS,IAZtE,kBAcWnD,GAdX,sCAgBIF,EAAe,qBAhBnB,8DAVF,8DAwCa6Z,GAAb,yFACE,SACEN,EACAC,EACAtZ,GAEA,OAAOqZ,EAAUE,KAAKxG,MAAQuG,EAAUC,KAAKxG,MANjD,6DASE,WAAeyG,GAAf,eAAAjU,EAAA,+EAEuBgT,GAAYiB,EAAOD,KAAKxG,IAAKyG,EAAOD,KAAKf,YAFhE,cAEUxY,EAFV,OAIIF,EAAe,qBAAsB,CAAC2Z,YADrB7F,GAAY5T,EAAKgR,OAAOlB,QAH7C,kBAKW9P,GALX,sCAOIF,EAAe,kBAPnB,8DATF,+D,SCzIKqZ,K,gBAAAA,E,cAAAA,E,6BAAAA,Q,KAqBE,IAAMS,GAAb,yFACE,SACEP,EACAC,EACAtZ,GAGA,OAAO,IAPX,8DAUE,WACEgP,EACAjK,EACAC,GAHF,4EAKMgK,EAAQA,UAAYmK,GAAoBU,aAL9C,gBAOI5Z,OAAOoD,OAAOyW,YAAY,CAAC9K,QAASmK,GAAoBY,OAAQ,KAPpE,0BAQa/K,EAAQA,UAAYmK,GAAoBa,OARrD,oBASUhJ,EAAUhC,EAA0BgC,OAT9C,2EAcyBiI,GAAW,GAAIjI,GAdxC,QAcYhR,EAdZ,OAgBMF,EAAe,uBAAwB,CACrC2Z,YAFe7F,GAAY5T,EAAKgR,OAAOlB,QAIzC/K,EAAQ/E,GAnBd,kDAqBMF,EAAe,uBACfkF,EAAO,EAAD,IAtBZ,0DAVF,wHAqCE,WACEwU,GADF,oBAAAjU,EAAA,+EAIS,IAAIT,SAAoB,SAACC,EAASC,GACvC/E,OAAOoD,OAAOyW,YAAY,CAAC9K,QAASmK,GAAoBY,OAAQ,KAChE9Z,OAAO2G,iBAAiB,WAAW,SAAC5G,GAAD,OACjC,EAAKia,UAAUja,EAAKA,KAAM+E,EAASC,UAPzC,2CArCF,8DCjCe,WAA0B,mC,uCCSzC,SAASkV,GAAW3Y,GAClB,OACE,cAAC,KAAD,CACE0T,GAAI,CAACkF,SAAU,QAASC,OAAQC,YAAsB,CAACtH,IAAKxR,EAAMwR,OADpE,SAGGxR,EAAM6S,OAUN,SAASkG,KACd,IANuBC,EAMjBxM,EACJ,qCACE,4BACE,cAAC,IAAD,CACErM,GAAG,oBACHC,eACE,oGAKN,4BACE,cAAC,IAAD,CACED,GAAG,qBACHC,eACE,uKAMN,4BACE,cAAC,IAAD,CACED,GAAG,iBACHC,eACE,6DAIN,+BACE,+BACE,cAACuY,GAAD,CACEnH,IAAI,+DACJqB,KAAK,uBACJ,IAJL,IAKG,cAAC,IAAD,CAAkB1S,GAAG,aAAaC,eAAe,SAAU,IAC5D,mBAAG6D,KAAK,yDAAR,oBANF,OAWA,+BACE,cAAC0U,GAAD,CACEnH,IAAI,iFACJqB,KAAK,gBACJ,IAJL,IAKG,cAAC,IAAD,CAAkB1S,GAAG,aAAaC,eAAe,SAAU,IAC5D,mBAAG6D,KAAK,iDAAR,8BANF,UAYF,8BACE,4BACE,cAAC,IAAD,CAAkB9D,GAAG,gBAAgBC,eAAe,cAErD,KACD,cAAC,IAAD,CACED,GAAG,qBACHC,eACE,4RAMF6Y,OAAQ,CACNC,KACE,mBAAGjV,KAAK,qCAAR,iCAKR,oBAAG/D,UAAU,2BAAb,uBAhFmB8Y,EAiFSG,4BAhFzBH,EAAWI,MAAM,EAAG,KA+EvB,KAEE,mBACEnV,KAAI,uDAAkDkV,WADxD,SAGGA,YALL,UAYJ,OACE,sBAAKhZ,GAAG,UAAR,UACE,qBAAKD,UAAU,oBACf,eAACmZ,GAAA,EAAD,CAAMnZ,UAAU,QAAhB,UACE,cAACmZ,GAAA,EAAKC,QAAN,CAAcC,GAAI9X,EAAOgJ,GAAG,QAA5B,SACE,cAAC4O,GAAA,EAAKG,OAAN,UACE,cAAC,IAAD,CACErZ,GAAG,cACHC,eAAe,gCAIrB,eAACiZ,GAAA,EAAKC,QAAN,WACE,cAACG,GAAA,EAAD,CAAMF,GAAI9X,EAAOgJ,GAAG,QAApB,SACE,eAACgP,GAAA,EAAKC,IAAN,WACE,cAACD,GAAA,EAAKE,OAAN,CAAajU,MAAO,EAApB,SACE,cAAC,KAAD,CAAOR,IAAK0U,GAAMC,IAAI,kBAExB,cAACJ,GAAA,EAAKE,OAAN,CAAajU,MAAO,GAApB,SAAyB8G,SAG7B,eAAC/K,EAAD,CAAOgJ,GAAG,QAAV,UACE,cAAC,KAAD,CACEvF,IAAK0U,GACLC,IAAI,cACJC,UAAU,EACVlY,KAAK,OACL1B,UAAU,eAEXsM,c,ICpIDuN,G,wFAAAA,O,eAAAA,I,wBAAAA,Q,KASL,IAAMC,GAAb,4JAGE,WACE,IAAMC,EAAQ,eAAOpT,KAAK7G,OAG1B,cADOia,EAASC,SAEd,mCACGrT,KAAK7G,MAAMka,WAAaH,GAASI,KAChC,cAACA,GAAA,EAAKC,KAAN,2BAAeH,GAAf,aAA0BpT,KAAK7G,MAAMmQ,YAErC,cAACkK,GAAA,EAASD,KAAV,2BAAmBH,GAAnB,aAA8BpT,KAAK7G,MAAMmQ,kBAZnD,GAA8BhD,a,8DCX9BmN,EAAQ,IAARA,CAA+CC,MAC/CD,EAAQ,IAARA,CAAqCC,MACrCD,EAAQ,IAARA,CAAkCC,MAClCD,EAAQ,IAARA,CAAkCC,MAClCD,EAAQ,IAARA,CAAkCC,MAClCD,EAAQ,IAARA,CAAkCC,MAclC,SAASC,GAAUC,GACjB,OAAOA,EACJC,oBACAF,UAAU,OACVrG,QAAQ,mBAAoB,IAC5BA,QAAQ,UAAW,KAIxB,SAASwG,GAAQ3W,EAAsB6K,GACrC,OAAI7K,EAAE4W,QAAU/L,EAAE+L,MACT/L,EAAE+L,MAAQ5W,EAAE4W,MAEdC,KAAY7W,EAAE8W,IAAKjM,EAAEiM,K,IAiBxBC,G,WAKJ,WAAYtc,GAAuB,yBAJ3B8V,WAI0B,OAH1B5E,aAG0B,OAF1Be,YAE0B,EAChC7J,KAAK8I,QAAU5B,GAAYtP,GAC3BoI,KAAK6J,OAASxC,GAAWzP,G,8CAG3B,WACE,IAAMuc,EAAOnU,KACbA,KAAK0N,MAAQgG,MAAK,WAAa,IAAD,OAC5B1T,KAAKoU,IAAKV,KAAaW,cAAc,KAAM,KAAM,KAAM,KAAM,OAC7DrU,KAAKiU,IAAI,MACTjU,KAAKsU,MAAM,MACXtU,KAAKsU,MAAM,OAAQ,CAACC,MAAO,KAC3BvU,KAAKsU,MAAM,iBAAkB,CAACC,MAAO,IACrCvU,KAAKsU,MAAM,iBAAkB,CAACC,MAAO,IACrCvU,KAAKsU,MAAM,2BAA4B,CAACC,MAAO,IAE/CJ,EAAKrL,QAAQ9O,SAAQ,SAACoN,GACpB,IAAMzO,EAAO,CAACyO,EAAKoN,UAAWpN,EAAKqN,UAAUjI,KAAK,KAC5CkI,EApCd,SACEtN,EACA0B,EACAe,GAEA,OAAQzC,EAAKE,MAAQ,IAClBpJ,KAAI,SAACyW,GAAD,OAAW9K,EAAOnR,IAAIic,MAC1BzW,KAAI,SAACqJ,GAAD,OAASA,GAAOA,EAAIqN,QACxB1W,KAAI,SAAC2W,GAAD,OAAYA,GAAU/L,EAAQpQ,IAAImc,MACtC3W,KAAI,SAAC4W,GAAD,OAAaA,GAAWA,EAAQL,YACpCjI,KAAK,KA0BqBuI,CACrB3N,EACA+M,EAAKrL,QACLqL,EAAKtK,QAEP,EAAKmL,IAAI,CACP1b,GAAI8N,EAAK9N,GACTX,OACAsc,eAAgBtB,GAAUhb,GAC1B+b,iBACAQ,yBAA0BvB,GAAUe,a,oBAM5C,SAAcd,GAAgC,IAAD,OACrCuB,EAAQvB,EACXpF,MAAM,KACNJ,QAAO,SAACgH,GAAD,QAASA,KAChBlX,KAAI,SAACkX,GAAD,iBAAWA,EAAX,QACJ5I,KAAK,KAER,OADgBxM,KAAK0N,MAAOsE,OAAOmD,GAEhC3L,KAAKsK,IACLvB,MAAM,EA1FO,GA2FbrU,KAAI,SAAClB,GAAD,MAAa,CAAC1D,GAAI0D,EAAOiX,IAAK7M,KAAM,EAAK0B,QAAQpQ,IAAIsE,EAAOiX,a,mBC7FvE,SAASoB,GAAYrY,GACnB,IAAMrE,EAAO,CAACqE,EAAOoK,KAAKoN,UAAWxX,EAAOoK,KAAKqN,UAAUjI,KAAK,KAAK8I,OACrE,OAAItY,EAAO1D,GAAG2N,OAAS,EACdtO,EAGP,qCACGA,EADH,IACS,kCAAKqE,EAAO1D,GAAZ,U,IAgBPic,G,4MAIJC,MAAe,CACbC,cAAe,I,EAGjBC,e,IACAC,iB,0DAEA,SAA2BvO,GACzB,IAAMwO,EAAYnJ,GAAkBrF,EAAK+B,MAAOnJ,KAAK7G,MAAM0I,MACrDgU,EAAYpJ,GAAkBrF,EAAK0O,MAAO9V,KAAK7G,MAAM0I,MAC3D,OAAKgU,EAGC,GAAN,OAAUD,EAAV,mBAAyBC,GAFhBD,I,iCAMX,SAA4B5Y,GAC1B,MAAO,CACL1D,GAAI0D,EAAO1D,GACXyc,IAAK/Y,EAAO1D,GACZyR,MAAOsK,GAAYrY,GACnBgZ,YAAahW,KAAKiW,mBAAmBjZ,EAAOoK,S,0BAKhD,SAAqBwM,GAA4B,IAAD,OAC9C,GAAKA,EAAL,CAGA,IAAMsC,EAAUlW,KAAK2V,YAAa3D,OAAO4B,GAAO1V,KAAI,SAAClB,GAAD,OAClD,EAAKmZ,oBAAoBnZ,MAE3BgD,KAAKoW,SAAS3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAACC,cAAeS,Q,gCAI9D,SAA2B5c,GACzB5B,EAAe,0BACfsI,KAAK7G,MAAMqI,YAAY,CAAClI,KAAI8I,WAAY,IACxCpC,KAAK0V,UAAWW,SAAS,M,mCAG3B,WACErW,KAAK2V,YD0BF,SAA0B/d,GAC/B,IAAM8V,EAAQ,IAAIwG,GAAgBtc,GAElC,OADA8V,EAAM4I,aACC5I,EC7Bc6I,CAAiBvW,KAAK7G,MAAMvB,Q,+BAGjD,WACEoI,KAAKwW,0B,gCAGP,SAAmB7S,GACbA,EAAU/L,OAASoI,KAAK7G,MAAMvB,MAChCoI,KAAKwW,0B,oBAIT,WAAU,IAAD,OACP,OACE,cAACC,GAAA,EAAD,CACEC,eAAgBC,MACd,SAACC,EAAkChf,GAAnC,OACE,EAAKif,aAAajf,EAAKgB,SACzB,KAEFke,eAAgB,SAACF,EAAGhf,GAAJ,OAAa,EAAKmf,mBAAmBnf,EAAKoF,OAAO1D,KACjE4c,QAASlW,KAAKwV,MAAMC,cACpBuB,iBAAkBhX,KAAK7G,MAAM0I,KAAKwK,cAAc,CAC9C/S,GAAI,yBACJC,eAAgB,qBAElB0d,YAAajX,KAAK7G,MAAM0I,KAAKwK,cAAc,CACzC/S,GAAI,0BACJC,eAAgB,sBAElB2d,mBAAmB,EACnBjD,IAAK,SAACA,GAAD,OACF,EAAKyB,UAAazB,GAIrB3a,GAAG,e,GAtFsBgN,aA2FpB6Q,GAAY3Q,YAAW+O,I,qBCpHpC,SAAS6B,GAAeC,GACtB,OAAO,IAAI3a,SAAQ,SAACC,GAClB,IAAMJ,EAAS,IAAIC,WACnBD,EAAOM,OAAS,SAACya,GACf3a,EAAS2a,EAAIva,OAAsBC,SAErCT,EAAOgb,WAAWF,MAItB,SAASG,GAAgB9M,GACvB,IAAM+M,EAAQ/M,EAASQ,cACvB,OAAOuM,EAAMpM,SAAS,SAAWoM,EAAMpM,SAAS,QAQ3C,IAAMqM,GAAb,yMACE,WAA2B1c,GAA3B,2FACQ2c,EAAS3c,EAAM+B,OAA4B4a,QAClCA,EAAM1Q,OAFvB,wDAKQ2Q,EAAa9Z,MAAMC,KAAK4Z,GAC7B3c,EAAM+B,OAA4BnE,MAAQ,GAC3ClB,EAAe,wBAAyB,CACtC4Z,YAAaqG,EAAM1Q,SAGf4Q,EACkB,IAAtBD,EAAW3Q,OACP2Q,EAAW,GACXA,EAAWjQ,MAAK,SAAC0P,GAAD,OAAUA,EAAK1e,KAAKuS,cAAcG,SAAS,YAC3DuM,EAAW,GAGX/Z,EAAS+Z,EACZxJ,QACC,SAACiJ,GAAD,OAAUA,EAAK1e,OAASkf,EAAWlf,MAAQ6e,GAAgBH,EAAK1e,SAEjEuF,KAAI,SAACmZ,GAAD,MAAW,CACd1e,KAAM0e,EAAK1e,KACXgS,IAAKrM,IAAIC,gBAAgB8Y,OAEvBS,EAAW,IAAI1f,IACnByF,EAAOK,KAAI,SAAC0J,GAAD,MAAW,CAACA,EAAMjP,KAAMiP,EAAM+C,SA3B7C,UA8BqByM,GAAeS,GA9BpC,QA8BQjgB,EA9BR,OA+BQmgB,EAAiBla,EACpBK,KAAI,SAAChB,GAAD,OAAWA,EAAMvE,QACrB6Q,OACAgD,KAAK,KAEFsE,EAAOkH,KAAIA,KAAIpgB,GAAQmgB,GAIvB/F,EAASC,QAAkBjS,KAAK7G,MAAM8e,SAASjG,SAEnDA,EAAOqF,OAASvG,EACZ9Q,KAAK7G,MAAM+e,QAAQ5K,QACnBtN,KAAK7G,MAAM+e,QAAQpN,MAEb,CACViH,SAAU,QACVC,OAAQC,YAAsB,CAACoF,KAAMvG,IACrC0E,MAAO,CAAC5d,OAAMiG,OAAQia,KAjD1B,iDADF,2EAsDE,WAAU,IAAD,OACDK,EACJ,qCACE,cAACC,GAAA,EAAD,CAAMzf,KAAK,gBACX,cAAC,IAAD,CAAkBW,GAAG,iBAAiBC,eAAe,iBAGzD,OACE,qCACGyG,KAAK7G,MAAMka,WAAaH,GAASI,KAChC,uBAAO+E,QAAQ,YAAf,SACE,cAAC/E,GAAA,EAAKC,KAAN,CAAWb,GAAG,IAAd,SAAmByF,MAGrB,cAAC3E,GAAA,EAASD,KAAV,CAAeb,GAAG,QAAQ2F,QAAQ,YAAlC,SACGF,IAGL,uBACE9e,UAAU,SACViG,KAAK,OACLgZ,OAAO,eACPhf,GAAG,YACHif,UAAQ,EACRxe,SAAU,SAAC+C,GAAD,OAAO,EAAK0b,aAAa1b,aA9E7C,GAAgCwJ,a,wCCXnBmS,GAAb,4MAIEjD,MAAe,CAACkD,YAAY,GAJ9B,EAMEC,SAAmCrS,cANrC,gDASE,WAAsB,IAAD,OACnBtG,KAAKoW,SAAS3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAACkD,YAAY,KAAQ,kBAC/D,EAAKC,SAASC,QAASxT,aAX7B,yBAgBE,WACEpF,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAC5BkD,YAAY,OAnBpB,wBAyBE,WACE1Y,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAC5BkD,YAAY,KAGZ1Y,KAAKwV,MAAM7K,MACbjT,EAAe,gBACfsI,KAAK7G,MAAM+e,QAAQpN,KAAK,CACtBiH,SAAU,QACVC,OAAQC,YAAsB,CAACtH,IAAK3K,KAAKwV,MAAM7K,WAnCvD,6BAyCE,SAAwB/R,GACtBoH,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAC5B7K,IAAK/R,OA5Cb,8BAiDE,WAA4B,IAAD,OACzB,OACE,eAACigB,GAAA,EAAD,CACE/T,KAAM9E,KAAKwV,MAAMkD,WACjBI,QAAS,kBAAM,EAAKC,eACpB9F,UAAU,EAHZ,UAKE,eAACN,GAAA,EAAD,WACE,cAACyF,GAAA,EAAD,CAAMzf,KAAK,mBACX,cAAC,IAAD,CACEW,GAAG,sBACHC,eAAe,qBAGnB,cAACsf,GAAA,EAAMpG,QAAP,UACE,eAACrZ,EAAA,EAAD,CAAM4f,SAAU,kBAAM,EAAKC,cAA3B,UACE,cAACC,GAAA,EAAD,CACEjC,YAAY,WACZkC,OAAK,EACLpf,SAAU,SAAC+C,EAAGlF,GAAJ,OAAa,EAAKwhB,gBAAgBxhB,EAAKgB,QACjDqb,IAAKjU,KAAK2Y,WAEZ,4BACE,cAAC,IAAD,CACErf,GAAG,wBACHC,eACE,wEAEF6Y,OAAQ,CACNC,KACE,mBAAGjV,KAAK,qCAAR,iDASZ,eAACyb,GAAA,EAAMQ,QAAP,WACE,cAACC,GAAA,EAAD,CAAQC,WAAS,EAACzf,QAAS,kBAAM,EAAKif,eAAtC,SACE,cAAC,IAAD,CACEzf,GAAG,uBACHC,eAAe,aAGnB,cAAC+f,GAAA,EAAD,CAAQE,SAAO,EAAC1f,QAAS,kBAAM,EAAKmf,cAApC,SACE,cAAC,IAAD,CAAkB3f,GAAG,qBAAqBC,eAAe,mBAhGrE,oBAuGE,WAAU,IAAD,OACP,OACE,qCACE,eAAC,GAAD,CACEO,QAAS,kBAAM,EAAK2f,cACpBpG,SAAUrT,KAAK7G,MAAMka,SAFvB,UAIE,cAAC+E,GAAA,EAAD,CAAMzf,KAAK,mBACX,cAAC,IAAD,CACEW,GAAG,qBACHC,eAAe,qBAGlByG,KAAK0Z,0BApHd,GAA6BpT,aClBd,OAA0B,qC,qBCU5BqT,GAAoB,WAM3BC,GAAmB,sBAiEzB,SAASC,GAAsB9D,GAC7B,IACE,OAAO9F,eAAeK,QAAQyF,GAC9B,MAAOjZ,GACPW,QAAQC,KAAK,6CAA+CZ,GAE9D,OAAO,KAIT,SAASgd,GAAsB/D,EAAand,GAC1C,IACEqX,eAAeC,QAAQ6F,EAAKnd,GAC5B,MAAOkE,GACPW,QAAQC,KAAK,4CAA8CZ,I,SAKhDid,G,mFAAf,WAA2BC,EAA0B5J,GAArD,uBAAAjT,EAAA,sDAGE,IAAW4Y,KAFLkE,EAAc,IAAIC,UACZC,OAAO,SAAU,QACXH,EAChBC,EAAYE,OAAOpE,EAAKiE,EAAQjE,IAJpC,OAMQqE,EAAShK,EACX,qEACA,mCARN,SASyBvY,OAAOyF,MAAM8c,EAAQ,CAC1CC,OAAQ,OACR7U,KAAMyU,EACNK,YAAalK,OAAavX,EAAY,YAZ1C,cASQ0E,EATR,gBAc6BA,EAASyO,OAdtC,cAcQuO,EAdR,yBAeSxK,KAAKQ,MAAMgK,IAfpB,6C,+BAsBeC,G,mFAAf,WACEzE,EACA3F,GAFF,qBAAAjT,EAAA,yDAIQsd,EAJR,6BAIyC1E,KACjC1F,EAAawJ,GAAsBY,IAL3C,yCAOW1K,KAAKQ,MAAMF,IAPtB,uBASyB0J,GACrB,CACEpiB,OAAQ,eACRoe,IAAKA,EACL2E,OAAQ,KAEVtK,GAfJ,cASQ7S,EATR,OAiBQP,EAASO,EAAS,GAAGod,UAC3Bb,GAAsBW,EAAU1K,KAAKC,UAAUhT,IAlBjD,kBAmBSA,GAnBT,6C,+BA0Be4d,G,mFAAf,WACEC,EACAzK,GAFF,uBAAAjT,EAAA,yDAIQH,EAAmB,GACnB8d,EAAwB,GAC9BD,EAAK7gB,SAAQ,SAAC+b,GACZ,IAAM1F,EAAawJ,GAAsB,sBAAD,OAAuB9D,IAC3D1F,EACFrT,EAAO8N,KAAKiF,KAAKQ,MAAMF,IAEvByK,EAAYhQ,KAAKiL,MAGM,IAAvB+E,EAAY7T,OAdlB,yCAeWjK,GAfX,uBAiByB+c,GACrB,CACEpiB,OAAQ,eACRkjB,KAAMC,EAAYtO,KAAK,KACvBuO,aAAa,EACbC,YAAY,GAEd5K,GAxBJ,UA0B4B,QATpB7S,EAjBR,QA0Be,GAAG0d,MA1BlB,uBA2BU3hB,EAAKwhB,EAAY,GACjB,IAAIpU,GACR,6BADI,2BAEgBpN,EAFhB,cAGJ,CAACA,OA/BP,eAkCQ4hB,EAAiB3d,EAAS,GAAG0d,MAAM/c,KACvC,SAACrC,GAAD,OAAyBA,EAAEsf,WAEdnhB,SAAQ,SAACmhB,GACtBrB,GAAsB,sBAAD,OACGqB,EAAOC,MAC7BrL,KAAKC,UAAUmL,OAxCrB,kBA2CSne,EAAOqe,OAAOH,IA3CvB,6C,sBA8CO,SAAeI,GAAtB,mC,8CAAO,WACLC,GADK,eAAApe,EAAA,sEAGkB4c,GACrB,CACEpiB,OAAQ,cACR4jB,aAEF,GARG,cAGChe,EAHD,yBAUEA,EAAS+d,aAVX,4C,sBAqBA,SAASE,KACd,OAAOC,KAAQ/iB,IAAIkhB,IAOd,SAAe8B,GAAtB,uC,8CAAO,WACL3F,EACAlU,EACA0Z,GAHK,iEAAApe,EAAA,0DAMCiT,EAA0C,sBAA7BvY,OAAOogB,SAAS0D,WAEfH,OAAyBD,EARxC,gCASuBD,GAAYC,GATnC,OAUwB,aADrBK,EATH,QAUa5e,SACdiT,eAAe4L,QACfJ,KAAQthB,IAAIyf,GAAkBgC,EAAYE,WAZzC,cAgBCC,EAAqB,GAhBtB,SAmBqBnB,GAAa,CAAC7E,GAAM3F,GAnBzC,WAmBC4L,EAnBD,QAoBY,GAAGZ,KApBf,uBAsBG,IAAI1U,GACR,kCADI,2BADApN,EAAKyc,EACL,uCAGJ,CAACzc,OAzBA,eA6BC2iB,EAAaxS,OAAO2I,OAAO4J,EAAY,GAAGE,SAAW,IAAIhe,KAC7D,SAACkX,GAAD,OAAOA,EAAEgG,QA9BN,UAgCmB1e,QAAQuB,IAC9B,CAAC8X,GACEsF,OAAOY,GACP/d,KAAI,SAACie,GAAD,OAAc3B,GAAa2B,EAAU/L,OAnCzC,eAgCCuK,EAhCD,OAqCCyB,EAAezB,EAClB0B,OACAne,KAAI,SAACid,GAAD,OAAYA,EAAOC,QACvBhN,QAAO,SAAC2H,GAAD,QAAWA,KAxChB,UAyCyB6E,GAAawB,EAAchM,GAzCpD,QAyCCkM,EAzCD,OA4CCC,EAAsC,IAAInkB,IAE1CokB,EAAsC,IAAIpkB,IAIhDuiB,EAAU3gB,SAAQ,SAACyiB,EAAc/O,GAC/B,IAAMgP,EAAS,IAAOhP,EAEtB+O,EAAaziB,SAAQ,SAACmhB,GAChBA,EAAOwB,GAAK,IACdxB,EAAOwB,IAAMD,EACbvB,EAAOC,KAAP,UAAiBzB,IAAjB,OAAqCwB,EAAOwB,KAE1CxB,EAAOyB,OAAS,IAClBzB,EAAOyB,QAAUF,EACjBH,EAAepiB,IAAIghB,EAAOwB,GAAIxB,EAAOyB,SAEnCzB,EAAO0B,OAAS,IAClB1B,EAAO0B,QAAUH,EACjBF,EAAeriB,IAAIghB,EAAOwB,GAAIxB,EAAO0B,eAO3CP,EAAgBtiB,SAAQ,SAACmhB,GACvB,IAAM2B,EAAgBP,EAAe7jB,IAAIyiB,EAAOwB,IAC5CG,IACF3B,EAAOyB,OAASE,GAElB,IAAMC,EAAgBP,EAAe9jB,IAAIyiB,EAAOwB,IAC5CI,IACF5B,EAAO0B,OAASE,MAGpBhB,EAASjR,KAAT,MAAAiR,EAAQ,aAASO,IAGXU,EAAmBrC,EAAU0B,OAAOjO,QAAO,SAAC+M,GAAD,OAAYA,EAAOwB,GAAK,KACzEZ,EAASjR,KAAT,MAAAiR,EAAQ,aAASiB,IAIXC,EAA4B,EAG9BC,EAAU,CAACnH,GACX3T,EAAa,EA7FZ,aA8FE8a,EAAQjW,OAAS,GAAK7E,GAAc6a,GA9FtC,kCA+FkBrC,GAAasC,EAAS9M,GA/FxC,QA+FG+M,EA/FH,OAgGHpB,EAASjR,KAAT,MAAAiR,EAAQ,aAASoB,IACXC,EAAaD,EAAOvO,SAAQ,SAACuM,GAAD,OAChC1R,OAAO2I,OAAO+I,EAAOe,SAAW,OAElCH,EAASjR,KAAT,MAAAiR,EAAQ,aAASqB,IAEjBF,EAAUC,EAAOvO,SAAQ,SAACuM,GAAD,OACvB1R,OAAO2I,OAAO+I,EAAOkC,UAAUnf,KAAI,SAACjF,GAAD,OAAOA,EAAEmiB,WAE9ChZ,IAzGG,+BA6GCkb,EAAW,IAAIllB,IAEfkR,EAAW,IAAIlR,IAEfmlB,EAAU,IAAInlB,IAKdolB,EAAW,IAAIplB,IAErB2jB,EAAS/hB,SAAQ,SAACmhB,GAEhB,GADAqC,EAASrjB,IAAIghB,EAAOwB,GAAIxB,EAAOC,MAC3BD,EAAO0B,QAAU1B,EAAOyB,OAAQ,CAClC,IAAMjI,EAAQ8I,GAAYtC,EAAO0B,OAAQ1B,EAAOyB,QAChDc,GAAOJ,EAAUnC,EAAO0B,QAAQ7H,IAAIL,GACpC+I,GAAOJ,EAAUnC,EAAOyB,QAAQ5H,IAAIL,GACpC+I,GAAOpU,EAAUqL,GAAOK,IAAImG,EAAOwB,IACnCY,EAAQpjB,IAAIwa,EAAO,CACjBgJ,KAAMxC,EAAO0B,aAAUhkB,EACvBic,QAASqG,EAAOyB,aAAU/jB,QAK1BsO,EAAoB,GACpByW,EAAY,IAAIC,IACtB9B,EAAS/hB,SAAQ,SAACmhB,GAChB,IAAIyC,EAAU/S,IAAIsQ,EAAOwB,IAAzB,CAGAiB,EAAU5I,IAAImG,EAAOwB,IACrB,IAAMvV,EAAO0W,GAAc3C,EAAQtZ,GAC/BsZ,EAAOe,SACTzS,OAAO2I,OAAO+I,EAAOe,SAASliB,SAAQ,SAAC+jB,GACrC,IAAMpJ,EAAQ8I,GAAYtC,EAAOwB,GAAIoB,EAAOpB,IAC5Ce,GAAOJ,EAAUnC,EAAOwB,IAAI3H,IAAIL,GAChC+I,GAAOJ,EAAUS,EAAOpB,IAAI3H,IAAIL,GAChC,IAAMqJ,EACc,SAAlB7C,EAAO8C,OACH,CAACN,KAAMI,EAAOpB,GAAI7H,QAASqG,EAAOwB,GAAIoB,UACtC,CAACJ,KAAMxC,EAAOwB,GAAI7H,QAASiJ,EAAOpB,GAAIoB,UAC5CR,EAAQpjB,IAAIwa,EAAOqJ,MAGvB5W,EAAKE,KAAOxJ,MAAMC,KAAK2f,GAAOJ,EAAUnC,EAAOwB,KAC/CxV,EAAM2D,KAAK1D,OAGPE,EAAOxJ,MAAMC,KAAKwf,EAAQ9V,WAAWvJ,KAAI,YAAmB,IAAD,mBAAhB6X,EAAgB,KAAXnd,EAAW,KACzD2O,EAAe,CACnBjO,GAAIyc,GAEA4H,EAAO/kB,EAAM+kB,MAAQH,EAAS9kB,IAAIE,EAAM+kB,MAC1CA,IACFpW,EAAIoW,KAAOA,GAEb,IAAM7I,EAAUlc,EAAMkc,SAAW0I,EAAS9kB,IAAIE,EAAMkc,SAOpD,GANIA,IACFvN,EAAIqN,KAAOE,GAEbvN,EAAI+B,SAAWxL,MAAMC,KAAK2f,GAAOpU,EAAUyM,IAAM7X,KAC/C,SAACggB,GAAD,OAAWV,EAAS9kB,IAAIwlB,MAGxBtlB,EAAMmlB,SACJnlB,EAAMmlB,OAAOI,eACkB,eAA/BvlB,EAAMmlB,OAAOI,eACbvlB,EAAMmlB,OAAOK,mBACf,CACA,IAAMC,EAAaC,GAAU1lB,EAAMmlB,OAAOI,eAC1C5W,EAAI2C,SAAWT,OAAOC,OAAO,GAAI2U,EAAY,CAC3ClQ,MAAOvV,EAAMmlB,OAAOK,oBAGxB,OAAO7W,KAGHqI,EAAYtF,GAAgB,CAACnD,QAAOG,SACpCsB,EAAS2V,GAAYpX,GA5LtB,kBA6LE,CAACyI,YAAWhH,WA7Ld,6C,sBAiMP,SAAS6U,GAAYe,EAAiBC,GACpC,OAAIA,EAAUD,EACN,GAAN,OAAUA,EAAV,YAAqBC,GAEjB,GAAN,OAAUA,EAAV,YAAqBD,GAGvB,SAASV,GAAc3C,EAAgBtZ,GACrC,IAAMuF,EAAiB,CACrB9N,GAAI6hB,EAAOC,MAyBb,GAvBID,EAAOC,KAAKpQ,WAAW2O,MACzBvS,EAAKsX,QAAS,EACdtX,EAAKoN,UAAY3S,EAAKwK,cAAc,CAClC/S,GAAI,mBACJC,eAAgB,aAGhB4hB,EAAOwD,WAAkC,YAArBxD,EAAOwD,UAC7BvX,EAAKoN,UAAY2G,EAAOwD,UACfxD,EAAOyD,UAAgC,YAApBzD,EAAOyD,WACnCxX,EAAKoN,UAAY2G,EAAOyD,UAEK,YAA3BzD,EAAO0D,kBACTzX,EAAKqN,SAAW0G,EAAO0D,kBAErB1D,EAAO0B,QAAU1B,EAAOyB,UAC1BxV,EAAK0X,KAAOrB,GAAYtC,EAAO0B,OAAQ1B,EAAOyB,SAE1B,SAAlBzB,EAAO8C,OACT7W,EAAK2X,IAAM,IACgB,WAAlB5D,EAAO8C,SAChB7W,EAAK2X,IAAM,KAGV5D,EAAO6D,WAAkC,eAArB7D,EAAO6D,WAC5B7D,EAAO8D,eACoB,YAA3B9D,EAAO+D,gBACP,CACA,IAIM7W,EAJaiW,GACjBnD,EAAO6D,UACP7D,EAAOgE,YAAchE,EAAOgE,WAAWH,YAEdI,GAAYjE,EAAO+D,iBAC9C9X,EAAK+B,MAAQM,OAAOC,OAAO,GAAIrB,EAAM,CAAC8F,MAAOgN,EAAO8D,gBAEtD,GACG9D,EAAOkE,WAAkC,eAArBlE,EAAOkE,WAC5BlE,EAAOmE,eACoB,YAA3BnE,EAAOoE,gBACP,CACA,IAIMlX,EAJaiW,GACjBnD,EAAOkE,UACPlE,EAAOgE,YAAchE,EAAOgE,WAAWE,YAEdD,GAAYjE,EAAOoE,iBAC9CnY,EAAK0O,MAAQrM,OAAOC,OAAO,GAAIrB,EAAM,CAAC8F,MAAOgN,EAAOmE,gBAKtD,OAHInE,EAAOqE,YACTpY,EAAKvJ,OAAS,CAAC,CAAC8M,IAAI,2BAAD,OAA6BwQ,EAAOqE,UAAU7U,QAE5DvD,EAOT,SAASkX,GAAUjW,EAAcoX,GAC/B,GAAKpX,EAAL,CAGA,IAAMqX,EAAcrX,EAAKuC,MAAM,4BAC/B,IAAK8U,EACH,MAAO,CAACrX,KAAM,CAAC2D,KAAM3D,IAEvB,IAAMgW,EAAmB,GAUzB,MATuB,SAAnBqB,EAAY,KACdrB,EAAW7V,OAASkX,EAAY,IAEX,OAAnBA,EAAY,KACdrB,EAAW5V,QAAUiX,EAAY,IAEZ,OAAnBA,EAAY,KACdrB,EAAW3V,MAAQgX,EAAY,IAEd,UAAfD,EACK,CAACnX,UAAW,CAACvK,KAAMsgB,IAET,WAAfoB,EACK,CAACnX,UAAW,CAACuE,GAAIwR,KAEP,UAAfoB,IACFpB,EAAWlS,UAAY,OAElB,CAAC9D,KAAMgW,KAGhB,SAASe,GAAYO,GACnB,MAAkB,YAAXA,EAAuB,CAACtX,KAAM,CAAC2D,KAAM2T,SAAW9mB,EAOzD,SAAS0lB,GAAYpX,GACnB,IAAMyY,EAA4C,GA8BlD,OA7BAzY,EAAMnN,SAAQ,SAACoN,GAEb,IAAMyY,EAAYzY,EAAK9N,GAAGgU,QAAQ,KAAM,KACxCsS,EAAYxY,EAAK9N,IAAM,CACrBwmB,MAAO,EACP/Y,QAAQ,IAAD,OAAMK,EAAK9N,GAAX,KACPuO,IAAK,OACLjQ,KAAM,GACN8T,KAAM,CACJ,CACEoU,MAAO,EACP/Y,QAAS,GACTc,IAAK,OACLjQ,KAAK,GAAD,OAAKwP,EAAKoN,WAAa,GAAvB,aAA8BpN,EAAKqN,UAAY,GAA/C,KACJ/I,KAAM,MAIPtE,EAAK9N,GAAG0R,WAAW,MACtB4U,EAAYxY,EAAK9N,IAAIoS,KAAKZ,KAAK,CAC7BgV,MAAO,EACP/Y,QAAS,GACTc,IAAK,MACLjQ,KAAK,iCAAD,OAAmCioB,GACvCnU,KAAM,QAKL,CACLhE,KAAM,CAACoY,MAAO,EAAG/Y,QAAS,GAAIc,IAAK,OAAQjQ,KAAM,GAAI8T,KAAM,IAC3DvE,MAAOyY,EACPtY,KAAM,GACNQ,MAAO,IAQX,SAAS4V,GAAaxf,EAAqB6X,GACzC,IAAM5b,EAAM+D,EAAIxF,IAAIqd,GACpB,GAAI5b,EACF,OAAOA,EAET,IAAM4lB,EAAS,IAAIlC,IAEnB,OADA3f,EAAI/D,IAAI4b,EAAKgK,GACNA,EASF,IC3jBFC,GD2jBQC,GAAb,WACE,WAAoBpe,GAAkB,yBAAlBA,OADtB,6CAGE,SACEoP,EACAC,EACAtZ,GACU,IAAD,EACT,QAAKqZ,EAAU/O,aAGX,UAAAgP,EAAUhP,iBAAV,eAAqB5I,MAAO2X,EAAU/O,UAAU5I,MAKlD1B,IACAA,EAAKgY,UAAUzI,MAAMgE,MAAK,SAAC/D,GAAD,aAAUA,EAAK9N,MAAL,UAAY2X,EAAU/O,iBAAtB,aAAY,EAAqB5I,WAjB3E,6DAyBE,WACE8X,GADF,eAAAjU,EAAA,yDAGOiU,EAAOlP,UAHd,sBAIU,IAAIwE,GACR,2BACA,oCANN,gCAUuBgV,GACjBtK,EAAOlP,UAAU5I,GACjB0G,KAAK6B,KACLuP,EAAOD,KAAKoK,UAblB,cAUU3jB,EAVV,OAeIF,EAAe,mBAfnB,kBAgBWE,GAhBX,wCAkBIF,EAAe,kBAlBnB,+DAzBF,8D,oBC3jBKsoB,O,qBAAAA,I,iCAAAA,I,0BAAAA,Q,KAgBE,ICZFE,GDYQC,GAAb,4MAIE3K,MAAe,CACbkD,YAAY,GALhB,EAQEC,SAAyCrS,cAR3C,gDAUE,WAAsB,IAAD,OACnBtG,KAAKoW,SAAS3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAACkD,YAAY,KAAQ,kBAC9D,EAAKC,SAASC,QAASwH,WAAgChb,aAZ9D,yBAiBE,WACEpF,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAC5BkD,YAAY,OApBpB,4BA0BE,WAME,GALA1Y,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAC5BkD,YAAY,KAGZ1Y,KAAKwV,MAAM6K,WAAY,CACzB3oB,EAAe,wBACf,IAAMsa,EAASC,QAAkBjS,KAAK7G,MAAM8e,SAASjG,QAC/CsO,OACkBznB,IAAtBmZ,EAAOsO,YAA2BtO,EAAOsO,WAC3CtgB,KAAK7G,MAAM+e,QAAQpN,KAAK,CACtBiH,SAAU,QACVC,OAAQC,YAAsB,CAC5B7K,KAAMpH,KAAKwV,MAAM6K,WACjBjP,OAAQ,WACRkP,oBA1CV,4BAiDE,SAAuB1nB,GACrBoH,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAC5B6K,WAAYznB,OApDpB,qBAyDE,SAAgBoC,EAAyB1B,GACvC0B,EAAMulB,iBACLvgB,KAAK2Y,SAASC,QAASwH,WAAgCxnB,MAAQU,EAChE0G,KAAKwgB,eAAelnB,GACnB0G,KAAK2Y,SAASC,QAASwH,WAAgChb,UA7D5D,6BAgEE,WAA2B,IAAD,OACxB,OACE,eAACyT,GAAA,EAAD,CACE/T,KAAM9E,KAAKwV,MAAMkD,WACjBI,QAAS,kBAAM,EAAKC,eACpB9F,UAAU,EAHZ,UAKE,eAACN,GAAA,EAAD,WACE,qBACEtU,IAAKoiB,GACLzN,IAAI,gBACJvO,MAAO,CAAC5F,MAAO,OAAQC,OAAQ,UAEjC,cAAC,IAAD,CACExF,GAAG,2BACHC,eAAe,0BAGnB,cAACsf,GAAA,EAAMpG,QAAP,UACE,eAACrZ,EAAA,EAAD,CAAM4f,SAAU,kBAAM,EAAK0H,kBAA3B,UACE,4BACE,cAAC,IAAD,CACEpnB,GAAG,6BACHC,eACE,uEAEF6Y,OAAQ,CACNuO,aACE,mBACEvjB,KAAK,wBACLL,OAAO,SACP6jB,IAAI,sBAHN,sBAQFC,SACE,sBACE/mB,QAAS,SAACgD,GAAD,OAAO,EAAKgkB,QAAQhkB,EAAG,eAChCzD,UAAU,YAFZ,wBAOF0nB,SACE,sBACEjnB,QAAS,SAACgD,GAAD,OAAO,EAAKgkB,QAAQhkB,EAAG,sBAChCzD,UAAU,YAFZ,oCAUR,cAAC2nB,GAAA,EAAD,CAAKC,SAAUjhB,KAAK2Y,SAApB,SACE,cAACO,GAAA,EAAD,CACEC,OAAK,EACLpf,SAAU,SAAC+C,EAAGlF,GAAJ,OAAa,EAAK4oB,eAAe5oB,EAAKgB,iBAKxD,eAACigB,GAAA,EAAMQ,QAAP,WACE,cAACC,GAAA,EAAD,CAAQC,WAAS,EAACzf,QAAS,kBAAM,EAAKif,eAAtC,SACE,cAAC,IAAD,CACEzf,GAAG,4BACHC,eAAe,aAGnB,cAAC+f,GAAA,EAAD,CAAQE,SAAO,EAAC1f,QAAS,kBAAM,EAAK4mB,kBAApC,SACE,cAAC,IAAD,CACEpnB,GAAG,0BACHC,eAAe,mBAzI7B,oBAiJE,WAAU,IAAD,OACP,OACE,qCACE,eAAC,GAAD,CACE8Z,SAAUrT,KAAK7G,MAAMka,SACrBvZ,QAAS,kBAAM,EAAK2f,cAFtB,UAIE,qBAAKpb,IAAKoiB,GAAczN,IAAI,gBAAgB3Z,UAAU,cACtD,cAAC,IAAD,CACEC,GAAG,0BACHC,eAAe,0BAGlByG,KAAKkhB,yBA9Jd,GAAkC5a,aA0K5B6a,G,4MAIJ3L,MAAoB,CAClB4L,mBAAoBpB,GAAmBqB,S,EAGzCC,qBAAyDhb,c,EACzDib,qBAA0Djb,c,mDAM1D,WACE,IAIMkb,EAAS,UAHb,wDAGa,OAA0B3pB,OAAOogB,SAASnH,KAA1C,KACf9Q,KAAKuhB,qBAAqB3I,QAAShgB,MAAQ4oB,EAC3CxhB,KAAKshB,qBAAqB1I,QAAS6I,W,qCAGrC,WACE,IAAMC,EAAwBlG,KACxB4F,EAAqBM,EACvB1B,GAAmB2B,UACnB3B,GAAmB4B,cACnB5hB,KAAKwV,MAAM4L,qBAAuBA,GACpCphB,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAC5B4L,qBACAM,6B,+BAMR,WACE1hB,KAAK6hB,4B,gCAGP,WACE7hB,KAAK6hB,4B,oBAGP,WAAU,IAAD,OACP,OAAQ7hB,KAAKwV,MAAM4L,oBACjB,KAAKpB,GAAmB4B,cACtB,OACE,qCACE,eAAC,GAAD,CACEvO,SAAUrT,KAAK7G,MAAMka,SACrBvZ,QAAS,kBAAM,EAAKgoB,iBAFtB,UAIE,qBACEzjB,IAAKoiB,GACLzN,IAAI,gBACJ3Z,UAAU,cAEZ,cAAC,IAAD,CACEC,GAAG,sBACHC,eAAe,0BAGnB,uBACE5B,OAAO,mCACP0iB,OAAO,OACP5V,MAAO,CAACsd,QAAS,UACjB9N,IAAKjU,KAAKshB,qBAJZ,UAME,uBAAOhiB,KAAK,SAAS3G,KAAK,SAASC,MAAM,gBACzC,uBACE0G,KAAK,SACL3G,KAAK,YACLsb,IAAKjU,KAAKuhB,6BAMpB,KAAKvB,GAAmB2B,UACtB,IAAMK,EAAUhiB,KAAKwV,MAAMkM,sBACvB1hB,KAAK7G,MAAM0I,KAAKwK,cACd,CACE/S,GAAI,+BACJC,eAAgB,uCAElB,CAACuiB,SAAU9b,KAAKwV,MAAMkM,wBAExB1hB,KAAK7G,MAAM0I,KAAKwK,cAAc,CAC5B/S,GAAI,sBACJC,eAAgB,0BAEtB,OACE,eAAC,GAAD,CAAU8Z,SAAUrT,KAAK7G,MAAMka,SAAUtI,MAAOiX,EAAhD,UACE,qBAAK3jB,IAAKoiB,GAAczN,IAAI,gBAAgB3Z,UAAU,cACtD,cAAC,IAAD,CACEC,GAAG,0BACHC,eAAe,iBAKzB,OAAO,S,GA1G8B+M,aA6G5B2b,GAAoBzb,YAAW2a,K,SCnSvCjB,O,iBAAAA,I,kBAAAA,Q,KA0BE,ICmCFgC,GDnCQC,GAAb,gKACE,SAAmBC,GACjB,IAAMnK,EAAWjY,KAAK7G,MAAM8e,SACtBjG,EAASC,QAAkBgG,EAASjG,QACtCA,EAAOoQ,OAASA,IAClBpQ,EAAOoQ,KAAOA,EACdnK,EAASjG,OAASC,YAAsBD,GACxChS,KAAK7G,MAAM+e,QAAQpN,KAAKmN,MAP9B,wBAWE,SAAmBoK,GAAyB,IAAD,OACzC,IAAKriB,KAAK7G,MAAMmpB,aACd,OAAO,KAET,IAAMC,EACJ,qCACE,eAAC/O,GAAA,EAASD,KAAV,CAAezZ,QAAS,kBAAM,EAAK0oB,WAAW,cAA9C,UACE,cAACpK,GAAA,EAAD,CAAMzf,KAAK,cACX,cAAC,IAAD,CACEW,GAAG,iBACHC,eAAe,uBAGlByG,KAAK7G,MAAMspB,uBACV,eAACjP,GAAA,EAASD,KAAV,CAAezZ,QAAS,kBAAM,EAAK0oB,WAAW,cAA9C,UACE,cAACpK,GAAA,EAAD,CAAMzf,KAAK,UACX,cAAC,IAAD,CACEW,GAAG,iBACHC,eAAe,qBAGjB,KACJ,eAACia,GAAA,EAASD,KAAV,CAAezZ,QAAS,kBAAM,EAAK0oB,WAAW,UAA9C,UACE,cAACpK,GAAA,EAAD,CAAMzf,KAAK,UACX,cAAC,IAAD,CACEW,GAAG,aACHC,eAAe,oCAKvB,OAAQ8oB,GACN,KAAKnC,GAAWwC,MACd,OACE,qCACE,eAACpP,GAAA,EAAKC,KAAN,CAAWzZ,QAAS,kBAAM,EAAKX,MAAMwpB,cAAcC,WAAnD,UACE,cAACxK,GAAA,EAAD,CAAMzf,KAAK,UACX,cAAC,IAAD,CAAkBW,GAAG,aAAaC,eAAe,aAGnD,cAACia,GAAA,EAAD,CACEqP,QACE,gCACE,cAACzK,GAAA,EAAD,CAAMzf,KAAK,aACX,cAAC,IAAD,CACEW,GAAG,gBACHC,eAAe,gBAIrBF,UAAU,OAVZ,SAYE,eAACma,GAAA,EAASF,KAAV,WACE,cAACE,GAAA,EAASD,KAAV,CACEzZ,QAAS,kBAAM,EAAKX,MAAMwpB,cAAcG,iBAD1C,SAGE,cAAC,IAAD,CACExpB,GAAG,gBACHC,eAAe,eAGnB,cAACia,GAAA,EAASD,KAAV,CACEzZ,QAAS,kBAAM,EAAKX,MAAMwpB,cAAcI,iBAD1C,SAGE,cAAC,IAAD,CACEzpB,GAAG,gBACHC,eAAe,eAGnB,cAACia,GAAA,EAASD,KAAV,CACEzZ,QAAS,kBAAM,EAAKX,MAAMwpB,cAAcK,iBAD1C,SAGE,cAAC,IAAD,CACE1pB,GAAG,gBACHC,eAAe,oBAMvB,cAACia,GAAA,EAAD,CACEqP,QACE,gCACE,cAACzK,GAAA,EAAD,CAAMzf,KAAK,QACX,cAAC,IAAD,CAAkBW,GAAG,YAAYC,eAAe,YAGpDF,UAAU,OAPZ,SASE,cAACma,GAAA,EAASF,KAAV,UAAgBiP,MAElB,cAACpL,GAAD,aACEvf,KAAMoI,KAAK7G,MAAMvB,KACjB4J,YAAaxB,KAAK7G,MAAMwpB,cAAcnhB,aAClCxB,KAAK7G,WAKjB,KAAK+mB,GAAW+C,MACd,OACE,qCACE,eAACzP,GAAA,EAASD,KAAV,CAAezZ,QAAS,kBAAM,EAAKX,MAAMwpB,cAAcC,WAAvD,UACE,cAACxK,GAAA,EAAD,CAAMzf,KAAK,UACX,cAAC,IAAD,CAAkBW,GAAG,aAAaC,eAAe,aAGnD,cAACia,GAAA,EAAS0P,QAAV,IAEA,eAAC1P,GAAA,EAASD,KAAV,CACEzZ,QAAS,kBAAM,EAAKX,MAAMwpB,cAAcG,iBAD1C,UAGE,cAAC1K,GAAA,EAAD,CAAMzf,KAAK,aACX,cAAC,IAAD,CACEW,GAAG,oBACHC,eAAe,mBAGnB,eAACia,GAAA,EAASD,KAAV,CACEzZ,QAAS,kBAAM,EAAKX,MAAMwpB,cAAcI,iBAD1C,UAGE,cAAC3K,GAAA,EAAD,CAAMzf,KAAK,aACX,cAAC,IAAD,CACEW,GAAG,oBACHC,eAAe,oBAGnB,eAACia,GAAA,EAASD,KAAV,CACEzZ,QAAS,kBAAM,EAAKX,MAAMwpB,cAAcK,iBAD1C,UAGE,cAAC5K,GAAA,EAAD,CAAMzf,KAAK,aACX,cAAC,IAAD,CACEW,GAAG,oBACHC,eAAe,oBAInB,cAACia,GAAA,EAAS0P,QAAV,IACCX,EACD,cAAC/O,GAAA,EAAS0P,QAAV,UAtJZ,mBA4JE,WACE,OACE,cAAC5P,GAAA,EAAKC,KAAN,UACE,qDA/JR,uBAoKE,SAAkB8O,GAEhB,IAAKriB,KAAK7G,MAAMmnB,YAActgB,KAAK7G,MAAMgqB,kBACvC,OAAQd,GACN,KAAKnC,GAAWwC,MACd,OAAO,cAAC,GAAD,aAAcrP,SAAUH,GAASI,MAAUtT,KAAK7G,QACzD,KAAK+mB,GAAW+C,MACd,OACE,qCACE,cAAC,GAAD,aAAc5P,SAAUH,GAASM,UAAcxT,KAAK7G,QACpD,cAACqa,GAAA,EAAS0P,QAAV,OAOV,IAAKljB,KAAK7G,MAAMmnB,WACd,OAAO,KAGT,OAAQ+B,GACN,KAAKnC,GAAWwC,MA0Bd,OAvBc1iB,KAAK7G,MAAMmpB,aACvB,cAAC9O,GAAA,EAAD,CACEqP,QACE,gCACE,cAACzK,GAAA,EAAD,CAAMzf,KAAK,gBACX,cAAC,IAAD,CAAkBW,GAAG,YAAYC,eAAe,YAGpDF,UAAU,OAPZ,SASE,eAACma,GAAA,EAASF,KAAV,WACE,cAAC,GAAD,aAAYD,SAAUH,GAASM,UAAcxT,KAAK7G,QAClD,cAAC,GAAD,aAASka,SAAUH,GAASM,UAAcxT,KAAK7G,QAC/C,cAAC,GAAD,aAAcka,SAAUH,GAASM,UAAcxT,KAAK7G,aAIxD,qCACE,cAAC,GAAD,aAAYka,SAAUH,GAASI,MAAUtT,KAAK7G,QAC9C,cAAC,GAAD,aAASka,SAAUH,GAASI,MAAUtT,KAAK7G,QAC3C,cAAC,GAAD,aAAcka,SAAUH,GAASI,MAAUtT,KAAK7G,WAKtD,KAAK+mB,GAAW+C,MACd,OACE,qCACE,cAAC,GAAD,aAAY5P,SAAUH,GAASM,UAAcxT,KAAK7G,QAClD,cAAC,GAAD,aAASka,SAAUH,GAASM,UAAcxT,KAAK7G,QAC/C,cAAC,GAAD,aAAcka,SAAUH,GAASM,UAAcxT,KAAK7G,QACpD,cAACqa,GAAA,EAAS0P,QAAV,UA5NZ,+BAkOE,SAA0Bb,GACxB,OAAKriB,KAAK7G,MAAMgqB,kBAId,qCACE,cAAClB,GAAD,aACE5O,SACEgP,IAAenC,GAAW+C,MAAQ/P,GAASM,SAAWN,GAASI,MAE7DtT,KAAK7G,QAEVkpB,IAAenC,GAAW+C,MAAQ,cAACzP,GAAA,EAAS0P,QAAV,IAAuB,QAVrD,OApOb,yBAmPE,WACE,OACE,qCACE,cAAC1P,GAAA,EAAD,CACEqP,QACE,8BACE,cAACzK,GAAA,EAAD,CAAMzf,KAAK,cAGfU,UAAU,OACV+pB,KAAM,KAPR,SASE,eAAC5P,GAAA,EAASF,KAAV,WACGtT,KAAKqjB,UAAUnD,GAAW+C,OAC1BjjB,KAAKsjB,WAAWpD,GAAW+C,OAC3BjjB,KAAKujB,kBAAkBrD,GAAW+C,OAEnC,cAACzP,GAAA,EAASD,KAAV,CACEnW,KAAK,wCACLL,OAAO,SACP6jB,IAAI,sBAHN,SAKE,cAAC,IAAD,CACEtnB,GAAG,cACHC,eAAe,0BAKtByG,KAAK7G,MAAMmnB,WACV,cAAC,KAAD,CAAMzT,GAAG,IAAT,SAAc7M,KAAK+K,UAEnB/K,KAAK+K,aAnRf,0BAyRE,WACE,OACE,qCACG/K,KAAK7G,MAAMmnB,WAAa,cAAC,KAAD,CAAMzT,GAAG,IAAT,SAAc7M,KAAK+K,UAAkB,KAC7D/K,KAAKqjB,UAAUnD,GAAWwC,OAC1B1iB,KAAKsjB,WAAWpD,GAAWwC,OAC5B,eAACpP,GAAA,EAAKA,KAAN,CAAW5O,SAAS,QAApB,UACG1E,KAAKujB,kBAAkBrD,GAAWwC,OACnC,cAACpP,GAAA,EAAKC,KAAN,CACEnW,KAAK,wCACLL,OAAO,SACP6jB,IAAI,sBAHN,SAKE,cAAC,IAAD,CACEtnB,GAAG,cACHC,eAAe,6BAxS7B,oBAgTE,WACE,OACE,qCACE,cAAC+Z,GAAA,EAAD,CACEZ,GAAI9X,EACJgJ,GAAG,QACH4f,SAAS,MACTC,UAAQ,EACRxrB,MAAM,OACN8C,KAAK,QANP,SAQGiF,KAAK0jB,iBAER,cAACpQ,GAAA,EAAD,CACEZ,GAAI9X,EACJgJ,GAAG,QACH4f,SAAS,MACTC,UAAQ,EACRxrB,MAAM,OACN8C,KAAK,QANP,SAQGiF,KAAK2jB,uBArUhB,GAA4Brd,aCD5B,SAASsd,GAAazqB,GACpB,OACE,eAAC0qB,GAAA,EAAD,CAASC,UAAQ,EAACzqB,UAAU,QAA5B,UACE,cAACwqB,GAAA,EAAQlR,OAAT,UACE,cAAC,IAAD,CACErZ,GAAG,4BACHC,eAAgB,0BAGpB,4BAAIJ,EAAMyN,aAchB,SAASmd,GAAW5qB,GAClB,OACE,cAAC6qB,GAAA,EAAD,CAAQlf,KAAM3L,EAAM2L,KAAMgU,QAAS3f,EAAM8qB,UAAzC,SACE,eAACJ,GAAA,EAAD,CAASC,UAAQ,EAACzqB,UAAU,aAAa4qB,UAAW9qB,EAAM8qB,UAA1D,UACE,cAACJ,GAAA,EAAQlR,OAAT,UACE,cAAC,IAAD,CAAkBrZ,GAAG,cAAcC,eAAgB,YAErD,4BAAIJ,EAAMyN,eAsClB,SAASsd,GAAajM,GACpB,IAAMjG,EAASC,QAAkBgG,EAASjG,QACpClZ,EAAW,SAACH,GAChB,IAAMC,EAAQoZ,EAAOrZ,GACrB,MAAwB,kBAAVC,EAAqBA,OAAQC,GAGvCupB,EAAOtpB,EAAS,QAChBqrB,EAAa,IAAI/rB,IAAmC,CACxD,CAAC,YAAagC,EAAUgG,WACxB,CAAC,QAAShG,EAAUkG,SAGhBwQ,EAAOhY,EAAS,QAChB6R,EAAM7R,EAAS,OACfsrB,EAAoC,SAAzBtrB,EAAS,YACtBurB,OAAyCxrB,EAClB,aAAvBC,EAAS,UACXurB,EAAa,CACXjT,OAAQ5R,GAAe8kB,SACvB/I,SAAUziB,EAAS,cAEZgY,EACTuT,EAAa,CACXjT,OAAQ5R,GAAe+kB,SACvBzT,OACAlI,OAAQqP,EAASzC,OAASyC,EAASzC,MAAM5d,KACzCiG,OAAQoa,EAASzC,OAASyC,EAASzC,MAAM3X,QAElC8M,EACT0Z,EAAa,CACXjT,OAAQ5R,GAAeglB,WACvB7Z,MACAyF,WAAuC,UAA3BtX,EAAS,eAEdsrB,IACTC,EAAa,CAACjT,OAAQ5R,GAAeilB,WAGvC,IAAMrd,EAAOtO,EAAS,QAChB4rB,EAAYxgB,OAAOpL,EAAS,QAKlC,MAAO,CACLurB,aACAniB,UANgBkF,EACd,CAAC9N,GAAI8N,EAAMhF,WAAauiB,MAAMD,GAAyB,EAAZA,QAC3C7rB,EAMFoH,UAAWkkB,EAAWzrB,IAAI0pB,IAAShoB,EAAU8F,UAE7C0kB,cAAyC,UAA1B9rB,EAAS,aACxBwnB,WAAuC,UAA3BxnB,EAAS,gBAA8BsrB,EACnDtjB,gBAAwC,SAAvBhI,EAAS,UAC1BE,OAAQR,EAAawZ,K,SAtFpBkQ,O,qBAAAA,I,qBAAAA,I,iBAAAA,I,iCAAAA,I,gCAAAA,Q,SA+HC2C,G,4MAIJrP,MAAe,CACbA,MAAO0M,GAAS4C,QAChBxE,YAAY,EACZrgB,UAAW7F,EAAU8F,UACrB6kB,gBAAgB,EAChB/rB,OAAQhB,G,EAEVgtB,SAAkC,K,EAiCjBC,mBAAqB,IAAIjU,G,EACzBkU,oBAAsB,IAAI3T,G,EAC1B4T,mBAAqB,IAAIlF,GAAmB,EAAK9mB,MAAM0I,M,EACvDujB,mBAAqB,IAAI5T,G,EA4JlChQ,YAAc,SAACU,GAEjBA,EAAU5I,GAAG0R,WAAW2O,MAG5BjiB,EAAe,qBACf,EAAK2tB,UAAU,CACbje,KAAMlF,EAAU5I,GAChBgsB,IAAKpjB,EAAUE,e,EAIXwgB,QAAU,WAChBlrB,EAAe,SACf,EAAKstB,UAAY,EAAKA,SAAS3f,S,EAiBzByd,c,sBAAgB,sBAAA3lB,EAAA,yDACtBzF,EAAe,gBADO,cAGpB,EAAKstB,UAHe,qCAGI,EAAKA,SAASO,cAHlB,uDAKpB,EAAKR,eACH,EAAK5rB,MAAM0I,KAAKwK,cAAc,CAC5B/S,GAAI,mBACJC,eACE,6FATc,yD,EAgBhBwpB,c,sBAAgB,sBAAA5lB,EAAA,yDACtBzF,EAAe,gBADO,cAGpB,EAAKstB,UAHe,qCAGI,EAAKA,SAASQ,cAHlB,uDAKpB,EAAKT,eACH,EAAK5rB,MAAM0I,KAAKwK,cAAc,CAC5B/S,GAAI,mBACJC,eACE,6FATc,yD,EAgBhBypB,cAAgB,WACtBtrB,EAAe,gBACf,EAAKstB,UAAY,EAAKA,SAASS,e,EAGzBC,oBAAsB,WAC5B,EAAKtP,SACH3M,OAAOC,OAAO,GAAI,EAAK8L,MAAO,CAC5BuP,gBAAgB,M,EAKdY,eAAiB,WACvB,OAAQ,EAAKnQ,MAAMA,OACjB,KAAK0M,GAAS0D,cACd,KAAK1D,GAAS2D,aACZ,IAAMC,EAAgB,CACpB,CACEC,SAAU,EAAK5sB,MAAM0I,KAAKwK,cAAc,CACtC/S,GAAI,WACJC,eAAgB,SAElByI,OAAQ,kBACN,cAACsN,GAAD,CACE1G,OAAQ,EAAK4M,MAAM5d,KAAMgR,OACzBxB,KAAM,EAAKoO,MAAMtT,UAAW5I,OAIlC,CACEysB,SAAU,EAAK5sB,MAAM0I,KAAKwK,cAAc,CACtC/S,GAAI,eACJC,eAAgB,aAElByI,OAAQ,kBACN,cAAC9I,EAAD,CACEF,OAAQ,EAAKwc,MAAMxc,OACnBe,SAAU,SAACf,GACT,EAAKod,SAAS3M,OAAOC,OAAO,GAAI,EAAK8L,MAAO,CAACxc,YAC7C,EAAKqsB,UAAUtsB,EAAaC,UAMtC,OACE,sBAAKM,GAAG,UAAR,UACE,cAACyqB,GAAD,CACEjf,KAAM,EAAK0Q,MAAMuP,eACjBne,QAAS,EAAK4O,MAAMwQ,MACpB/B,UAAW,EAAKyB,sBAEjB,EAAKlQ,MAAMA,QAAU0M,GAAS2D,aAC7B,cAACI,GAAA,EAAD,CAAQC,QAAM,EAACnrB,KAAK,QAAQ1B,UAAU,iBACpC,KACJ,cAACkN,GAAD,CACE3O,KAAM,EAAK4d,MAAM5d,KAAMgY,UACvB1N,UAAW,EAAKsT,MAAMtT,UACtBjC,UAAW,EAAKuV,MAAMvV,UACtBuB,YAAa,EAAKA,YAClBV,gBAAiB,EAAK0U,MAAM1U,gBAC5BW,OAAQ,EAAK+T,MAAMxc,OAAOf,MAC1Bgc,IAAK,SAACA,GAAD,OAAU,EAAK+Q,SAAW/Q,KAEhC,EAAKuB,MAAMoP,cACV,cAAChqB,EAAD,CAAOgJ,GAAG,QAAQvK,UAAU,YAA5B,SACE,cAAC8sB,GAAA,EAAD,CAAKC,MAAON,MAEZ,QAIV,KAAK5D,GAASmE,MACZ,OAAO,cAACzC,GAAD,CAAchd,QAAS,EAAK4O,MAAMwQ,QAE3C,KAAK9D,GAAS4C,QACd,KAAK5C,GAASoE,QACZ,OAAO,cAACL,GAAA,EAAD,CAAQC,QAAM,EAACnrB,KAAK,Y,mDA1UjC,SACEmH,EACAqkB,GAjDJ,IAA6B/Q,EAAUgR,IAoDhCxmB,KAAKwV,MAAMtT,WACZlC,KAAKwV,MAAMtT,UAAU5I,KAAO4I,EAAU5I,IACtC0G,KAAKwV,MAAMtT,UAAWE,aAAeF,EAAUE,aAtDxBoT,EAuDNxV,KAAKwV,OAvDWgR,EAuDJD,IAnD1B9c,OAAOhC,QAAQ+e,GAASrb,MAC7B,mCAAE4K,EAAF,KAAOnd,EAAP,iBAA4BC,IAAVD,GAAuB4c,EAAMO,KAASnd,QAoDtDoH,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAACtT,aAAYqkB,M,sBAMjD,SAAiBP,GACfhmB,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAC5BA,MAAO0M,GAASmE,MAChBL,a,+BAKN,WACEhmB,KAAKymB,uB,uBAQP,SAAkBpC,EAA4BniB,GAC5C,IACGlC,KAAKwV,MAAM6O,YACZrkB,KAAKwV,MAAM6O,WAAWjT,SAAWiT,EAAWjT,OAG5C,OAAO,EAET,IAAMH,EAAY,CAACE,KAAMkT,EAAYniB,aAC/BwkB,EAAW,CACfvV,KAAMnR,KAAKwV,MAAM6O,WACjBniB,UAAWlC,KAAKwV,MAAMtT,WAExB,OAAQ+O,EAAUE,KAAKC,QACrB,KAAK5R,GAAe+kB,SAClB,OAAOvkB,KAAKilB,mBAAmB0B,UAC7B1V,EACAyV,EACA1mB,KAAKwV,MAAM5d,MAEf,KAAK4H,GAAeglB,WAClB,OAAOxkB,KAAKklB,oBAAoByB,UAC9B1V,EACAyV,EACA1mB,KAAKwV,MAAM5d,MAEf,KAAK4H,GAAe8kB,SAClB,OAAOtkB,KAAKmlB,mBAAmBwB,UAC7B1V,EACAyV,EACA1mB,KAAKwV,MAAM5d,MAEf,KAAK4H,GAAeilB,SAClB,OAAOzkB,KAAKolB,mBAAmBuB,UAC7B1V,EACAyV,EACA1mB,KAAKwV,MAAM5d,S,sBAKnB,SAAiBysB,EAA4BniB,GAC3C,OAAQmiB,EAAWjT,QACjB,KAAK5R,GAAe+kB,SAClB,OAAOvkB,KAAKilB,mBAAmB2B,SAAS,CAACzV,KAAMkT,EAAYniB,cAC7D,KAAK1C,GAAeglB,WAClB,OAAOxkB,KAAKklB,oBAAoB0B,SAAS,CAACzV,KAAMkT,EAAYniB,cAC9D,KAAK1C,GAAe8kB,SAClB,OAAOtkB,KAAKmlB,mBAAmByB,SAAS,CAACzV,KAAMkT,EAAYniB,cAC7D,KAAK1C,GAAeilB,SAClB,OAAOzkB,KAAKolB,mBAAmBwB,SAAS,CAACzV,KAAMkT,EAAYniB,iB,uEAIjE,sCAAA/E,EAAA,yDACuC,UAAjC6C,KAAK7G,MAAM8e,SAASlG,SAD1B,uBAEQ/R,KAAKwV,MAAMA,QAAU0M,GAAS4C,SAChC9kB,KAAKoW,SAAS3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAACA,MAAO0M,GAAS4C,WAHnE,8BAQQrsB,EAAOyrB,GAAalkB,KAAK7G,MAAM8e,WAE3BoM,WAVZ,gBAWIrkB,KAAK7G,MAAM+e,QAAQ5K,QAAQ,CAACyE,SAAU,MAX1C,0BAaI/R,KAAKwV,MAAMA,QAAU0M,GAAS4C,UAC9B9kB,KAAK2mB,UAAUluB,EAAK4rB,WAAY5rB,EAAKyJ,WAdzC,wBAiBIlC,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAC5BA,MAAO0M,GAASoE,QAChBjC,WAAY5rB,EAAK4rB,WACjBniB,UAAWzJ,EAAKyJ,UAChBoe,WAAY7nB,EAAK6nB,WACjBrgB,UAAWxH,EAAKwH,UAChBjH,OAAQP,EAAKO,UAxBrB,oBA4ByBgH,KAAK4mB,SAASnuB,EAAK4rB,WAAY5rB,EAAKyJ,WA5B7D,QA4BYtK,EA5BZ,OA8BMoI,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAC5BA,MAAO0M,GAAS0D,cAChBhuB,OACAsK,UAAWqN,GAAa3X,EAAKgY,UAAWnX,EAAKyJ,WAC7C0iB,cAAensB,EAAKmsB,iBAnC9B,mDAuCM5kB,KAAK6mB,UCjVkBb,EDiVM,EAAD,GCjVSnkB,EDiVD7B,KAAK7G,MAAM0I,KChV/CmkB,aAAiBtf,GAGhB7E,EAAKwK,cACV,CACE/S,GAAG,SAAD,OAAW0sB,EAAMrf,MACnBpN,eAAgBysB,EAAMpf,SAExBof,EAAMvtB,MAPCutB,EAAMpf,UDwSf,mCA0CI5G,KAAKwV,MAAMA,QAAU0M,GAAS0D,eAC9B5lB,KAAKwV,MAAMA,QAAU0M,GAAS2D,aA3ClC,oBA8CU3jB,EAAYqN,GAChBvP,KAAKwV,MAAM5d,KAAMgY,UACjBnX,EAAKyJ,WAED4kB,EACJruB,EAAK4rB,WAAWjT,SAAW5R,GAAe8kB,YACxCtkB,KAAKwV,MAAMtT,WAAalC,KAAKwV,MAAMtT,UAAU5I,KAAO4I,EAAU5I,IAClE0G,KAAK+mB,cAAc7kB,EAAW,CAC5BjC,UAAWxH,EAAKwH,UAChBuV,MAAOsR,EACH5E,GAAS2D,aACT3D,GAAS0D,iBAEXkB,EA3DR,4CA6D2BpL,GAAajjB,EAAKyJ,UAAW5I,GAAI0G,KAAK7G,MAAM0I,MA7DvE,QA6DcjK,EA7Dd,OA8DcsK,EAAYqN,GAAa3X,EAAKgY,UAAWnX,EAAKyJ,WACpDlC,KAAKoW,SACH3M,OAAOC,OAAO,GAAI1J,KAAKwV,MAAO,CAC5BA,MAAO0M,GAAS0D,cAChBhuB,OACAsK,eAnEZ,mDAuEQlC,KAAK+kB,eACH/kB,KAAK7G,MAAM0I,KAAKwK,cACd,CACE/S,GAAI,kCACJC,eAAgB,8CAElB,CAACysB,MAAK,OAER,CAACxQ,MAAO0M,GAAS0D,gBA/E3B,kCC1SK,IAAwBI,EAAcnkB,ID0S3C,8B,6EAsFA,SAAkBpJ,GAChB,IAAMwf,EAAWjY,KAAK7G,MAAM8e,SACtBjG,EAASC,QAAkBgG,EAASjG,QAC1C,IAAK,IAAM+D,KAAOtd,EAChBuZ,EAAO+D,GAAOtd,EAAKsd,GAErBkC,EAASjG,OAASC,YAAsBD,GACxChS,KAAK7G,MAAM+e,QAAQpN,KAAKmN,K,4BAwB1B,SAAuBrR,EAAiB2f,GACtCvmB,KAAKoW,SACH3M,OAAOC,OACL,GACA1J,KAAKwV,MACL,CACEuP,gBAAgB,EAChBiB,MAAOpf,GAET2f,M,oBAuHN,WAAU,IAAD,OACP,OACE,qCACE,cAAC,KAAD,CACEvkB,OAAQ,SAAC7I,GAAD,eACN,cAAC,GAAD,2BACMA,GADN,IAEEvB,KAAM,EAAK4d,MAAM5d,MAAQ,EAAK4d,MAAM5d,KAAKgY,UACzC6S,wBACE,YAAKjN,MAAM6O,kBAAX,eAAuBjT,UAAW5R,GAAe8kB,SAEnDhC,aAC2C,UAAzC,EAAKnpB,MAAM+e,QAAQD,SAASlG,WAC3B,EAAKyD,MAAMA,QAAU0M,GAAS0D,eAC7B,EAAKpQ,MAAMA,QAAU0M,GAAS2D,cAElCvF,WAAY,EAAK9K,MAAM8K,WACvBqC,cAAe,CACbnhB,YAAa,EAAKA,YAClBohB,QAAS,EAAKA,QACdE,cAAe,EAAKA,cACpBC,cAAe,EAAKA,cACpBC,cAAe,EAAKA,eAEtBG,mBACE,YAAK3N,MAAM6O,kBAAX,eAAuBjT,UAAW5R,GAAe8kB,eAKzD,eAAC,KAAD,WACE,cAAC,KAAD,CAAO0C,OAAK,EAACC,KAAK,IAAIC,UAAWhV,KACjC,cAAC,KAAD,CAAO8U,OAAK,EAACC,KAAK,QAAQjlB,OAAQhC,KAAK2lB,iBACvC,cAAC,KAAD,CAAU9Y,GAAI,gB,GA7XGvG,IAAM6gB,WAoYpBC,GAAM5gB,YAAWqe,I,oBE7jBxBwC,I,qBAAW,CACfC,GAAIC,EACJC,GAAIC,EACJC,GAAIC,EACJC,GAAIC,EACJC,GAAIC,EACJC,GAAIC,IAEAC,GAAWC,UAAUD,UAAYC,UAAUD,SAAS1Z,MAAM,QAAQ,GAElE4Z,GAAUC,eAEZD,IAA4B,OAAjBA,GAAQzvB,KACrB2vB,SACE,qIAIA3pB,SAASyF,cAAc,UAGzBkkB,SACE,cAAC,KAAD,CAAc1mB,OAAQsmB,GAAUb,SAAUA,GAASa,IAAnD,SACE,eAACrtB,EAAD,WACE,gCAAQH,IACR,cAAC,KAAD,UACE,cAAC,KAAD,CAAOwsB,UAAWE,YAIxBzoB,SAASyF,cAAc,Y","file":"static/js/main.edee0e83.chunk.js","sourcesContent":["/** Sends an event to Google Analytics. */\nexport function analyticsEvent(action: string, data?: any) {\n  (window as any).gtag('event', action, data);\n}\n","import {Checkbox, Form} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {ParsedQuery} from 'query-string';\n\nexport enum ChartColors {\n  NO_COLOR,\n  COLOR_BY_SEX,\n  COLOR_BY_GENERATION,\n}\n\nexport interface Config {\n  color: ChartColors;\n}\n\nexport const DEFALUT_CONFIG: Config = {\n  color: ChartColors.COLOR_BY_GENERATION,\n};\n\nconst COLOR_ARG = new Map<string, ChartColors>([\n  ['n', ChartColors.NO_COLOR],\n  ['g', ChartColors.COLOR_BY_GENERATION],\n  ['s', ChartColors.COLOR_BY_SEX],\n]);\nconst COLOR_ARG_INVERSE = new Map<ChartColors, string>();\nCOLOR_ARG.forEach((v, k) => COLOR_ARG_INVERSE.set(v, k));\n\nexport function argsToConfig(args: ParsedQuery<any>): Config {\n  const getParam = (name: string) => {\n    const value = args[name];\n    return typeof value === 'string' ? value : undefined;\n  };\n\n  return {\n    color: COLOR_ARG.get(getParam('c') ?? '') ?? DEFALUT_CONFIG.color,\n  };\n}\n\nexport function configToArgs(config: Config): ParsedQuery<any> {\n  return {c: COLOR_ARG_INVERSE.get(config.color)};\n}\n\nexport function ConfigPanel(props: {\n  config: Config;\n  onChange: (config: Config) => void;\n}) {\n  return (\n    <>\n      <Form className=\"ui segments details\">\n        <div className=\"ui segment\">\n          <div className=\"ui sub header\">\n            <FormattedMessage id=\"config.colors\" defaultMessage=\"Colors\" />\n          </div>\n          <Form.Field className=\"no-margin\">\n            <Checkbox\n              radio\n              label={\n                <FormattedMessage\n                  tagName=\"label\"\n                  id=\"config.colors.NO_COLOR\"\n                  defaultMessage=\"none\"\n                />\n              }\n              name=\"checkboxRadioGroup\"\n              value=\"none\"\n              checked={props.config.color === ChartColors.NO_COLOR}\n              onClick={() => props.onChange({color: ChartColors.NO_COLOR})}\n            />\n          </Form.Field>\n          <Form.Field className=\"no-margin\">\n            <Checkbox\n              radio\n              label={\n                <FormattedMessage\n                  tagName=\"label\"\n                  id=\"config.colors.COLOR_BY_GENERATION\"\n                  defaultMessage=\"by generation\"\n                />\n              }\n              name=\"checkboxRadioGroup\"\n              value=\"generation\"\n              checked={props.config.color === ChartColors.COLOR_BY_GENERATION}\n              onClick={() =>\n                props.onChange({color: ChartColors.COLOR_BY_GENERATION})\n              }\n            />\n          </Form.Field>\n          <Form.Field className=\"no-margin\">\n            <Checkbox\n              radio\n              label={\n                <FormattedMessage\n                  tagName=\"label\"\n                  id=\"config.colors.COLOR_BY_SEX\"\n                  defaultMessage=\"by sex\"\n                />\n              }\n              name=\"checkboxRadioGroup\"\n              value=\"gender\"\n              checked={props.config.color === ChartColors.COLOR_BY_SEX}\n              onClick={() => props.onChange({color: ChartColors.COLOR_BY_SEX})}\n            />\n          </Form.Field>\n        </div>\n      </Form>\n    </>\n  );\n}\n","import * as React from 'react';\nimport {ChartColors} from './config';\nimport {injectIntl, WrappedComponentProps} from 'react-intl';\nimport {interpolateNumber} from 'd3-interpolate';\nimport {max, min} from 'd3-array';\nimport {Media} from './util/media';\nimport {saveAs} from 'file-saver';\nimport {select, Selection} from 'd3-selection';\nimport 'd3-transition';\nimport {\n  D3ZoomEvent,\n  zoom,\n  ZoomBehavior,\n  ZoomedElementBaseType,\n  zoomTransform,\n} from 'd3-zoom';\nimport {\n  JsonGedcomData,\n  ChartHandle,\n  IndiInfo,\n  createChart,\n  DetailedRenderer,\n  HourglassChart,\n  RelativesChart,\n  FancyChart,\n  CircleRenderer,\n  ChartColors as TopolaChartColors,\n} from 'topola';\n\n/** How much to zoom when using the +/- buttons. */\nconst ZOOM_FACTOR = 1.3;\n\n/**\n * Called when the view is dragged with the mouse.\n *\n * @param size the size of the chart\n */\nfunction zoomed(\n  size: [number, number],\n  event: D3ZoomEvent<ZoomedElementBaseType, unknown>,\n) {\n  const parent = select('#svgContainer').node() as Element;\n\n  const scale = event.transform.k;\n  const offsetX = max([0, (parent.clientWidth - size[0] * scale) / 2]);\n  const offsetY = max([0, (parent.clientHeight - size[1] * scale) / 2]);\n  select('#chartSvg')\n    .attr('width', size[0] * scale)\n    .attr('height', size[1] * scale)\n    .attr('transform', `translate(${offsetX}, ${offsetY})`);\n  select('#chart').attr('transform', `scale(${scale})`);\n\n  parent.scrollLeft = -event.transform.x;\n  parent.scrollTop = -event.transform.y;\n}\n\n/** Called when the scrollbars are used. */\nfunction scrolled() {\n  const parent = select('#svgContainer').node() as Element;\n  const x = parent.scrollLeft + parent.clientWidth / 2;\n  const y = parent.scrollTop + parent.clientHeight / 2;\n  const scale = zoomTransform(parent).k;\n  select(parent).call(zoom().translateTo, x / scale, y / scale);\n}\n\n/** Loads blob as data URL. */\nfunction loadAsDataUrl(blob: Blob): Promise<string> {\n  const reader = new FileReader();\n  reader.readAsDataURL(blob);\n  return new Promise<string>((resolve, reject) => {\n    reader.onload = (e) => resolve((e.target as FileReader).result as string);\n  });\n}\n\nasync function inlineImage(image: SVGImageElement) {\n  const href = image.href.baseVal;\n  if (!href) {\n    return;\n  }\n  try {\n    const response = await fetch(href);\n    const blob = await response.blob();\n    const dataUrl = await loadAsDataUrl(blob);\n    image.href.baseVal = dataUrl;\n  } catch (e) {\n    console.warn('Failed to load image:', e);\n  }\n}\n\n/**\n * Fetches all images in the SVG and replaces them with inlined images as data\n * URLs. Images are replaced in place. The replacement is done, the returned\n * promise is resolved.\n */\nasync function inlineImages(svg: Element): Promise<void> {\n  const images = Array.from(svg.getElementsByTagName('image'));\n  await Promise.all(images.map(inlineImage));\n}\n\n/** Loads a blob into an image object. */\nfunction loadImage(blob: Blob): Promise<HTMLImageElement> {\n  const image = new Image();\n  image.src = URL.createObjectURL(blob);\n  return new Promise<HTMLImageElement>((resolve, reject) => {\n    image.addEventListener('load', () => resolve(image));\n  });\n}\n\n/** Draw image on a new canvas and return the canvas. */\nfunction drawOnCanvas(image: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  // Scale image for better quality.\n  canvas.width = image.width * 2;\n  canvas.height = image.height * 2;\n\n  const ctx = canvas.getContext('2d')!;\n  const oldFill = ctx.fillStyle;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = oldFill;\n\n  ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n  return canvas;\n}\n\nfunction canvasToBlob(canvas: HTMLCanvasElement, type: string) {\n  return new Promise<Blob>((resolve, reject) => {\n    canvas.toBlob((blob) => {\n      if (blob) {\n        resolve(blob);\n      } else {\n        reject();\n      }\n    }, type);\n  });\n}\n\n/** Supported chart types. */\nexport enum ChartType {\n  Hourglass,\n  Relatives,\n  Fancy,\n}\n\nconst chartColors = new Map<ChartColors, TopolaChartColors>([\n  [ChartColors.NO_COLOR, TopolaChartColors.NO_COLOR],\n  [ChartColors.COLOR_BY_GENERATION, TopolaChartColors.COLOR_BY_GENERATION],\n  [ChartColors.COLOR_BY_SEX, TopolaChartColors.COLOR_BY_SEX],\n]);\n\nexport interface ChartProps {\n  data: JsonGedcomData;\n  selection: IndiInfo;\n  chartType: ChartType;\n  onSelection: (indiInfo: IndiInfo) => void;\n  freezeAnimation?: boolean;\n  colors?: ChartColors;\n}\n\n/** Component showing the genealogy chart and handling transition animations. */\nexport class ChartComponent extends React.PureComponent<\n  ChartProps & WrappedComponentProps,\n  {}\n> {\n  private chart?: ChartHandle;\n  /** Animation is in progress. */\n  private animating = false;\n  /** Rendering is required after the current animation finishes. */\n  private rerenderRequired = false;\n  /** The d3 zoom behavior object. */\n  private zoomBehavior?: ZoomBehavior<Element, any>;\n\n  private getChartType() {\n    switch (this.props.chartType) {\n      case ChartType.Hourglass:\n        return HourglassChart;\n      case ChartType.Relatives:\n        return RelativesChart;\n      case ChartType.Fancy:\n        return FancyChart;\n      default:\n        // Fall back to hourglass chart.\n        return HourglassChart;\n    }\n  }\n\n  private getRendererType() {\n    switch (this.props.chartType) {\n      case ChartType.Fancy:\n        return CircleRenderer;\n      default:\n        // Use DetailedRenderer by default.\n        return DetailedRenderer;\n    }\n  }\n\n  private zoom(factor: number) {\n    const parent = select('#svgContainer') as Selection<Element, any, any, any>;\n    this.zoomBehavior!.scaleBy(parent, factor);\n  }\n\n  /**\n   * Renders the chart or performs a transition animation to a new state.\n   * If indiInfo is not given, it means that it is the initial render and no\n   * animation is performed.\n   */\n  private renderChart(\n    args: {initialRender: boolean; resetPosition: boolean} = {\n      initialRender: false,\n      resetPosition: false,\n    },\n  ) {\n    // Wait for animation to finish if animation is in progress.\n    if (!args.initialRender && this.animating) {\n      this.rerenderRequired = true;\n      return;\n    }\n\n    // Freeze changing selection after initial rendering.\n    if (!args.initialRender && this.props.freezeAnimation) {\n      return;\n    }\n\n    if (args.initialRender) {\n      (select('#chart').node() as HTMLElement).innerHTML = '';\n      this.chart = createChart({\n        json: this.props.data,\n        chartType: this.getChartType(),\n        renderer: this.getRendererType(),\n        svgSelector: '#chart',\n        indiCallback: (info) => this.props.onSelection(info),\n        colors: chartColors.get(this.props.colors!),\n        animate: true,\n        updateSvgSize: false,\n        locale: this.props.intl.locale,\n      });\n    } else {\n      this.chart!.setData(this.props.data);\n    }\n    const chartInfo = this.chart!.render({\n      startIndi: this.props.selection.id,\n      baseGeneration: this.props.selection.generation,\n    });\n    const svg = select('#chartSvg');\n    const parent = select('#svgContainer').node() as Element;\n\n    const scale = zoomTransform(parent).k;\n    const zoomOutFactor = min([\n      1,\n      scale,\n      parent.clientWidth / chartInfo.size[0],\n      parent.clientHeight / chartInfo.size[1],\n    ])!;\n    const extent: [number, number] = [max([0.1, zoomOutFactor])!, 2];\n\n    this.zoomBehavior = zoom()\n      .scaleExtent(extent)\n      .translateExtent([[0, 0], chartInfo.size])\n      .on('zoom', (event) => zoomed(chartInfo.size, event));\n    select(parent).on('scroll', scrolled).call(this.zoomBehavior);\n\n    const scrollTopTween = (scrollTop: number) => {\n      return () => {\n        const i = interpolateNumber(parent.scrollTop, scrollTop);\n        return (t: number) => {\n          parent.scrollTop = i(t);\n        };\n      };\n    };\n    const scrollLeftTween = (scrollLeft: number) => {\n      return () => {\n        const i = interpolateNumber(parent.scrollLeft, scrollLeft);\n        return (t: number) => {\n          parent.scrollLeft = i(t);\n        };\n      };\n    };\n\n    const dx = parent.clientWidth / 2 - chartInfo.origin[0] * scale;\n    const dy = parent.clientHeight / 2 - chartInfo.origin[1] * scale;\n    const offsetX = max([\n      0,\n      (parent.clientWidth - chartInfo.size[0] * scale) / 2,\n    ]);\n    const offsetY = max([\n      0,\n      (parent.clientHeight - chartInfo.size[1] * scale) / 2,\n    ]);\n    const svgTransition = svg.transition().delay(200).duration(500);\n    const transition = args.initialRender ? svg : svgTransition;\n    transition\n      .attr('transform', `translate(${offsetX}, ${offsetY})`)\n      .attr('width', chartInfo.size[0] * scale)\n      .attr('height', chartInfo.size[1] * scale);\n    if (args.resetPosition) {\n      if (args.initialRender) {\n        parent.scrollLeft = -dx;\n        parent.scrollTop = -dy;\n      } else {\n        svgTransition\n          .tween('scrollLeft', scrollLeftTween(-dx))\n          .tween('scrollTop', scrollTopTween(-dy));\n      }\n    }\n\n    // After the animation is finished, rerender the chart if required.\n    this.animating = true;\n    chartInfo.animationPromise.then(() => {\n      this.animating = false;\n      if (this.rerenderRequired) {\n        this.rerenderRequired = false;\n        this.renderChart({initialRender: false, resetPosition: false});\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.renderChart({initialRender: true, resetPosition: true});\n  }\n\n  componentDidUpdate(prevProps: ChartProps) {\n    const initialRender =\n      this.props.chartType !== prevProps.chartType ||\n      this.props.colors !== prevProps.colors;\n    const resetPosition = this.props.chartType !== prevProps.chartType;\n    this.renderChart({initialRender, resetPosition});\n  }\n\n  render() {\n    return (\n      <div id=\"svgContainer\">\n        <Media at=\"large\" className=\"zoom\">\n          <button className=\"zoom-in\" onClick={() => this.zoom(ZOOM_FACTOR)}>\n            +\n          </button>\n          <button\n            className=\"zoom-out\"\n            onClick={() => this.zoom(1 / ZOOM_FACTOR)}\n          >\n            −\n          </button>\n        </Media>\n        <svg id=\"chartSvg\">\n          <g id=\"chart\" />\n        </svg>\n      </div>\n    );\n  }\n\n  /** Return a copy of the SVG chart but without scaling and positioning. */\n  private getStrippedSvg() {\n    const svg = document.getElementById('chartSvg')!.cloneNode(true) as Element;\n\n    svg.removeAttribute('transform');\n    const parent = select('#svgContainer').node() as Element;\n    const scale = zoomTransform(parent).k;\n    svg.setAttribute(\n      'width',\n      String(Number(svg.getAttribute('width')) / scale),\n    );\n    svg.setAttribute(\n      'height',\n      String(Number(svg.getAttribute('height')) / scale),\n    );\n    svg.querySelector('#chart')!.removeAttribute('transform');\n\n    return svg;\n  }\n\n  private getSvgContents() {\n    return new XMLSerializer().serializeToString(this.getStrippedSvg());\n  }\n\n  private async getSvgContentsWithInlinedImages() {\n    const svg = this.getStrippedSvg();\n    await inlineImages(svg);\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  /** Shows the print dialog to print the currently displayed chart. */\n  print() {\n    const printWindow = document.createElement('iframe');\n    printWindow.style.position = 'absolute';\n    printWindow.style.top = '-1000px';\n    printWindow.style.left = '-1000px';\n    printWindow.onload = () => {\n      printWindow.contentDocument!.open();\n      printWindow.contentDocument!.write(this.getSvgContents());\n      printWindow.contentDocument!.close();\n      // Doesn't work on Firefox without the setTimeout.\n      setTimeout(() => {\n        printWindow.contentWindow!.focus();\n        printWindow.contentWindow!.print();\n        printWindow.parentNode!.removeChild(printWindow);\n      }, 500);\n    };\n    document.body.appendChild(printWindow);\n  }\n\n  async downloadSvg() {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    saveAs(blob, 'topola.svg');\n  }\n\n  private async drawOnCanvas(): Promise<HTMLCanvasElement> {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    return await drawOnCanvas(await loadImage(blob));\n  }\n\n  async downloadPng() {\n    const canvas = await this.drawOnCanvas();\n    const blob = await canvasToBlob(canvas, 'image/png');\n    saveAs(blob, 'topola.png');\n  }\n\n  async downloadPdf() {\n    // Lazy load jspdf.\n    const {default: jspdf} = await import('jspdf');\n    const canvas = await this.drawOnCanvas();\n    const doc = new jspdf({\n      orientation: canvas.width > canvas.height ? 'l' : 'p',\n      unit: 'pt',\n      format: [canvas.width, canvas.height],\n    });\n    doc.addImage(canvas, 'PNG', 0, 0, canvas.width, canvas.height, 'NONE');\n    doc.save('topola.pdf');\n  }\n}\nexport const Chart = injectIntl(ChartComponent, {forwardRef: true});\n","import {createMedia} from '@artsy/fresnel';\n\n/** Defines the breakpoints at which to show different UI variants. */\nconst AppMedia = createMedia({\n  breakpoints: {\n    small: 320,\n    large: 768,\n  },\n});\nexport const mediaStyles = AppMedia.createMediaStyle();\nexport const {Media, MediaContextProvider} = AppMedia;\n","import {IndiInfo} from 'topola';\nimport {TopolaData} from '../util/gedcom_util';\n\n/** Supported data sources. */\nexport enum DataSourceEnum {\n  UPLOADED,\n  GEDCOM_URL,\n  WIKITREE,\n  EMBEDDED,\n}\n\n/** Source specification together with individual selection. */\nexport interface SourceSelection<SourceSpecT> {\n  spec: SourceSpecT;\n  selection?: IndiInfo;\n}\n\n/** Interface encapsulating functions specific for a data source. */\nexport interface DataSource<SourceSpecT> {\n  /**\n   * Returns true if the application is now loading a completely new data set\n   * and the existing one should be wiped.\n   */\n  isNewData(\n    newSource: SourceSelection<SourceSpecT>,\n    oldSource: SourceSelection<SourceSpecT>,\n    data?: TopolaData,\n  ): boolean;\n  /** Loads data from the data source. */\n  loadData(spec: SourceSelection<SourceSpecT>): Promise<TopolaData>;\n}\n","/** Error class adding an error code used for i18n. */\nexport class TopolaError extends Error {\n  constructor(\n    public readonly code: string,\n    message: string,\n    public readonly args: {[key: string]: string} = {},\n  ) {\n    super(message);\n  }\n}\n","import {GedcomEntry, parse as parseGedcom} from 'parse-gedcom';\nimport {TopolaError} from './error';\nimport {\n  JsonFam,\n  JsonGedcomData,\n  JsonIndi,\n  gedcomEntriesToJson,\n  JsonImage,\n  JsonEvent,\n} from 'topola';\n\nexport interface GedcomData {\n  /** The HEAD entry. */\n  head: GedcomEntry;\n  /** INDI entries mapped by id. */\n  indis: {[key: string]: GedcomEntry};\n  /** FAM entries mapped by id. */\n  fams: {[key: string]: GedcomEntry};\n  /** Other entries mapped by id, e.g. NOTE, SOUR. */\n  other: {[key: string]: GedcomEntry};\n}\n\nexport interface TopolaData {\n  chartData: JsonGedcomData;\n  gedcom: GedcomData;\n}\n\n/**\n * Returns the identifier extracted from a pointer string.\n * E.g. '@I123@' -> 'I123'\n */\nexport function pointerToId(pointer: string): string {\n  return pointer.substring(1, pointer.length - 1);\n}\n\nexport function idToIndiMap(data: JsonGedcomData): Map<string, JsonIndi> {\n  const map = new Map<string, JsonIndi>();\n  data.indis.forEach((indi) => {\n    map.set(indi.id, indi);\n  });\n  return map;\n}\n\nexport function idToFamMap(data: JsonGedcomData): Map<string, JsonFam> {\n  const map = new Map<string, JsonFam>();\n  data.fams.forEach((fam) => {\n    map.set(fam.id, fam);\n  });\n  return map;\n}\n\nfunction prepareGedcom(entries: GedcomEntry[]): GedcomData {\n  const head = entries.find((entry) => entry.tag === 'HEAD')!;\n  const indis: {[key: string]: GedcomEntry} = {};\n  const fams: {[key: string]: GedcomEntry} = {};\n  const other: {[key: string]: GedcomEntry} = {};\n  entries.forEach((entry) => {\n    if (entry.tag === 'INDI') {\n      indis[pointerToId(entry.pointer)] = entry;\n    } else if (entry.tag === 'FAM') {\n      fams[pointerToId(entry.pointer)] = entry;\n    } else if (entry.pointer) {\n      other[pointerToId(entry.pointer)] = entry;\n    }\n  });\n  return {head, indis, fams, other};\n}\n\nfunction strcmp(a: string, b: string) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/** Compares dates of the given events. */\nfunction compareDates(\n  event1: JsonEvent | undefined,\n  event2: JsonEvent | undefined,\n): number {\n  const date1 =\n    event1 && (event1.date || (event1.dateRange && event1.dateRange.from));\n  const date2 =\n    event2 && (event2.date || (event2.dateRange && event2.dateRange.from));\n  if (!date1 || !date1.year || !date2 || !date2.year) {\n    return 0;\n  }\n  if (date1.year !== date2.year) {\n    return date1.year - date2.year;\n  }\n  if (!date1.month || !date2.month) {\n    return 0;\n  }\n  if (date1.month !== date2.month) {\n    return date1.month - date2.month;\n  }\n  if (date1.day && date2.day && date1.day !== date2.day) {\n    return date1.month - date2.month;\n  }\n  return 0;\n}\n\n/** Birth date comparator for individuals. */\nfunction birthDatesComparator(gedcom: JsonGedcomData) {\n  const indiMap = idToIndiMap(gedcom);\n\n  return (indiId1: string, indiId2: string) => {\n    const indi1: JsonIndi | undefined = indiMap.get(indiId1);\n    const indi2: JsonIndi | undefined = indiMap.get(indiId2);\n    return (\n      compareDates(indi1 && indi1.birth, indi2 && indi2.birth) ||\n      strcmp(indiId1, indiId2)\n    );\n  };\n}\n\n/** Marriage date comparator for families. */\nfunction marriageDatesComparator(gedcom: JsonGedcomData) {\n  const famMap = idToFamMap(gedcom);\n\n  return (famId1: string, famId2: string) => {\n    const fam1: JsonFam | undefined = famMap.get(famId1);\n    const fam2: JsonFam | undefined = famMap.get(famId2);\n    return (\n      compareDates(fam1 && fam1.marriage, fam2 && fam2.marriage) ||\n      strcmp(famId1, famId2)\n    );\n  };\n}\n\n/**\n * Sorts children by birth date in the given family.\n * Does not modify the input objects.\n */\nfunction sortFamilyChildren(\n  fam: JsonFam,\n  comparator: (id1: string, id2: string) => number,\n): JsonFam {\n  if (!fam.children) {\n    return fam;\n  }\n  const newChildren = fam.children.sort(comparator);\n  return Object.assign({}, fam, {children: newChildren});\n}\n\n/**\n * Sorts children by birth date.\n * Does not modify the input object.\n */\nfunction sortChildren(gedcom: JsonGedcomData): JsonGedcomData {\n  const comparator = birthDatesComparator(gedcom);\n  const newFams = gedcom.fams.map((fam) => sortFamilyChildren(fam, comparator));\n  return Object.assign({}, gedcom, {fams: newFams});\n}\n\n/**\n * Sorts spouses by marriage date.\n * Does not modify the input objects.\n */\nfunction sortIndiSpouses(\n  indi: JsonIndi,\n  comparator: (id1: string, id2: string) => number,\n): JsonFam {\n  if (!indi.fams) {\n    return indi;\n  }\n  const newFams = indi.fams.sort(comparator);\n  return Object.assign({}, indi, {fams: newFams});\n}\n\nfunction sortSpouses(gedcom: JsonGedcomData): JsonGedcomData {\n  const comparator = marriageDatesComparator(gedcom);\n  const newIndis = gedcom.indis.map((indi) =>\n    sortIndiSpouses(indi, comparator),\n  );\n  return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/** Sorts children and spouses. */\nexport function normalizeGedcom(gedcom: JsonGedcomData): JsonGedcomData {\n  return sortSpouses(sortChildren(gedcom));\n}\n\nconst IMAGE_EXTENSIONS = ['.jpg', '.png', '.gif'];\n\n/** Returns true if the given file name has a known image extension. */\nfunction isImageFile(fileName: string): boolean {\n  const lowerName = fileName.toLowerCase();\n  return IMAGE_EXTENSIONS.some((ext) => lowerName.endsWith(ext));\n}\n\n/**\n * Removes images that are not HTTP links or do not have known image extensions.\n * Does not modify the input object.\n */\nfunction filterImage(indi: JsonIndi, images: Map<string, string>): JsonIndi {\n  if (!indi.images || indi.images.length === 0) {\n    return indi;\n  }\n  const newImages: JsonImage[] = [];\n  indi.images.forEach((image) => {\n    const fileName = image.url.match(/[^/\\\\]*$/)![0];\n    // If the image file has been loaded into memory, use it.\n    if (images.has(fileName)) {\n      newImages.push({url: images.get(fileName)!, title: image.title});\n    } else if (image.url.startsWith('http') && isImageFile(image.url)) {\n      newImages.push(image);\n    }\n  });\n  return Object.assign({}, indi, {images: newImages});\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImages(\n  gedcom: JsonGedcomData,\n  images: Map<string, string>,\n): JsonGedcomData {\n  const newIndis = gedcom.indis.map((indi) => filterImage(indi, images));\n  return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/**\n * Converts GEDCOM file into JSON data performing additional transformations:\n * - sort children by birth date\n * - remove images that are not HTTP links and aren't mapped in `images`.\n *\n * @param images Map from file name to image URL. This is used to pass in\n *   uploaded images.\n */\nexport function convertGedcom(\n  gedcom: string,\n  images: Map<string, string>,\n): TopolaData {\n  const entries = parseGedcom(gedcom);\n  const json = gedcomEntriesToJson(entries);\n  if (\n    !json ||\n    !json.indis ||\n    !json.indis.length ||\n    !json.fams ||\n    !json.fams.length\n  ) {\n    throw new TopolaError('GEDCOM_READ_FAILED', 'Failed to read GEDCOM file');\n  }\n\n  return {\n    chartData: filterImages(normalizeGedcom(json), images),\n    gedcom: prepareGedcom(entries),\n  };\n}\n\nexport function getSoftware(head: GedcomEntry): string | null {\n  const sour =\n    head && head.tree && head.tree.find((entry) => entry.tag === 'SOUR');\n  const name =\n    sour && sour.tree && sour.tree.find((entry) => entry.tag === 'NAME');\n  return (name && name.data) || null;\n}\n","import {Date as TopolaDate, DateOrRange, DateRange, getDate} from 'topola';\nimport {IntlShape} from 'react-intl';\n\nconst DATE_QUALIFIERS = new Map([\n  ['abt', 'about'],\n  ['cal', 'calculated'],\n  ['est', 'estimated'],\n]);\n\nfunction formatDate(date: TopolaDate, intl: IntlShape) {\n  const hasDay = date.day !== undefined;\n  const hasMonth = date.month !== undefined;\n  const hasYear = date.year !== undefined;\n  if (!hasDay && !hasMonth && !hasYear) {\n    return date.text || '';\n  }\n  const dateObject = new Date(\n    hasYear ? date.year! : 0,\n    hasMonth ? date.month! - 1 : 0,\n    hasDay ? date.day! : 1,\n  );\n\n  const qualifier = date.qualifier && date.qualifier.toLowerCase();\n  const translatedQualifier =\n    qualifier &&\n    intl.formatMessage({\n      id: `date.${qualifier}`,\n      defaultMessage: DATE_QUALIFIERS.get(qualifier) || qualifier,\n    });\n\n  const formatOptions: Intl.DateTimeFormatOptions = {\n    day: hasDay ? 'numeric' : undefined,\n    month: hasMonth ? 'long' : undefined,\n    year: hasYear ? 'numeric' : undefined,\n  };\n  const translatedDate = new Intl.DateTimeFormat(\n    intl.locale,\n    formatOptions,\n  ).format(dateObject);\n\n  return [translatedQualifier, translatedDate].join(' ');\n}\n\nfunction formatDateRage(dateRange: DateRange, intl: IntlShape) {\n  const fromDate = dateRange.from;\n  const toDate = dateRange.to;\n  const translatedFromDate = fromDate && formatDate(fromDate, intl);\n  const translatedToDate = toDate && formatDate(toDate, intl);\n  if (translatedFromDate && translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.between',\n        defaultMessage: 'between {from} and {to}',\n      },\n      {from: translatedFromDate, to: translatedToDate},\n    );\n  }\n  if (translatedFromDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.after',\n        defaultMessage: 'after {from}',\n      },\n      {from: translatedFromDate},\n    );\n  }\n  if (translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.before',\n        defaultMessage: 'before {to}',\n      },\n      {to: translatedToDate},\n    );\n  }\n  return '';\n}\n\n/** Formats a DateOrRange object. */\nexport function formatDateOrRange(\n  dateOrRange: DateOrRange | undefined,\n  intl: IntlShape,\n): string {\n  if (!dateOrRange) {\n    return '';\n  }\n  if (dateOrRange.date) {\n    return formatDate(dateOrRange.date, intl);\n  }\n  if (dateOrRange.dateRange) {\n    return formatDateRage(dateOrRange.dateRange, intl);\n  }\n  return '';\n}\n\n/** Formats a date given in GEDCOM format. */\nexport function translateDate(gedcomDate: string, intl: IntlShape): string {\n  return formatDateOrRange(getDate(gedcomDate), intl);\n}\n","import * as React from 'react';\nimport flatMap from 'array.prototype.flatmap';\nimport Linkify from 'react-linkify';\nimport {\n  FormattedMessage,\n  injectIntl,\n  IntlShape,\n  WrappedComponentProps,\n} from 'react-intl';\nimport {GedcomData, pointerToId} from './util/gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {translateDate} from './util/date_util';\n\ninterface Props {\n  gedcom: GedcomData;\n  indi: string;\n}\n\nconst EVENT_TAGS = ['BIRT', 'BAPM', 'CHR', 'EVEN', 'CENS', 'DEAT', 'BURI'];\nconst EXCLUDED_TAGS = ['NAME', 'SEX', 'FAMC', 'FAMS', 'NOTE', 'SOUR'];\nconst TAG_DESCRIPTIONS = new Map([\n  ['ADOP', 'Adoption'],\n  ['BAPM', 'Baptism'],\n  ['BIRT', 'Birth'],\n  ['BURI', 'Burial'],\n  ['CENS', 'Census'],\n  ['CHR', 'Christening'],\n  ['CREM', 'Cremation'],\n  ['DEAT', 'Death'],\n  ['EDUC', 'Education'],\n  ['EMAIL', 'E-mail'],\n  ['EMIG', 'Emigration'],\n  ['EVEN', 'Event'],\n  ['FACT', 'Fact'],\n  ['IMMI', 'Immigration'],\n  ['MARR', 'Marriage'],\n  ['MILT', 'Military services'],\n  ['NATU', 'Naturalization'],\n  ['OCCU', 'Occupation'],\n  ['TITL', 'Title'],\n  ['WWW', 'WWW'],\n]);\n\nfunction translateTag(tag: string) {\n  const normalizedTag = tag.replace(/_/g, '');\n  return (\n    <FormattedMessage\n      id={`gedcom.${normalizedTag}`}\n      defaultMessage={TAG_DESCRIPTIONS.get(normalizedTag) || normalizedTag}\n    />\n  );\n}\n\nfunction joinLines(lines: (JSX.Element | string)[]) {\n  return (\n    <>\n      {lines.map((line, index) => (\n        <div key={index}>\n          <Linkify properties={{target: '_blank'}}>{line}</Linkify>\n          <br />\n        </div>\n      ))}\n    </>\n  );\n}\n\n/**\n * Returns the data for the given GEDCOM entry as an array of lines. Supports\n * continuations with CONT and CONC.\n */\nfunction getData(entry: GedcomEntry) {\n  const result = [entry.data];\n  entry.tree.forEach((subentry) => {\n    if (subentry.tag === 'CONC' && subentry.data) {\n      const last = result.length - 1;\n      result[last] += subentry.data;\n    } else if (subentry.tag === 'CONT' && subentry.data) {\n      result.push(subentry.data);\n    }\n  });\n  return result;\n}\n\nfunction eventDetails(entry: GedcomEntry, intl: IntlShape) {\n  const lines = [];\n  if (entry.data && entry.data.length > 1) {\n    lines.push(<i>{entry.data}</i>);\n  }\n  const date = entry.tree.find((subentry) => subentry.tag === 'DATE');\n  if (date && date.data) {\n    lines.push(translateDate(date.data, intl));\n  }\n  const place = entry.tree.find((subentry) => subentry.tag === 'PLAC');\n  if (place && place.data) {\n    lines.push(...getData(place));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction dataDetails(entry: GedcomEntry) {\n  const lines = [];\n  if (entry.data) {\n    lines.push(...getData(entry));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction noteDetails(entry: GedcomEntry) {\n  return joinLines(\n    getData(entry).map((line, index) => <i key={index}>{line}</i>),\n  );\n}\n\nfunction nameDetails(entry: GedcomEntry) {\n  return (\n    <h2 className=\"ui header\">\n      {entry.data\n        .split('/')\n        .filter((name) => !!name)\n        .map((name, index) => (\n          <div key={index}>\n            {name}\n            <br />\n          </div>\n        ))}\n    </h2>\n  );\n}\n\nfunction getDetails(\n  entries: GedcomEntry[],\n  tags: string[],\n  detailsFunction: (entry: GedcomEntry) => JSX.Element | null,\n): JSX.Element[] {\n  return flatMap(tags, (tag) =>\n    entries\n      .filter((entry) => entry.tag === tag)\n      .map((entry) => detailsFunction(entry)),\n  )\n    .filter((element) => element !== null)\n    .map((element, index) => (\n      <div className=\"ui segment\" key={index}>\n        {element}\n      </div>\n    ));\n}\n\n/**\n * Returns true if there is displayable information in this entry.\n * Returns false if there is no data in this entry or this is only a reference\n * to another entry.\n */\nfunction hasData(entry: GedcomEntry) {\n  return entry.tree.length > 0 || (entry.data && !entry.data.startsWith('@'));\n}\n\nfunction getOtherDetails(entries: GedcomEntry[]) {\n  return entries\n    .filter(\n      (entry) =>\n        !EXCLUDED_TAGS.includes(entry.tag) && !EVENT_TAGS.includes(entry.tag),\n    )\n    .filter(hasData)\n    .map((entry) => dataDetails(entry))\n    .filter((element) => element !== null)\n    .map((element, index) => (\n      <div className=\"ui segment\" key={index}>\n        {element}\n      </div>\n    ));\n}\n\n/**\n * If the entry is a reference to a top-level entry, the referenced entry is\n * returned. Otherwise, returns the given entry unmodified.\n */\nfunction dereference(entry: GedcomEntry, gedcom: GedcomData) {\n  if (entry.data) {\n    const dereferenced = gedcom.other[pointerToId(entry.data)];\n    if (dereferenced) {\n      return dereferenced;\n    }\n  }\n  return entry;\n}\n\nclass DetailsComponent extends React.Component<\n  Props & WrappedComponentProps,\n  {}\n> {\n  render() {\n    const entries = this.props.gedcom.indis[this.props.indi].tree;\n    const entriesWithData = entries\n      .map((entry) => dereference(entry, this.props.gedcom))\n      .filter(hasData);\n\n    return (\n      <div className=\"ui segments details\">\n        {getDetails(entries, ['NAME'], nameDetails)}\n        {getDetails(entries, EVENT_TAGS, (entry) =>\n          eventDetails(entry, this.props.intl),\n        )}\n        {getOtherDetails(entriesWithData)}\n        {getDetails(entriesWithData, ['NOTE'], noteDetails)}\n      </div>\n    );\n  }\n}\nexport const Details = injectIntl(DetailsComponent);\n","import {analyticsEvent} from '../util/analytics';\nimport {convertGedcom, getSoftware, TopolaData} from '../util/gedcom_util';\nimport {DataSource, DataSourceEnum, SourceSelection} from './data_source';\nimport {IndiInfo, JsonGedcomData} from 'topola';\nimport {TopolaError} from '../util/error';\n\n/**\n * Returns a valid IndiInfo object, either with the given indi and generation\n * or with an individual taken from the data and generation 0.\n */\nexport function getSelection(\n  data: JsonGedcomData,\n  selection?: IndiInfo,\n): IndiInfo {\n  // If ID is not given or it doesn't exist in the data, use the first ID in\n  // the data.\n  const id =\n    selection && data.indis.some((i) => i.id === selection.id)\n      ? selection.id\n      : data.indis[0].id;\n  return {id, generation: selection?.generation || 0};\n}\n\nfunction prepareData(\n  gedcom: string,\n  cacheId: string,\n  images?: Map<string, string>,\n): TopolaData {\n  const data = convertGedcom(gedcom, images || new Map());\n  const serializedData = JSON.stringify(data);\n  try {\n    sessionStorage.setItem(cacheId, serializedData);\n  } catch (e) {\n    console.warn('Failed to store data in session storage: ' + e);\n  }\n  return data;\n}\n\n/** Fetches data from the given URL. Uses cors-anywhere if handleCors is true. */\nexport async function loadFromUrl(\n  url: string,\n  handleCors: boolean,\n): Promise<TopolaData> {\n  try {\n    const cachedData = sessionStorage.getItem(url);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n\n  const driveUrlMatch1 = url.match(\n    /https:\\/\\/drive\\.google\\.com\\/file\\/d\\/(.*)\\/.*/,\n  );\n  if (driveUrlMatch1) {\n    url = `https://drive.google.com/uc?id=${driveUrlMatch1[1]}&export=download`;\n  }\n  const driveUrlMatch2 = url.match(\n    /https:\\/\\/drive\\.google\\.com\\/open\\?id=([^&]*)&?.*/,\n  );\n  if (driveUrlMatch2) {\n    url = `https://drive.google.com/uc?id=${driveUrlMatch2[1]}&export=download`;\n  }\n\n  const urlToFetch = handleCors\n    ? 'https://topola-cors.herokuapp.com/' + url\n    : url;\n\n  const response = await window.fetch(urlToFetch);\n  if (response.status !== 200) {\n    throw new Error(response.statusText);\n  }\n  const gedcom = await response.text();\n  return prepareData(gedcom, url);\n}\n\n/** Loads data from the given GEDCOM file contents. */\nexport async function loadGedcom(\n  hash: string,\n  gedcom?: string,\n  images?: Map<string, string>,\n): Promise<TopolaData> {\n  try {\n    const cachedData = sessionStorage.getItem(hash);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n  if (!gedcom) {\n    throw new TopolaError(\n      'ERROR_LOADING_UPLOADED_FILE',\n      'Error loading data. Please upload your file again.',\n    );\n  }\n  return prepareData(gedcom, hash, images);\n}\n\nexport interface UploadSourceSpec {\n  source: DataSourceEnum.UPLOADED;\n  gedcom?: string;\n  /** Hash of the GEDCOM contents. */\n  hash: string;\n  images?: Map<string, string>;\n}\n\n/** Files opened from the local computer. */\nexport class UploadedDataSource implements DataSource<UploadSourceSpec> {\n  // isNewData(args: Arguments, state: State): boolean {\n  isNewData(\n    newSource: SourceSelection<UploadSourceSpec>,\n    oldSource: SourceSelection<UploadSourceSpec>,\n    data?: TopolaData,\n  ): boolean {\n    return newSource.spec.hash !== oldSource.spec.hash;\n  }\n\n  async loadData(\n    source: SourceSelection<UploadSourceSpec>,\n  ): Promise<TopolaData> {\n    try {\n      const data = await loadGedcom(\n        source.spec.hash,\n        source.spec.gedcom,\n        source.spec.images,\n      );\n      const software = getSoftware(data.gedcom.head);\n      analyticsEvent('upload_file_loaded', {\n        event_label: software,\n        event_value: (source.spec.images && source.spec.images.size) || 0,\n      });\n      return data;\n    } catch (error) {\n      analyticsEvent('upload_file_error');\n      throw error;\n    }\n  }\n}\n\nexport interface UrlSourceSpec {\n  source: DataSourceEnum.GEDCOM_URL;\n  /** URL of the data that is loaded or is being loaded. */\n  url: string;\n  handleCors: boolean;\n}\n\n/** GEDCOM file loaded by pointing to a URL. */\nexport class GedcomUrlDataSource implements DataSource<UrlSourceSpec> {\n  isNewData(\n    newSource: SourceSelection<UrlSourceSpec>,\n    oldSource: SourceSelection<UrlSourceSpec>,\n    data?: TopolaData,\n  ): boolean {\n    return newSource.spec.url !== oldSource.spec.url;\n  }\n\n  async loadData(source: SourceSelection<UrlSourceSpec>): Promise<TopolaData> {\n    try {\n      const data = await loadFromUrl(source.spec.url, source.spec.handleCors);\n      const software = getSoftware(data.gedcom.head);\n      analyticsEvent('upload_file_loaded', {event_label: software});\n      return data;\n    } catch (error) {\n      analyticsEvent('url_file_error');\n      throw error;\n    }\n  }\n}\n","import {analyticsEvent} from '../util/analytics';\nimport {DataSource, DataSourceEnum, SourceSelection} from './data_source';\nimport {getSoftware, TopolaData} from '../util/gedcom_util';\nimport {loadGedcom} from './load_data';\n\n/**\n * Message types used in embedded mode.\n * When the parent is ready to receive messages, it sends PARENT_READY.\n * When the child (this app) is ready to receive messages, it sends READY.\n * When the child receives PARENT_READY, it sends READY.\n * When the parent receives READY, it sends data in a GEDCOM message.\n */\nenum EmbeddedMessageType {\n  GEDCOM = 'gedcom',\n  READY = 'ready',\n  PARENT_READY = 'parent_ready',\n}\n\n/** Message sent to parent or received from parent in embedded mode. */\ninterface EmbeddedMessage {\n  message: EmbeddedMessageType;\n}\n\ninterface GedcomMessage extends EmbeddedMessage {\n  message: EmbeddedMessageType.GEDCOM;\n  gedcom?: string;\n}\n\nexport interface EmbeddedSourceSpec {\n  source: DataSourceEnum.EMBEDDED;\n}\n\n/** GEDCOM file received from outside of the iframe. */\nexport class EmbeddedDataSource implements DataSource<EmbeddedSourceSpec> {\n  isNewData(\n    newSource: SourceSelection<EmbeddedSourceSpec>,\n    oldSource: SourceSelection<EmbeddedSourceSpec>,\n    data?: TopolaData,\n  ): boolean {\n    // Never reload data.\n    return false;\n  }\n\n  private async onMessage(\n    message: EmbeddedMessage,\n    resolve: (value: TopolaData) => void,\n    reject: (reason: any) => void,\n  ) {\n    if (message.message === EmbeddedMessageType.PARENT_READY) {\n      // Parent didn't receive the first 'ready' message, so we need to send it again.\n      window.parent.postMessage({message: EmbeddedMessageType.READY}, '*');\n    } else if (message.message === EmbeddedMessageType.GEDCOM) {\n      const gedcom = (message as GedcomMessage).gedcom;\n      if (!gedcom) {\n        return;\n      }\n      try {\n        const data = await loadGedcom('', gedcom);\n        const software = getSoftware(data.gedcom.head);\n        analyticsEvent('embedded_file_loaded', {\n          event_label: software,\n        });\n        resolve(data);\n      } catch (error) {\n        analyticsEvent('embedded_file_error');\n        reject(error);\n      }\n    }\n  }\n\n  async loadData(\n    source: SourceSelection<EmbeddedSourceSpec>,\n  ): Promise<TopolaData> {\n    // Notify the parent window that we are ready.\n    return new Promise<TopolaData>((resolve, reject) => {\n      window.parent.postMessage({message: EmbeddedMessageType.READY}, '*');\n      window.addEventListener('message', (data) =>\n        this.onMessage(data.data, resolve, reject),\n      );\n    });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/topola.a3ffa9a5.jpg\";","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport logo from './topola.jpg';\nimport {Card, Grid, Image} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {Media} from './util/media';\n\n/** Link that loads a GEDCOM file from URL. */\nfunction GedcomLink(props: {url: string; text: string}) {\n  return (\n    <Link\n      to={{pathname: '/view', search: queryString.stringify({url: props.url})}}\n    >\n      {props.text}\n    </Link>\n  );\n}\n\nfunction formatBuildDate(dateString: string) {\n  return dateString.slice(0, 16);\n}\n\n/** The intro page. */\nexport function Intro() {\n  const contents = (\n    <>\n      <p>\n        <FormattedMessage\n          id=\"intro.description\"\n          defaultMessage={\n            'Topola Genealogy is a genealogy tree viewer that lets you' +\n            ' browse the structure of the family.'\n          }\n        />\n      </p>\n      <p>\n        <FormattedMessage\n          id=\"intro.instructions\"\n          defaultMessage={\n            'Use the OPEN FILE or LOAD FROM URL buttons above to load' +\n            ' a GEDCOM file. You can export a GEDCOM file from most of the' +\n            ' existing genealogy programs and web sites.'\n          }\n        />\n      </p>\n      <p>\n        <FormattedMessage\n          id=\"intro.examples\"\n          defaultMessage={\n            'Here are some examples from the web that you can view:'\n          }\n        />\n      </p>\n      <ul>\n        <li>\n          <GedcomLink\n            url=\"http://genpol.com/module-Downloads-prep_hand_out-lid-32.html\"\n            text=\"Karol Wojtyła\"\n          />{' '}\n          (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n          <a href=\"http://genpol.com/module-Downloads-display-lid-32.html\">\n            GENPOL\n          </a>\n          )\n        </li>\n        <li>\n          <GedcomLink\n            url=\"https://webtreeprint.com/tp_downloader.php?path=famous_gedcoms/shakespeare.ged\"\n            text=\"Shakespeare\"\n          />{' '}\n          (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n          <a href=\"https://webtreeprint.com/tp_famous_gedcoms.php\">\n            webtreeprint.com\n          </a>\n          )\n        </li>\n      </ul>\n      <p>\n        <b>\n          <FormattedMessage id=\"intro.privacy\" defaultMessage=\"Privacy\" />\n        </b>\n        {': '}\n        <FormattedMessage\n          id=\"intro.privacy_note\"\n          defaultMessage={\n            'When using the \"load from file\" option, this site does not' +\n            ' send your data anywhere and files loaded from disk do not' +\n            ' leave your computer. When using \"load from URL\", data is' +\n            ' passed through the {link} service to deal with an issue with' +\n            ' cross-site file loading in the browser (CORS).'\n          }\n          values={{\n            link: (\n              <a href=\"https://topola-cors.herokuapp.com/\">cors-anywhere</a>\n            ),\n          }}\n        />\n      </p>\n      <p className=\"ui right aligned version\">\n        version: {formatBuildDate(process.env.REACT_APP_GIT_TIME!)} (\n        <a\n          href={`https://github.com/PeWu/topola-viewer/commit/${process.env.REACT_APP_GIT_SHA}`}\n        >\n          {process.env.REACT_APP_GIT_SHA}\n        </a>\n        )\n      </p>\n    </>\n  );\n\n  return (\n    <div id=\"content\">\n      <div className=\"backgroundImage\" />\n      <Card className=\"intro\">\n        <Card.Content as={Media} at=\"large\">\n          <Card.Header>\n            <FormattedMessage\n              id=\"intro.title\"\n              defaultMessage=\"Topola Genealogy Viewer\"\n            />\n          </Card.Header>\n        </Card.Content>\n        <Card.Content>\n          <Grid as={Media} at=\"large\">\n            <Grid.Row>\n              <Grid.Column width={5}>\n                <Image src={logo} alt=\"Topola logo\" />\n              </Grid.Column>\n              <Grid.Column width={11}>{contents}</Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Media at=\"small\">\n            <Image\n              src={logo}\n              alt=\"Topola logo\"\n              centered={true}\n              size=\"tiny\"\n              className=\"blockImage\"\n            />\n            {contents}\n          </Media>\n        </Card.Content>\n      </Card>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport {\n  Menu,\n  Dropdown,\n  MenuItemProps,\n  DropdownItemProps,\n} from 'semantic-ui-react';\n\nexport enum MenuType {\n  Menu,\n  Dropdown,\n}\n\ninterface Props {\n  menuType?: MenuType;\n}\n\nexport class MenuItem extends React.Component<\n  Props & MenuItemProps & DropdownItemProps\n> {\n  render() {\n    const newProps = {...this.props};\n    // Remove menuType from props to avoid error message in the console.\n    delete newProps.menuType;\n    return (\n      <>\n        {this.props.menuType === MenuType.Menu ? (\n          <Menu.Item {...newProps}>{this.props.children}</Menu.Item>\n        ) : (\n          <Dropdown.Item {...newProps}>{this.props.children}</Dropdown.Item>\n        )}\n      </>\n    );\n  }\n}\n","import lunr from 'lunr';\nimport naturalSort from 'javascript-natural-sort';\nimport {idToFamMap, idToIndiMap} from '../util/gedcom_util';\nimport {JsonFam, JsonGedcomData, JsonIndi} from 'topola';\n\n// TODO: Add type declarations and use import instead of require.\nrequire('lunr-languages/lunr.stemmer.support')(lunr);\nrequire('lunr-languages/lunr.multi')(lunr);\nrequire('lunr-languages/lunr.de')(lunr);\nrequire('lunr-languages/lunr.fr')(lunr);\nrequire('lunr-languages/lunr.it')(lunr);\nrequire('lunr-languages/lunr.ru')(lunr);\n\nconst MAX_RESULTS = 8;\n\nexport interface SearchResult {\n  id: string;\n  indi: JsonIndi;\n}\n\nexport interface SearchIndex {\n  search(input: string): SearchResult[];\n}\n\n/** Removes accents from letters, e.g. ó->o, ę->e. */\nfunction normalize(input: string) {\n  return input\n    .toLocaleLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/\\u0142/g, 'l'); // Special case: ł is not affected by NFD.\n}\n\n/** Comparator to sort by score first, then by id. */\nfunction compare(a: lunr.Index.Result, b: lunr.Index.Result) {\n  if (a.score !== b.score) {\n    return b.score - a.score;\n  }\n  return naturalSort(a.ref, b.ref);\n}\n\n/** Returns all last names of all husbands as a space-separated string. */\nfunction getHusbandLastName(\n  indi: JsonIndi,\n  indiMap: Map<String, JsonIndi>,\n  famMap: Map<string, JsonFam>,\n): string {\n  return (indi.fams || [])\n    .map((famId) => famMap.get(famId))\n    .map((fam) => fam && fam.husb)\n    .map((husbId) => husbId && indiMap.get(husbId))\n    .map((husband) => husband && husband.lastName)\n    .join(' ');\n}\n\nclass LunrSearchIndex implements SearchIndex {\n  private index: lunr.Index | undefined;\n  private indiMap: Map<string, JsonIndi>;\n  private famMap: Map<string, JsonFam>;\n\n  constructor(data: JsonGedcomData) {\n    this.indiMap = idToIndiMap(data);\n    this.famMap = idToFamMap(data);\n  }\n\n  initialize() {\n    const self = this;\n    this.index = lunr(function () {\n      this.use((lunr as any).multiLanguage('de', 'en', 'fr', 'it', 'ru'));\n      this.ref('id');\n      this.field('id');\n      this.field('name', {boost: 10});\n      this.field('normalizedName', {boost: 8});\n      this.field('spouseLastName', {boost: 2});\n      this.field('normalizedSpouseLastName', {boost: 2});\n\n      self.indiMap.forEach((indi) => {\n        const name = [indi.firstName, indi.lastName].join(' ');\n        const spouseLastName = getHusbandLastName(\n          indi,\n          self.indiMap,\n          self.famMap,\n        );\n        this.add({\n          id: indi.id,\n          name,\n          normalizedName: normalize(name),\n          spouseLastName,\n          normalizedSpouseLastName: normalize(spouseLastName),\n        });\n      });\n    });\n  }\n\n  public search(input: string): SearchResult[] {\n    const query = input\n      .split(' ')\n      .filter((s) => !!s)\n      .map((s) => `+${s}*`)\n      .join(' ');\n    const results = this.index!.search(query);\n    return results\n      .sort(compare)\n      .slice(0, MAX_RESULTS)\n      .map((result) => ({id: result.ref, indi: this.indiMap.get(result.ref)!}));\n  }\n}\n\n/** Builds a search index from data. */\nexport function buildSearchIndex(data: JsonGedcomData): SearchIndex {\n  const index = new LunrSearchIndex(data);\n  index.initialize();\n  return index;\n}\n","import * as React from 'react';\nimport debounce from 'debounce';\nimport {analyticsEvent} from '../util/analytics';\nimport {buildSearchIndex, SearchIndex, SearchResult} from './search_index';\nimport {formatDateOrRange} from '../util/date_util';\nimport {IndiInfo, JsonGedcomData} from 'topola';\nimport {injectIntl, WrappedComponentProps} from 'react-intl';\nimport {JsonIndi} from 'topola';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {Search, SearchProps, SearchResultProps} from 'semantic-ui-react';\n\nfunction getNameLine(result: SearchResult) {\n  const name = [result.indi.firstName, result.indi.lastName].join(' ').trim();\n  if (result.id.length > 8) {\n    return name;\n  }\n  return (\n    <>\n      {name} <i>({result.id})</i>\n    </>\n  );\n}\n\ninterface Props {\n  /** Data used for the search index. */\n  data: JsonGedcomData;\n  onSelection: (indiInfo: IndiInfo) => void;\n}\n\ninterface State {\n  searchResults: SearchResultProps[];\n}\n\n/** Displays and handles the search box in the top bar. */\nclass SearchBarComponent extends React.Component<\n  RouteComponentProps & WrappedComponentProps & Props,\n  State\n> {\n  state: State = {\n    searchResults: [],\n  };\n\n  searchRef?: {setValue(value: string): void};\n  searchIndex?: SearchIndex;\n\n  private getDescriptionLine(indi: JsonIndi) {\n    const birthDate = formatDateOrRange(indi.birth, this.props.intl);\n    const deathDate = formatDateOrRange(indi.death, this.props.intl);\n    if (!deathDate) {\n      return birthDate;\n    }\n    return `${birthDate} – ${deathDate}`;\n  }\n\n  /** Produces an object that is displayed in the Semantic UI Search results. */\n  private displaySearchResult(result: SearchResult) {\n    return {\n      id: result.id,\n      key: result.id,\n      title: getNameLine(result),\n      description: this.getDescriptionLine(result.indi),\n    };\n  }\n\n  /** On search input change. */\n  private handleSearch(input: string | undefined) {\n    if (!input) {\n      return;\n    }\n    const results = this.searchIndex!.search(input).map((result) =>\n      this.displaySearchResult(result),\n    );\n    this.setState(Object.assign({}, this.state, {searchResults: results}));\n  }\n\n  /** On search result selected. */\n  private handleResultSelect(id: string) {\n    analyticsEvent('search_result_selected');\n    this.props.onSelection({id, generation: 0});\n    this.searchRef!.setValue('');\n  }\n\n  private initializeSearchIndex() {\n    this.searchIndex = buildSearchIndex(this.props.data);\n  }\n\n  componentDidMount() {\n    this.initializeSearchIndex();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.data !== this.props.data) {\n      this.initializeSearchIndex();\n    }\n  }\n\n  render() {\n    return (\n      <Search\n        onSearchChange={debounce(\n          (_: React.MouseEvent<HTMLElement>, data: SearchProps) =>\n            this.handleSearch(data.value),\n          200,\n        )}\n        onResultSelect={(_, data) => this.handleResultSelect(data.result.id)}\n        results={this.state.searchResults}\n        noResultsMessage={this.props.intl.formatMessage({\n          id: 'menu.search.no_results',\n          defaultMessage: 'No results found',\n        })}\n        placeholder={this.props.intl.formatMessage({\n          id: 'menu.search.placeholder',\n          defaultMessage: 'Search for people',\n        })}\n        selectFirstResult={true}\n        ref={(ref) =>\n          (this.searchRef = (ref as unknown) as {\n            setValue(value: string): void;\n          })\n        }\n        id=\"search\"\n      />\n    );\n  }\n}\nexport const SearchBar = injectIntl(SearchBarComponent);\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport md5 from 'md5';\nimport {analyticsEvent} from '../util/analytics';\nimport {Dropdown, Icon, Menu} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {MenuType} from './menu_item';\nimport {RouteComponentProps} from 'react-router-dom';\n\nfunction loadFileAsText(file: File): Promise<string> {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.onload = (evt: ProgressEvent) => {\n      resolve((evt.target as FileReader).result as string);\n    };\n    reader.readAsText(file);\n  });\n}\n\nfunction isImageFileName(fileName: string) {\n  const lower = fileName.toLowerCase();\n  return lower.endsWith('.jpg') || lower.endsWith('.png');\n}\n\ninterface Props {\n  menuType: MenuType;\n}\n\n/** Displays and handles the \"Open file\" menu. */\nexport class UploadMenu extends React.Component<RouteComponentProps & Props> {\n  private async handleUpload(event: React.SyntheticEvent<HTMLInputElement>) {\n    const files = (event.target as HTMLInputElement).files;\n    if (!files || !files.length) {\n      return;\n    }\n    const filesArray = Array.from(files);\n    (event.target as HTMLInputElement).value = ''; // Reset the file input.\n    analyticsEvent('upload_files_selected', {\n      event_value: files.length,\n    });\n\n    const gedcomFile =\n      filesArray.length === 1\n        ? filesArray[0]\n        : filesArray.find((file) => file.name.toLowerCase().endsWith('.ged')) ||\n          filesArray[0];\n\n    // Convert uploaded images to object URLs.\n    const images = filesArray\n      .filter(\n        (file) => file.name !== gedcomFile.name && isImageFileName(file.name),\n      )\n      .map((file) => ({\n        name: file.name,\n        url: URL.createObjectURL(file),\n      }));\n    const imageMap = new Map(\n      images.map((entry) => [entry.name, entry.url] as [string, string]),\n    );\n\n    const data = await loadFileAsText(gedcomFile);\n    const imageFileNames = images\n      .map((image) => image.name)\n      .sort()\n      .join('|');\n    // Hash GEDCOM contents with uploaded image file names.\n    const hash = md5(md5(data) + imageFileNames);\n\n    // Use history.replace() when reuploading the same file and history.push() when loading\n    // a new file.\n    const search = queryString.parse(this.props.location.search);\n    const historyPush =\n      search.file === hash\n        ? this.props.history.replace\n        : this.props.history.push;\n\n    historyPush({\n      pathname: '/view',\n      search: queryString.stringify({file: hash}),\n      state: {data, images: imageMap},\n    });\n  }\n\n  render() {\n    const content = (\n      <>\n        <Icon name=\"folder open\" />\n        <FormattedMessage id=\"menu.open_file\" defaultMessage=\"Open file\" />\n      </>\n    );\n    return (\n      <>\n        {this.props.menuType === MenuType.Menu ? (\n          <label htmlFor=\"fileInput\">\n            <Menu.Item as=\"a\">{content}</Menu.Item>\n          </label>\n        ) : (\n          <Dropdown.Item as=\"label\" htmlFor=\"fileInput\">\n            {content}\n          </Dropdown.Item>\n        )}\n        <input\n          className=\"hidden\"\n          type=\"file\"\n          accept=\".ged,image/*\"\n          id=\"fileInput\"\n          multiple\n          onChange={(e) => this.handleUpload(e)}\n        />\n      </>\n    );\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {analyticsEvent} from '../util/analytics';\nimport {Button, Form, Header, Icon, Input, Modal} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {MenuItem, MenuType} from './menu_item';\nimport {RouteComponentProps} from 'react-router-dom';\n\ninterface Props {\n  menuType: MenuType;\n}\n\ninterface State {\n  dialogOpen: boolean;\n  url?: string;\n}\n\n/** Displays and handles the \"Open URL\" menu. */\nexport class UrlMenu extends React.Component<\n  RouteComponentProps & Props,\n  State\n> {\n  state: State = {dialogOpen: false};\n\n  inputRef: React.RefObject<Input> = React.createRef();\n\n  /** Opens the \"Load from URL\" dialog. */\n  private openDialog() {\n    this.setState(Object.assign({}, this.state, {dialogOpen: true}), () =>\n      this.inputRef.current!.focus(),\n    );\n  }\n\n  /** Cancels any of the open dialogs. */\n  private handleClose() {\n    this.setState(\n      Object.assign({}, this.state, {\n        dialogOpen: false,\n      }),\n    );\n  }\n\n  /** Load button clicked in the \"Load from URL\" dialog. */\n  private handleLoad() {\n    this.setState(\n      Object.assign({}, this.state, {\n        dialogOpen: false,\n      }),\n    );\n    if (this.state.url) {\n      analyticsEvent('url_selected');\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({url: this.state.url}),\n      });\n    }\n  }\n\n  /** Called when the URL input is typed into. */\n  private handleUrlChange(value: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        url: value,\n      }),\n    );\n  }\n\n  private loadFromUrlModal() {\n    return (\n      <Modal\n        open={this.state.dialogOpen}\n        onClose={() => this.handleClose()}\n        centered={false}\n      >\n        <Header>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"load_from_url.title\"\n            defaultMessage=\"Load from URL\"\n          />\n        </Header>\n        <Modal.Content>\n          <Form onSubmit={() => this.handleLoad()}>\n            <Input\n              placeholder=\"https://\"\n              fluid\n              onChange={(e, data) => this.handleUrlChange(data.value)}\n              ref={this.inputRef}\n            />\n            <p>\n              <FormattedMessage\n                id=\"load_from_url.comment\"\n                defaultMessage={\n                  'Data from the URL will be loaded through {link} to avoid CORS issues.'\n                }\n                values={{\n                  link: (\n                    <a href=\"https://topola-cors.herokuapp.com/\">\n                      topola-cors.herokuapp.com\n                    </a>\n                  ),\n                }}\n              />\n            </p>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button secondary onClick={() => this.handleClose()}>\n            <FormattedMessage\n              id=\"load_from_url.cancel\"\n              defaultMessage=\"Cancel\"\n            />\n          </Button>\n          <Button primary onClick={() => this.handleLoad()}>\n            <FormattedMessage id=\"load_from_url.load\" defaultMessage=\"Load\" />\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <MenuItem\n          onClick={() => this.openDialog()}\n          menuType={this.props.menuType}\n        >\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"menu.load_from_url\"\n            defaultMessage=\"Load from URL\"\n          />\n        </MenuItem>\n        {this.loadFromUrlModal()}\n      </>\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/wikitree.7bffea31.png\";","import Cookies from 'js-cookie';\nimport {analyticsEvent} from '../util/analytics';\nimport {DataSource, DataSourceEnum, SourceSelection} from './data_source';\nimport {Date, DateOrRange, JsonFam, JsonIndi} from 'topola';\nimport {GedcomData, normalizeGedcom, TopolaData} from '../util/gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {IntlShape} from 'react-intl';\nimport {TopolaError} from '../util/error';\n\n/** Prefix for IDs of private individuals. */\nexport const PRIVATE_ID_PREFIX = '~Private';\n\n/**\n * Cookie where the logged in user name is stored. This cookie is shared\n * between apps hosted on apps.wikitree.com.\n */\nconst USER_NAME_COOKIE = 'wikidb_wtb_UserName';\n\n/** WikiTree API getAncestors request. */\ninterface GetAncestorsRequest {\n  action: 'getAncestors';\n  key: string;\n  fields: string;\n}\n\n/** WikiTree API getRelatives request. */\ninterface GetRelativesRequest {\n  action: 'getRelatives';\n  keys: string;\n  getChildren?: true;\n  getSpouses?: true;\n}\n\n/** WikiTree API clientLogin request. */\ninterface ClientLoginRequest {\n  action: 'clientLogin';\n  authcode: string;\n}\n\n/** WikiTree API clientLogin response. */\ninterface ClientLoginResponse {\n  result: string;\n  username: string;\n}\n\ntype WikiTreeRequest =\n  | GetAncestorsRequest\n  | GetRelativesRequest\n  | ClientLoginRequest;\n\n/** Person structure returned from WikiTree API. */\ninterface Person {\n  Id: number;\n  Name: string;\n  FirstName: string;\n  LastNameAtBirth: string;\n  RealName: string;\n  Spouses?: {[key: number]: Person};\n  Children: {[key: number]: Person};\n  Mother: number;\n  Father: number;\n  Gender: string;\n  BirthDate: string;\n  DeathDate: string;\n  BirthLocation: string;\n  DeathLocation: string;\n  BirthDateDecade: string;\n  DeathDateDecade: string;\n  marriage_location: string;\n  marriage_date: string;\n  DataStatus?: {\n    BirthDate: string;\n    DeathDate: string;\n  };\n  PhotoData?: {\n    path: string;\n    url: string;\n  };\n}\n\n/** Gets item from session storage. Logs exception if one is thrown. */\nfunction getSessionStorageItem(key: string): string | null {\n  try {\n    return sessionStorage.getItem(key);\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n  return null;\n}\n\n/** Sets item in session storage. Logs exception if one is thrown. */\nfunction setSessionStorageItem(key: string, value: string) {\n  try {\n    sessionStorage.setItem(key, value);\n  } catch (e) {\n    console.warn('Failed to store data in session storage: ' + e);\n  }\n}\n\n/** Sends a request to the WikiTree API. Returns the parsed response JSON. */\nasync function wikiTreeGet(request: WikiTreeRequest, handleCors: boolean) {\n  const requestData = new FormData();\n  requestData.append('format', 'json');\n  for (const key in request) {\n    requestData.append(key, request[key]);\n  }\n  const apiUrl = handleCors\n    ? 'https://topola-cors.herokuapp.com/https://api.wikitree.com/api.php'\n    : 'https://api.wikitree.com/api.php';\n  const response = await window.fetch(apiUrl, {\n    method: 'POST',\n    body: requestData,\n    credentials: handleCors ? undefined : 'include',\n  });\n  const responseBody = await response.text();\n  return JSON.parse(responseBody);\n}\n\n/**\n * Retrieves ancestors from WikiTree for the given person ID.\n * Uses sessionStorage for caching responses.\n */\nasync function getAncestors(\n  key: string,\n  handleCors: boolean,\n): Promise<Person[]> {\n  const cacheKey = `wikitree:ancestors:${key}`;\n  const cachedData = getSessionStorageItem(cacheKey);\n  if (cachedData) {\n    return JSON.parse(cachedData);\n  }\n  const response = await wikiTreeGet(\n    {\n      action: 'getAncestors',\n      key: key,\n      fields: '*',\n    },\n    handleCors,\n  );\n  const result = response[0].ancestors as Person[];\n  setSessionStorageItem(cacheKey, JSON.stringify(result));\n  return result;\n}\n\n/**\n * Retrieves relatives from WikiTree for the given array of person IDs.\n * Uses sessionStorage for caching responses.\n */\nasync function getRelatives(\n  keys: string[],\n  handleCors: boolean,\n): Promise<Person[]> {\n  const result: Person[] = [];\n  const keysToFetch: string[] = [];\n  keys.forEach((key) => {\n    const cachedData = getSessionStorageItem(`wikitree:relatives:${key}`);\n    if (cachedData) {\n      result.push(JSON.parse(cachedData));\n    } else {\n      keysToFetch.push(key);\n    }\n  });\n  if (keysToFetch.length === 0) {\n    return result;\n  }\n  const response = await wikiTreeGet(\n    {\n      action: 'getRelatives',\n      keys: keysToFetch.join(','),\n      getChildren: true,\n      getSpouses: true,\n    },\n    handleCors,\n  );\n  if (response[0].items === null) {\n    const id = keysToFetch[0];\n    throw new TopolaError(\n      'WIKITREE_PROFILE_NOT_FOUND',\n      `WikiTree profile ${id} not found`,\n      {id},\n    );\n  }\n  const fetchedResults = response[0].items.map(\n    (x: {person: Person}) => x.person,\n  ) as Person[];\n  fetchedResults.forEach((person) => {\n    setSessionStorageItem(\n      `wikitree:relatives:${person.Name}`,\n      JSON.stringify(person),\n    );\n  });\n  return result.concat(fetchedResults);\n}\n\nexport async function clientLogin(\n  authcode: string,\n): Promise<ClientLoginResponse> {\n  const response = await wikiTreeGet(\n    {\n      action: 'clientLogin',\n      authcode,\n    },\n    false,\n  );\n  return response.clientLogin;\n}\n\n/**\n * Returnes the logged in user name or undefined if not logged in.\n *\n * This is not an authoritative answer. The result of this function relies on\n * the cookies set on the apps.wikitree.com domain under which this application\n * is hosted. The authoritative source of login information is in cookies set on\n * the api.wikitree.com domain.\n */\nexport function getLoggedInUserName(): string | undefined {\n  return Cookies.get(USER_NAME_COOKIE);\n}\n\n/**\n * Loads data from WikiTree to populate an hourglass chart starting from the\n * given person ID.\n */\nexport async function loadWikiTree(\n  key: string,\n  intl: IntlShape,\n  authcode?: string,\n): Promise<TopolaData> {\n  // Work around CORS if not in apps.wikitree.com domain.\n  const handleCors = window.location.hostname !== 'apps.wikitree.com';\n\n  if (!handleCors && !getLoggedInUserName() && authcode) {\n    const loginResult = await clientLogin(authcode);\n    if (loginResult.result === 'Success') {\n      sessionStorage.clear();\n      Cookies.set(USER_NAME_COOKIE, loginResult.username);\n    }\n  }\n\n  const everyone: Person[] = [];\n\n  // Fetch the ancestors of the input person and ancestors of his/her spouses.\n  const firstPerson = await getRelatives([key], handleCors);\n  if (!firstPerson[0].Name) {\n    const id = key;\n    throw new TopolaError(\n      'WIKITREE_PROFILE_NOT_ACCESSIBLE',\n      `WikiTree profile ${id} is not accessible. Try logging in.`,\n      {id},\n    );\n  }\n\n  const spouseKeys = Object.values(firstPerson[0].Spouses || {}).map(\n    (s) => s.Name,\n  );\n  const ancestors = await Promise.all(\n    [key]\n      .concat(spouseKeys)\n      .map((personId) => getAncestors(personId, handleCors)),\n  );\n  const ancestorKeys = ancestors\n    .flat()\n    .map((person) => person.Name)\n    .filter((key) => !!key);\n  const ancestorDetails = await getRelatives(ancestorKeys, handleCors);\n\n  // Map from person id to father id if the father profile is private.\n  const privateFathers: Map<number, number> = new Map();\n  // Map from person id to mother id if the mother profile is private.\n  const privateMothers: Map<number, number> = new Map();\n\n  // Andujst private individual ids so that there are no collisions in the case\n  // that ancestors were collected for more than one person.\n  ancestors.forEach((ancestorList, index) => {\n    const offset = 1000 * index;\n    // Adjust ids by offset.\n    ancestorList.forEach((person) => {\n      if (person.Id < 0) {\n        person.Id -= offset;\n        person.Name = `${PRIVATE_ID_PREFIX}${person.Id}`;\n      }\n      if (person.Father < 0) {\n        person.Father -= offset;\n        privateFathers.set(person.Id, person.Father);\n      }\n      if (person.Mother < 0) {\n        person.Mother -= offset;\n        privateMothers.set(person.Id, person.Mother);\n      }\n    });\n  });\n\n  // Set the Father and Mother fields again because getRelatives doesn't return\n  // private parents.\n  ancestorDetails.forEach((person) => {\n    const privateFather = privateFathers.get(person.Id);\n    if (privateFather) {\n      person.Father = privateFather;\n    }\n    const privateMother = privateMothers.get(person.Id);\n    if (privateMother) {\n      person.Mother = privateMother;\n    }\n  });\n  everyone.push(...ancestorDetails);\n\n  // Collect private individuals.\n  const privateAncestors = ancestors.flat().filter((person) => person.Id < 0);\n  everyone.push(...privateAncestors);\n\n  // Limit the number of generations of descendants because there may be tens of\n  // generations for some profiles.\n  const descendantGenerationLimit = 5;\n\n  // Fetch descendants recursively.\n  let toFetch = [key];\n  let generation = 0;\n  while (toFetch.length > 0 && generation <= descendantGenerationLimit) {\n    const people = await getRelatives(toFetch, handleCors);\n    everyone.push(...people);\n    const allSpouses = people.flatMap((person) =>\n      Object.values(person.Spouses || {}),\n    );\n    everyone.push(...allSpouses);\n    // Fetch all children.\n    toFetch = people.flatMap((person) =>\n      Object.values(person.Children).map((c) => c.Name),\n    );\n    generation++;\n  }\n\n  // Map from person id to the set of families where they are a spouse.\n  const families = new Map<number, Set<string>>();\n  // Map from family id to the set of children.\n  const children = new Map<string, Set<number>>();\n  // Map from famliy id to the spouses.\n  const spouses = new Map<\n    string,\n    {wife?: number; husband?: number; spouse?: Person}\n  >();\n  // Map from numerical id to human-readable id.\n  const idToName = new Map<number, string>();\n\n  everyone.forEach((person) => {\n    idToName.set(person.Id, person.Name);\n    if (person.Mother || person.Father) {\n      const famId = getFamilyId(person.Mother, person.Father);\n      getSet(families, person.Mother).add(famId);\n      getSet(families, person.Father).add(famId);\n      getSet(children, famId).add(person.Id);\n      spouses.set(famId, {\n        wife: person.Mother || undefined,\n        husband: person.Father || undefined,\n      });\n    }\n  });\n\n  const indis: JsonIndi[] = [];\n  const converted = new Set<number>();\n  everyone.forEach((person) => {\n    if (converted.has(person.Id)) {\n      return;\n    }\n    converted.add(person.Id);\n    const indi = convertPerson(person, intl);\n    if (person.Spouses) {\n      Object.values(person.Spouses).forEach((spouse) => {\n        const famId = getFamilyId(person.Id, spouse.Id);\n        getSet(families, person.Id).add(famId);\n        getSet(families, spouse.Id).add(famId);\n        const familySpouses =\n          person.Gender === 'Male'\n            ? {wife: spouse.Id, husband: person.Id, spouse}\n            : {wife: person.Id, husband: spouse.Id, spouse};\n        spouses.set(famId, familySpouses);\n      });\n    }\n    indi.fams = Array.from(getSet(families, person.Id));\n    indis.push(indi);\n  });\n\n  const fams = Array.from(spouses.entries()).map(([key, value]) => {\n    const fam: JsonFam = {\n      id: key,\n    };\n    const wife = value.wife && idToName.get(value.wife);\n    if (wife) {\n      fam.wife = wife;\n    }\n    const husband = value.husband && idToName.get(value.husband);\n    if (husband) {\n      fam.husb = husband;\n    }\n    fam.children = Array.from(getSet(children, key)).map(\n      (child) => idToName.get(child)!,\n    );\n    if (\n      value.spouse &&\n      ((value.spouse.marriage_date &&\n        value.spouse.marriage_date !== '0000-00-00') ||\n        value.spouse.marriage_location)\n    ) {\n      const parsedDate = parseDate(value.spouse.marriage_date);\n      fam.marriage = Object.assign({}, parsedDate, {\n        place: value.spouse.marriage_location,\n      });\n    }\n    return fam;\n  });\n\n  const chartData = normalizeGedcom({indis, fams});\n  const gedcom = buildGedcom(indis);\n  return {chartData, gedcom};\n}\n\n/** Creates a family identifier given 2 spouse identifiers. */\nfunction getFamilyId(spouse1: number, spouse2: number) {\n  if (spouse2 > spouse1) {\n    return `${spouse1}_${spouse2}`;\n  }\n  return `${spouse2}_${spouse1}`;\n}\n\nfunction convertPerson(person: Person, intl: IntlShape): JsonIndi {\n  const indi: JsonIndi = {\n    id: person.Name,\n  };\n  if (person.Name.startsWith(PRIVATE_ID_PREFIX)) {\n    indi.hideId = true;\n    indi.firstName = intl.formatMessage({\n      id: 'wikitree.private',\n      defaultMessage: 'Private',\n    });\n  }\n  if (person.FirstName && person.FirstName !== 'Unknown') {\n    indi.firstName = person.FirstName;\n  } else if (person.RealName && person.RealName !== 'Unknown') {\n    indi.firstName = person.RealName;\n  }\n  if (person.LastNameAtBirth !== 'Unknown') {\n    indi.lastName = person.LastNameAtBirth;\n  }\n  if (person.Mother || person.Father) {\n    indi.famc = getFamilyId(person.Mother, person.Father);\n  }\n  if (person.Gender === 'Male') {\n    indi.sex = 'M';\n  } else if (person.Gender === 'Female') {\n    indi.sex = 'F';\n  }\n  if (\n    (person.BirthDate && person.BirthDate !== '0000-00-00') ||\n    person.BirthLocation ||\n    person.BirthDateDecade !== 'unknown'\n  ) {\n    const parsedDate = parseDate(\n      person.BirthDate,\n      person.DataStatus && person.DataStatus.BirthDate,\n    );\n    const date = parsedDate || parseDecade(person.BirthDateDecade);\n    indi.birth = Object.assign({}, date, {place: person.BirthLocation});\n  }\n  if (\n    (person.DeathDate && person.DeathDate !== '0000-00-00') ||\n    person.DeathLocation ||\n    person.DeathDateDecade !== 'unknown'\n  ) {\n    const parsedDate = parseDate(\n      person.DeathDate,\n      person.DataStatus && person.DataStatus.DeathDate,\n    );\n    const date = parsedDate || parseDecade(person.DeathDateDecade);\n    indi.death = Object.assign({}, date, {place: person.DeathLocation});\n  }\n  if (person.PhotoData) {\n    indi.images = [{url: `https://www.wikitree.com${person.PhotoData.url}`}];\n  }\n  return indi;\n}\n\n/**\n * Parses a date in the format returned by WikiTree and converts in to\n * the format defined by Topola.\n */\nfunction parseDate(date: string, dataStatus?: string): DateOrRange | undefined {\n  if (!date) {\n    return undefined;\n  }\n  const matchedDate = date.match(/(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)/);\n  if (!matchedDate) {\n    return {date: {text: date}};\n  }\n  const parsedDate: Date = {};\n  if (matchedDate[1] !== '0000') {\n    parsedDate.year = ~~matchedDate[1];\n  }\n  if (matchedDate[2] !== '00') {\n    parsedDate.month = ~~matchedDate[2];\n  }\n  if (matchedDate[3] !== '00') {\n    parsedDate.day = ~~matchedDate[3];\n  }\n  if (dataStatus === 'after') {\n    return {dateRange: {from: parsedDate}};\n  }\n  if (dataStatus === 'before') {\n    return {dateRange: {to: parsedDate}};\n  }\n  if (dataStatus === 'guess') {\n    parsedDate.qualifier = 'abt';\n  }\n  return {date: parsedDate};\n}\n\nfunction parseDecade(decade: string): DateOrRange | undefined {\n  return decade !== 'unknown' ? {date: {text: decade}} : undefined;\n}\n\n/**\n * Creates a GEDCOM structure for the purpose of displaying the details\n * panel.\n */\nfunction buildGedcom(indis: JsonIndi[]): GedcomData {\n  const gedcomIndis: {[key: string]: GedcomEntry} = {};\n  indis.forEach((indi) => {\n    // WikiTree URLs replace spaces with underscores.\n    const escapedId = indi.id.replace(/ /g, '_');\n    gedcomIndis[indi.id] = {\n      level: 0,\n      pointer: `@${indi.id}@`,\n      tag: 'INDI',\n      data: '',\n      tree: [\n        {\n          level: 1,\n          pointer: '',\n          tag: 'NAME',\n          data: `${indi.firstName || ''} /${indi.lastName || ''}/`,\n          tree: [],\n        },\n      ],\n    };\n    if (!indi.id.startsWith('~')) {\n      gedcomIndis[indi.id].tree.push({\n        level: 1,\n        pointer: '',\n        tag: 'WWW',\n        data: `https://www.wikitree.com/wiki/${escapedId}`,\n        tree: [],\n      });\n    }\n  });\n\n  return {\n    head: {level: 0, pointer: '', tag: 'HEAD', data: '', tree: []},\n    indis: gedcomIndis,\n    fams: {},\n    other: {},\n  };\n}\n\n/**\n * Returns a set which is a value from a SetMultimap. If the key doesn't exist,\n * an empty set is added to the map.\n */\nfunction getSet<K, V>(map: Map<K, Set<V>>, key: K): Set<V> {\n  const set = map.get(key);\n  if (set) {\n    return set;\n  }\n  const newSet = new Set<V>();\n  map.set(key, newSet);\n  return newSet;\n}\n\nexport interface WikiTreeSourceSpec {\n  source: DataSourceEnum.WIKITREE;\n  authcode?: string;\n}\n\n/** Loading data from the WikiTree API. */\nexport class WikiTreeDataSource implements DataSource<WikiTreeSourceSpec> {\n  constructor(private intl: IntlShape) {}\n\n  isNewData(\n    newSource: SourceSelection<WikiTreeSourceSpec>,\n    oldSource: SourceSelection<WikiTreeSourceSpec>,\n    data?: TopolaData,\n  ): boolean {\n    if (!newSource.selection) {\n      return false;\n    }\n    if (oldSource.selection?.id === newSource.selection.id) {\n      // Selection unchanged -> don't reload.\n      return false;\n    }\n    if (\n      data &&\n      data.chartData.indis.some((indi) => indi.id === newSource.selection?.id)\n    ) {\n      // New selection exists in current view -> animate instead of reloading.\n      return false;\n    }\n    return true;\n  }\n\n  async loadData(\n    source: SourceSelection<WikiTreeSourceSpec>,\n  ): Promise<TopolaData> {\n    if (!source.selection) {\n      throw new TopolaError(\n        'WIKITREE_ID_NOT_PROVIDED',\n        'WikiTree id needs to be provided',\n      );\n    }\n    try {\n      const data = await loadWikiTree(\n        source.selection.id,\n        this.intl,\n        source.spec.authcode,\n      );\n      analyticsEvent('wikitree_loaded');\n      return data;\n    } catch (error) {\n      analyticsEvent('wikitree_error');\n      throw error;\n    }\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport wikitreeLogo from './wikitree.png';\nimport {analyticsEvent} from '../util/analytics';\nimport {FormattedMessage, injectIntl, WrappedComponentProps} from 'react-intl';\nimport {getLoggedInUserName} from '../datasource/wikitree';\nimport {MenuItem, MenuType} from './menu_item';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {Header, Button, Modal, Input, Form, Ref} from 'semantic-ui-react';\n\nenum WikiTreeLoginState {\n  UNKNOWN,\n  NOT_LOGGED_IN,\n  LOGGED_IN,\n}\n\ninterface Props {\n  menuType: MenuType;\n}\n\ninterface State {\n  dialogOpen: boolean;\n  wikiTreeId?: string;\n}\n\n/** Displays and handles the \"Select WikiTree ID\" menu. */\nexport class WikiTreeMenu extends React.Component<\n  RouteComponentProps & Props,\n  State\n> {\n  state: State = {\n    dialogOpen: false,\n  };\n\n  inputRef: React.RefObject<HTMLElement> = React.createRef();\n\n  private openDialog() {\n    this.setState(Object.assign({}, this.state, {dialogOpen: true}), () =>\n      (this.inputRef.current!.firstChild as HTMLInputElement).focus(),\n    );\n  }\n\n  /** Cancels any of the open dialogs. */\n  private handleClose() {\n    this.setState(\n      Object.assign({}, this.state, {\n        dialogOpen: false,\n      }),\n    );\n  }\n\n  /** Select button clicked in the \"Select WikiTree ID\" dialog. */\n  private handleSelectId() {\n    this.setState(\n      Object.assign({}, this.state, {\n        dialogOpen: false,\n      }),\n    );\n    if (this.state.wikiTreeId) {\n      analyticsEvent('wikitree_id_selected');\n      const search = queryString.parse(this.props.location.search);\n      const standalone =\n        search.standalone !== undefined ? search.standalone : true;\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({\n          indi: this.state.wikiTreeId,\n          source: 'wikitree',\n          standalone,\n        }),\n      });\n    }\n  }\n\n  /** Called when the WikiTree ID input is typed into. */\n  private handleIdChange(value: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        wikiTreeId: value,\n      }),\n    );\n  }\n\n  private enterId(event: React.MouseEvent, id: string) {\n    event.preventDefault(); // Do not follow link in href.\n    (this.inputRef.current!.firstChild as HTMLInputElement).value = id;\n    this.handleIdChange(id);\n    (this.inputRef.current!.firstChild as HTMLInputElement).focus();\n  }\n\n  private wikiTreeIdModal() {\n    return (\n      <Modal\n        open={this.state.dialogOpen}\n        onClose={() => this.handleClose()}\n        centered={false}\n      >\n        <Header>\n          <img\n            src={wikitreeLogo}\n            alt=\"WikiTree logo\"\n            style={{width: '32px', height: '32px'}}\n          />\n          <FormattedMessage\n            id=\"select_wikitree_id.title\"\n            defaultMessage=\"Select WikiTree ID\"\n          />\n        </Header>\n        <Modal.Content>\n          <Form onSubmit={() => this.handleSelectId()}>\n            <p>\n              <FormattedMessage\n                id=\"select_wikitree_id.comment\"\n                defaultMessage={\n                  'Enter a {wikiTreeLink} profile ID. Examples: {example1}, {example2}.'\n                }\n                values={{\n                  wikiTreeLink: (\n                    <a\n                      href=\"https://wikitree.com/\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      WikiTree\n                    </a>\n                  ),\n                  example1: (\n                    <span\n                      onClick={(e) => this.enterId(e, 'Wojtyla-13')}\n                      className=\"link-span\"\n                    >\n                      Wojtyla-13\n                    </span>\n                  ),\n                  example2: (\n                    <span\n                      onClick={(e) => this.enterId(e, 'Skłodowska-2')}\n                      className=\"link-span\"\n                    >\n                      Skłodowska-2\n                    </span>\n                  ),\n                }}\n              />\n            </p>\n            <Ref innerRef={this.inputRef}>\n              <Input\n                fluid\n                onChange={(e, data) => this.handleIdChange(data.value)}\n              />\n            </Ref>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button secondary onClick={() => this.handleClose()}>\n            <FormattedMessage\n              id=\"select_wikitree_id.cancel\"\n              defaultMessage=\"Cancel\"\n            />\n          </Button>\n          <Button primary onClick={() => this.handleSelectId()}>\n            <FormattedMessage\n              id=\"select_wikitree_id.load\"\n              defaultMessage=\"Load\"\n            />\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <MenuItem\n          menuType={this.props.menuType}\n          onClick={() => this.openDialog()}\n        >\n          <img src={wikitreeLogo} alt=\"WikiTree logo\" className=\"menu-icon\" />\n          <FormattedMessage\n            id=\"menu.select_wikitree_id\"\n            defaultMessage=\"Select WikiTree ID\"\n          />\n        </MenuItem>\n        {this.wikiTreeIdModal()}\n      </>\n    );\n  }\n}\n\ninterface LoginState {\n  wikiTreeLoginState: WikiTreeLoginState;\n  wikiTreeLoginUsername?: string;\n}\n\n/** Displays and handles the \"Log in to WikiTree\" menu. */\nclass WikiTreeLoginMenuComponent extends React.Component<\n  RouteComponentProps & WrappedComponentProps & Props,\n  LoginState\n> {\n  state: LoginState = {\n    wikiTreeLoginState: WikiTreeLoginState.UNKNOWN,\n  };\n\n  wikiTreeLoginFormRef: React.RefObject<HTMLFormElement> = React.createRef();\n  wikiTreeReturnUrlRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  /**\n   * Redirect to the WikiTree Apps login page with a return URL pointing to\n   * Topola Viewer hosted on apps.wikitree.com.\n   */\n  private wikiTreeLogin() {\n    const wikiTreeTopolaUrl =\n      'https://apps.wikitree.com/apps/wiech13/topola-viewer';\n    // Append '&' because the login page appends '?authcode=...' to this URL.\n    // TODO: remove ?authcode if it is in the current URL.\n    const returnUrl = `${wikiTreeTopolaUrl}${window.location.hash}&`;\n    this.wikiTreeReturnUrlRef.current!.value = returnUrl;\n    this.wikiTreeLoginFormRef.current!.submit();\n  }\n\n  private checkWikiTreeLoginState() {\n    const wikiTreeLoginUsername = getLoggedInUserName();\n    const wikiTreeLoginState = wikiTreeLoginUsername\n      ? WikiTreeLoginState.LOGGED_IN\n      : WikiTreeLoginState.NOT_LOGGED_IN;\n    if (this.state.wikiTreeLoginState !== wikiTreeLoginState) {\n      this.setState(\n        Object.assign({}, this.state, {\n          wikiTreeLoginState,\n          wikiTreeLoginUsername,\n        }),\n      );\n    }\n  }\n\n  componentDidMount() {\n    this.checkWikiTreeLoginState();\n  }\n\n  componentDidUpdate() {\n    this.checkWikiTreeLoginState();\n  }\n\n  render() {\n    switch (this.state.wikiTreeLoginState) {\n      case WikiTreeLoginState.NOT_LOGGED_IN:\n        return (\n          <>\n            <MenuItem\n              menuType={this.props.menuType}\n              onClick={() => this.wikiTreeLogin()}\n            >\n              <img\n                src={wikitreeLogo}\n                alt=\"WikiTree logo\"\n                className=\"menu-icon\"\n              />\n              <FormattedMessage\n                id=\"menu.wikitree_login\"\n                defaultMessage=\"Log in to WikiTree\"\n              />\n            </MenuItem>\n            <form\n              action=\"https://api.wikitree.com/api.php\"\n              method=\"POST\"\n              style={{display: 'hidden'}}\n              ref={this.wikiTreeLoginFormRef}\n            >\n              <input type=\"hidden\" name=\"action\" value=\"clientLogin\" />\n              <input\n                type=\"hidden\"\n                name=\"returnURL\"\n                ref={this.wikiTreeReturnUrlRef}\n              />\n            </form>\n          </>\n        );\n\n      case WikiTreeLoginState.LOGGED_IN:\n        const tooltip = this.state.wikiTreeLoginUsername\n          ? this.props.intl.formatMessage(\n              {\n                id: 'menu.wikitree_popup_username',\n                defaultMessage: 'Logged in to WikiTree as {username}',\n              },\n              {username: this.state.wikiTreeLoginUsername},\n            )\n          : this.props.intl.formatMessage({\n              id: 'menu.wikitree_popup',\n              defaultMessage: 'Logged in to WikiTree',\n            });\n        return (\n          <MenuItem menuType={this.props.menuType} title={tooltip}>\n            <img src={wikitreeLogo} alt=\"WikiTree logo\" className=\"menu-icon\" />\n            <FormattedMessage\n              id=\"menu.wikitree_logged_in\"\n              defaultMessage=\"Logged in\"\n            />\n          </MenuItem>\n        );\n    }\n    return null;\n  }\n}\nexport const WikiTreeLoginMenu = injectIntl(WikiTreeLoginMenuComponent);\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {Dropdown, Icon, Menu} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {IndiInfo, JsonGedcomData} from 'topola';\nimport {Link} from 'react-router-dom';\nimport {Media} from '../util/media';\nimport {MenuType} from './menu_item';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {SearchBar} from './search';\nimport {UploadMenu} from './upload_menu';\nimport {UrlMenu} from './url_menu';\nimport {WikiTreeLoginMenu, WikiTreeMenu} from './wikitree_menu';\n\nenum ScreenSize {\n  LARGE,\n  SMALL,\n}\n\ninterface EventHandlers {\n  onSelection: (indiInfo: IndiInfo) => void;\n  onPrint: () => void;\n  onDownloadPdf: () => void;\n  onDownloadPng: () => void;\n  onDownloadSvg: () => void;\n}\n\ninterface Props {\n  /** True if the application is currently showing a chart. */\n  showingChart: boolean;\n  /** Data used for the search index. */\n  data?: JsonGedcomData;\n  standalone: boolean;\n  /** Whether to show the \"All relatives\" chart type in the menu. */\n  allowAllRelativesChart: boolean;\n  eventHandlers: EventHandlers;\n  /** Whether to show additional WikiTree menus. */\n  showWikiTreeMenus: boolean;\n}\n\nexport class TopBar extends React.Component<RouteComponentProps & Props> {\n  private changeView(view: string) {\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    if (search.view !== view) {\n      search.view = view;\n      location.search = queryString.stringify(search);\n      this.props.history.push(location);\n    }\n  }\n\n  private chartMenus(screenSize: ScreenSize) {\n    if (!this.props.showingChart) {\n      return null;\n    }\n    const chartTypeItems = (\n      <>\n        <Dropdown.Item onClick={() => this.changeView('hourglass')}>\n          <Icon name=\"hourglass\" />\n          <FormattedMessage\n            id=\"menu.hourglass\"\n            defaultMessage=\"Hourglass chart\"\n          />\n        </Dropdown.Item>\n        {this.props.allowAllRelativesChart ? (\n          <Dropdown.Item onClick={() => this.changeView('relatives')}>\n            <Icon name=\"users\" />\n            <FormattedMessage\n              id=\"menu.relatives\"\n              defaultMessage=\"All relatives\"\n            />\n          </Dropdown.Item>\n        ) : null}\n        <Dropdown.Item onClick={() => this.changeView('fancy')}>\n          <Icon name=\"users\" />\n          <FormattedMessage\n            id=\"menu.fancy\"\n            defaultMessage=\"Fancy tree (experimental)\"\n          />\n        </Dropdown.Item>\n      </>\n    );\n    switch (screenSize) {\n      case ScreenSize.LARGE:\n        return (\n          <>\n            <Menu.Item onClick={() => this.props.eventHandlers.onPrint()}>\n              <Icon name=\"print\" />\n              <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\n            </Menu.Item>\n\n            <Dropdown\n              trigger={\n                <div>\n                  <Icon name=\"download\" />\n                  <FormattedMessage\n                    id=\"menu.download\"\n                    defaultMessage=\"Download\"\n                  />\n                </div>\n              }\n              className=\"item\"\n            >\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  onClick={() => this.props.eventHandlers.onDownloadPdf()}\n                >\n                  <FormattedMessage\n                    id=\"menu.pdf_file\"\n                    defaultMessage=\"PDF file\"\n                  />\n                </Dropdown.Item>\n                <Dropdown.Item\n                  onClick={() => this.props.eventHandlers.onDownloadPng()}\n                >\n                  <FormattedMessage\n                    id=\"menu.png_file\"\n                    defaultMessage=\"PNG file\"\n                  />\n                </Dropdown.Item>\n                <Dropdown.Item\n                  onClick={() => this.props.eventHandlers.onDownloadSvg()}\n                >\n                  <FormattedMessage\n                    id=\"menu.svg_file\"\n                    defaultMessage=\"SVG file\"\n                  />\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n\n            <Dropdown\n              trigger={\n                <div>\n                  <Icon name=\"eye\" />\n                  <FormattedMessage id=\"menu.view\" defaultMessage=\"View\" />\n                </div>\n              }\n              className=\"item\"\n            >\n              <Dropdown.Menu>{chartTypeItems}</Dropdown.Menu>\n            </Dropdown>\n            <SearchBar\n              data={this.props.data!}\n              onSelection={this.props.eventHandlers.onSelection}\n              {...this.props}\n            />\n          </>\n        );\n\n      case ScreenSize.SMALL:\n        return (\n          <>\n            <Dropdown.Item onClick={() => this.props.eventHandlers.onPrint()}>\n              <Icon name=\"print\" />\n              <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\n            </Dropdown.Item>\n\n            <Dropdown.Divider />\n\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadPdf()}\n            >\n              <Icon name=\"download\" />\n              <FormattedMessage\n                id=\"menu.download_pdf\"\n                defaultMessage=\"Downlod PDF\"\n              />\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadPng()}\n            >\n              <Icon name=\"download\" />\n              <FormattedMessage\n                id=\"menu.download_png\"\n                defaultMessage=\"Download PNG\"\n              />\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadSvg()}\n            >\n              <Icon name=\"download\" />\n              <FormattedMessage\n                id=\"menu.download_svg\"\n                defaultMessage=\"Download SVG\"\n              />\n            </Dropdown.Item>\n\n            <Dropdown.Divider />\n            {chartTypeItems}\n            <Dropdown.Divider />\n          </>\n        );\n    }\n  }\n\n  private title() {\n    return (\n      <Menu.Item>\n        <b>Topola Genealogy</b>\n      </Menu.Item>\n    );\n  }\n\n  private fileMenus(screenSize: ScreenSize) {\n    // In standalone WikiTree mode, show only the \"Select WikiTree ID\" menu.\n    if (!this.props.standalone && this.props.showWikiTreeMenus) {\n      switch (screenSize) {\n        case ScreenSize.LARGE:\n          return <WikiTreeMenu menuType={MenuType.Menu} {...this.props} />;\n        case ScreenSize.SMALL:\n          return (\n            <>\n              <WikiTreeMenu menuType={MenuType.Dropdown} {...this.props} />\n              <Dropdown.Divider />\n            </>\n          );\n      }\n    }\n\n    // Don't show \"open\" menus in non-standalone mode.\n    if (!this.props.standalone) {\n      return null;\n    }\n\n    switch (screenSize) {\n      case ScreenSize.LARGE:\n        // Show dropdown if chart is shown, otherwise show individual menu\n        // items.\n        const menus = this.props.showingChart ? (\n          <Dropdown\n            trigger={\n              <div>\n                <Icon name=\"folder open\" />\n                <FormattedMessage id=\"menu.open\" defaultMessage=\"Open\" />\n              </div>\n            }\n            className=\"item\"\n          >\n            <Dropdown.Menu>\n              <UploadMenu menuType={MenuType.Dropdown} {...this.props} />\n              <UrlMenu menuType={MenuType.Dropdown} {...this.props} />\n              <WikiTreeMenu menuType={MenuType.Dropdown} {...this.props} />\n            </Dropdown.Menu>\n          </Dropdown>\n        ) : (\n          <>\n            <UploadMenu menuType={MenuType.Menu} {...this.props} />\n            <UrlMenu menuType={MenuType.Menu} {...this.props} />\n            <WikiTreeMenu menuType={MenuType.Menu} {...this.props} />\n          </>\n        );\n        return menus;\n\n      case ScreenSize.SMALL:\n        return (\n          <>\n            <UploadMenu menuType={MenuType.Dropdown} {...this.props} />\n            <UrlMenu menuType={MenuType.Dropdown} {...this.props} />\n            <WikiTreeMenu menuType={MenuType.Dropdown} {...this.props} />\n            <Dropdown.Divider />\n          </>\n        );\n    }\n  }\n\n  private wikiTreeLoginMenu(screenSize: ScreenSize) {\n    if (!this.props.showWikiTreeMenus) {\n      return null;\n    }\n    return (\n      <>\n        <WikiTreeLoginMenu\n          menuType={\n            screenSize === ScreenSize.SMALL ? MenuType.Dropdown : MenuType.Menu\n          }\n          {...this.props}\n        />\n        {screenSize === ScreenSize.SMALL ? <Dropdown.Divider /> : null}\n      </>\n    );\n  }\n\n  private mobileMenus() {\n    return (\n      <>\n        <Dropdown\n          trigger={\n            <div>\n              <Icon name=\"sidebar\" />\n            </div>\n          }\n          className=\"item\"\n          icon={null}\n        >\n          <Dropdown.Menu>\n            {this.fileMenus(ScreenSize.SMALL)}\n            {this.chartMenus(ScreenSize.SMALL)}\n            {this.wikiTreeLoginMenu(ScreenSize.SMALL)}\n\n            <Dropdown.Item\n              href=\"https://github.com/PeWu/topola-viewer\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <FormattedMessage\n                id=\"menu.github\"\n                defaultMessage=\"GitHub project\"\n              />\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n        {this.props.standalone ? (\n          <Link to=\"/\">{this.title()}</Link>\n        ) : (\n          this.title()\n        )}\n      </>\n    );\n  }\n\n  private desktopMenus() {\n    return (\n      <>\n        {this.props.standalone ? <Link to=\"/\">{this.title()}</Link> : null}\n        {this.fileMenus(ScreenSize.LARGE)}\n        {this.chartMenus(ScreenSize.LARGE)}\n        <Menu.Menu position=\"right\">\n          {this.wikiTreeLoginMenu(ScreenSize.LARGE)}\n          <Menu.Item\n            href=\"https://github.com/PeWu/topola-viewer\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <FormattedMessage\n              id=\"menu.github\"\n              defaultMessage=\"GitHub project\"\n            />\n          </Menu.Item>\n        </Menu.Menu>\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Menu\n          as={Media}\n          at=\"large\"\n          attached=\"top\"\n          inverted\n          color=\"blue\"\n          size=\"large\"\n        >\n          {this.desktopMenus()}\n        </Menu>\n        <Menu\n          as={Media}\n          at=\"small\"\n          attached=\"top\"\n          inverted\n          color=\"blue\"\n          size=\"large\"\n        >\n          {this.mobileMenus()}\n        </Menu>\n      </>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as queryString from 'query-string';\nimport React from 'react';\nimport {analyticsEvent} from './util/analytics';\nimport {Chart, ChartComponent, ChartType} from './chart';\nimport {\n  argsToConfig,\n  Config,\n  ConfigPanel,\n  configToArgs,\n  DEFALUT_CONFIG,\n} from './config';\nimport {DataSourceEnum, SourceSelection} from './datasource/data_source';\nimport {Details} from './details';\nimport {EmbeddedDataSource, EmbeddedSourceSpec} from './datasource/embedded';\nimport {FormattedMessage, injectIntl, WrappedComponentProps} from 'react-intl';\nimport {getI18nMessage} from './util/error_i18n';\nimport {IndiInfo} from 'topola';\nimport {Intro} from './intro';\nimport {Loader, Message, Portal, Tab} from 'semantic-ui-react';\nimport {Media} from './util/media';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\nimport {TopBar} from './menu/top_bar';\nimport {TopolaData} from './util/gedcom_util';\nimport {\n  getSelection,\n  UploadSourceSpec,\n  UrlSourceSpec,\n  GedcomUrlDataSource,\n  UploadedDataSource,\n} from './datasource/load_data';\nimport {\n  loadWikiTree,\n  PRIVATE_ID_PREFIX,\n  WikiTreeDataSource,\n  WikiTreeSourceSpec,\n} from './datasource/wikitree';\n\n/** Shows an error message in the middle of the screen. */\nfunction ErrorMessage(props: {message?: string}) {\n  return (\n    <Message negative className=\"error\">\n      <Message.Header>\n        <FormattedMessage\n          id=\"error.failed_to_load_file\"\n          defaultMessage={'Failed to load file'}\n        />\n      </Message.Header>\n      <p>{props.message}</p>\n    </Message>\n  );\n}\n\ninterface ErrorPopupProps {\n  message?: string;\n  open: boolean;\n  onDismiss: () => void;\n}\n\n/**\n * Shows a dismissable error message in the bottom left corner of the screen.\n */\nfunction ErrorPopup(props: ErrorPopupProps) {\n  return (\n    <Portal open={props.open} onClose={props.onDismiss}>\n      <Message negative className=\"errorPopup\" onDismiss={props.onDismiss}>\n        <Message.Header>\n          <FormattedMessage id=\"error.error\" defaultMessage={'Error'} />\n        </Message.Header>\n        <p>{props.message}</p>\n      </Message>\n    </Portal>\n  );\n}\n\nenum AppState {\n  INITIAL,\n  LOADING,\n  ERROR,\n  SHOWING_CHART,\n  LOADING_MORE,\n}\n\ntype DataSourceSpec =\n  | UrlSourceSpec\n  | UploadSourceSpec\n  | WikiTreeSourceSpec\n  | EmbeddedSourceSpec;\n\n/**\n * Arguments passed to the application, primarily through URL parameters.\n * Non-optional arguments get populated with default values.\n */\ninterface Arguments {\n  sourceSpec?: DataSourceSpec;\n  selection?: IndiInfo;\n  chartType: ChartType;\n  standalone: boolean;\n  freezeAnimation?: boolean;\n  showSidePanel: boolean;\n  config: Config;\n}\n\n/**\n * Retrieve arguments passed into the application through the URL and uploaded\n * data.\n */\nfunction getArguments(location: H.Location<any>): Arguments {\n  const search = queryString.parse(location.search);\n  const getParam = (name: string) => {\n    const value = search[name];\n    return typeof value === 'string' ? value : undefined;\n  };\n\n  const view = getParam('view');\n  const chartTypes = new Map<string | undefined, ChartType>([\n    ['relatives', ChartType.Relatives],\n    ['fancy', ChartType.Fancy],\n  ]);\n\n  const hash = getParam('file');\n  const url = getParam('url');\n  const embedded = getParam('embedded') === 'true'; // False by default.\n  var sourceSpec: DataSourceSpec | undefined = undefined;\n  if (getParam('source') === 'wikitree') {\n    sourceSpec = {\n      source: DataSourceEnum.WIKITREE,\n      authcode: getParam('?authcode'),\n    };\n  } else if (hash) {\n    sourceSpec = {\n      source: DataSourceEnum.UPLOADED,\n      hash,\n      gedcom: location.state && location.state.data,\n      images: location.state && location.state.images,\n    };\n  } else if (url) {\n    sourceSpec = {\n      source: DataSourceEnum.GEDCOM_URL,\n      url,\n      handleCors: getParam('handleCors') !== 'false', // True by default.\n    };\n  } else if (embedded) {\n    sourceSpec = {source: DataSourceEnum.EMBEDDED};\n  }\n\n  const indi = getParam('indi');\n  const parsedGen = Number(getParam('gen'));\n  const selection = indi\n    ? {id: indi, generation: !isNaN(parsedGen) ? parsedGen : 0}\n    : undefined;\n\n  return {\n    sourceSpec,\n    selection,\n    // Hourglass is the default view.\n    chartType: chartTypes.get(view) || ChartType.Hourglass,\n\n    showSidePanel: getParam('sidePanel') !== 'false', // True by default.\n    standalone: getParam('standalone') !== 'false' && !embedded,\n    freezeAnimation: getParam('freeze') === 'true', // False by default\n    config: argsToConfig(search),\n  };\n}\n\n/**\n * Returs true if the changes object has values that are different than those\n * in state.\n */\nfunction hasUpdatedValues<T>(state: T, changes: Partial<T> | undefined) {\n  if (!changes) {\n    return false;\n  }\n  return Object.entries(changes).some(\n    ([key, value]) => value !== undefined && state[key] !== value,\n  );\n}\n\ninterface State {\n  /** State of the application. */\n  state: AppState;\n  /** Loaded data. */\n  data?: TopolaData;\n  /** Selected individual. */\n  selection?: IndiInfo;\n  /** Error to display. */\n  error?: string;\n  /** Whether the side panel is shown. */\n  showSidePanel?: boolean;\n  /** Whether the app is in standalone mode, i.e. showing 'open file' menus. */\n  standalone: boolean;\n  /** Type of displayed chart. */\n  chartType: ChartType;\n  /** Whether to show the error popup. */\n  showErrorPopup: boolean;\n  /** Specification of the source of the data. */\n  sourceSpec?: DataSourceSpec;\n  /** Freeze animations after initial chart render. */\n  freezeAnimation?: boolean;\n  config: Config;\n}\n\nclass AppComponent extends React.Component<\n  RouteComponentProps & WrappedComponentProps,\n  {}\n> {\n  state: State = {\n    state: AppState.INITIAL,\n    standalone: true,\n    chartType: ChartType.Hourglass,\n    showErrorPopup: false,\n    config: DEFALUT_CONFIG,\n  };\n  chartRef: ChartComponent | null = null;\n\n  /** Sets the state with a new individual selection and chart type. */\n  private updateDisplay(\n    selection: IndiInfo,\n    otherStateChanges?: Partial<State>,\n  ) {\n    if (\n      !this.state.selection ||\n      this.state.selection.id !== selection.id ||\n      this.state.selection!.generation !== selection.generation ||\n      hasUpdatedValues(this.state, otherStateChanges)\n    ) {\n      this.setState(\n        Object.assign({}, this.state, {selection}, otherStateChanges),\n      );\n    }\n  }\n\n  /** Sets error message after data load failure. */\n  private setError(error: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        state: AppState.ERROR,\n        error,\n      }),\n    );\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate();\n  }\n\n  private readonly uploadedDataSource = new UploadedDataSource();\n  private readonly gedcomUrlDataSource = new GedcomUrlDataSource();\n  private readonly wikiTreeDataSource = new WikiTreeDataSource(this.props.intl);\n  private readonly embeddedDataSource = new EmbeddedDataSource();\n\n  private isNewData(sourceSpec: DataSourceSpec, selection?: IndiInfo) {\n    if (\n      !this.state.sourceSpec ||\n      this.state.sourceSpec.source !== sourceSpec.source\n    ) {\n      // New data source means new data.\n      return true;\n    }\n    const newSource = {spec: sourceSpec, selection};\n    const oldSouce = {\n      spec: this.state.sourceSpec,\n      selection: this.state.selection,\n    };\n    switch (newSource.spec.source) {\n      case DataSourceEnum.UPLOADED:\n        return this.uploadedDataSource.isNewData(\n          newSource as SourceSelection<UploadSourceSpec>,\n          oldSouce as SourceSelection<UploadSourceSpec>,\n          this.state.data,\n        );\n      case DataSourceEnum.GEDCOM_URL:\n        return this.gedcomUrlDataSource.isNewData(\n          newSource as SourceSelection<UrlSourceSpec>,\n          oldSouce as SourceSelection<UrlSourceSpec>,\n          this.state.data,\n        );\n      case DataSourceEnum.WIKITREE:\n        return this.wikiTreeDataSource.isNewData(\n          newSource as SourceSelection<WikiTreeSourceSpec>,\n          oldSouce as SourceSelection<WikiTreeSourceSpec>,\n          this.state.data,\n        );\n      case DataSourceEnum.EMBEDDED:\n        return this.embeddedDataSource.isNewData(\n          newSource as SourceSelection<EmbeddedSourceSpec>,\n          oldSouce as SourceSelection<EmbeddedSourceSpec>,\n          this.state.data,\n        );\n    }\n  }\n\n  private loadData(sourceSpec: DataSourceSpec, selection?: IndiInfo) {\n    switch (sourceSpec.source) {\n      case DataSourceEnum.UPLOADED:\n        return this.uploadedDataSource.loadData({spec: sourceSpec, selection});\n      case DataSourceEnum.GEDCOM_URL:\n        return this.gedcomUrlDataSource.loadData({spec: sourceSpec, selection});\n      case DataSourceEnum.WIKITREE:\n        return this.wikiTreeDataSource.loadData({spec: sourceSpec, selection});\n      case DataSourceEnum.EMBEDDED:\n        return this.embeddedDataSource.loadData({spec: sourceSpec, selection});\n    }\n  }\n\n  async componentDidUpdate() {\n    if (this.props.location.pathname !== '/view') {\n      if (this.state.state !== AppState.INITIAL) {\n        this.setState(Object.assign({}, this.state, {state: AppState.INITIAL}));\n      }\n      return;\n    }\n\n    const args = getArguments(this.props.location);\n\n    if (!args.sourceSpec) {\n      this.props.history.replace({pathname: '/'});\n    } else if (\n      this.state.state === AppState.INITIAL ||\n      this.isNewData(args.sourceSpec, args.selection)\n    ) {\n      // Set loading state.\n      this.setState(\n        Object.assign({}, this.state, {\n          state: AppState.LOADING,\n          sourceSpec: args.sourceSpec,\n          selection: args.selection,\n          standalone: args.standalone,\n          chartType: args.chartType,\n          config: args.config,\n        }),\n      );\n      try {\n        const data = await this.loadData(args.sourceSpec, args.selection);\n        // Set state with data.\n        this.setState(\n          Object.assign({}, this.state, {\n            state: AppState.SHOWING_CHART,\n            data,\n            selection: getSelection(data.chartData, args.selection),\n            showSidePanel: args.showSidePanel,\n          }),\n        );\n      } catch (error) {\n        this.setError(getI18nMessage(error, this.props.intl));\n      }\n    } else if (\n      this.state.state === AppState.SHOWING_CHART ||\n      this.state.state === AppState.LOADING_MORE\n    ) {\n      // Update selection if it has changed in the URL.\n      const selection = getSelection(\n        this.state.data!.chartData,\n        args.selection,\n      );\n      const loadMoreFromWikitree =\n        args.sourceSpec.source === DataSourceEnum.WIKITREE &&\n        (!this.state.selection || this.state.selection.id !== selection.id);\n      this.updateDisplay(selection, {\n        chartType: args.chartType,\n        state: loadMoreFromWikitree\n          ? AppState.LOADING_MORE\n          : AppState.SHOWING_CHART,\n      });\n      if (loadMoreFromWikitree) {\n        try {\n          const data = await loadWikiTree(args.selection!.id, this.props.intl);\n          const selection = getSelection(data.chartData, args.selection);\n          this.setState(\n            Object.assign({}, this.state, {\n              state: AppState.SHOWING_CHART,\n              data,\n              selection,\n            }),\n          );\n        } catch (error) {\n          this.showErrorPopup(\n            this.props.intl.formatMessage(\n              {\n                id: 'error.failed_wikitree_load_more',\n                defaultMessage: 'Failed to load data from WikiTree. {error}',\n              },\n              {error},\n            ),\n            {state: AppState.SHOWING_CHART},\n          );\n        }\n      }\n    }\n  }\n\n  private updateUrl(args: queryString.ParsedQuery<any>) {\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    for (const key in args) {\n      search[key] = args[key];\n    }\n    location.search = queryString.stringify(search);\n    this.props.history.push(location);\n  }\n\n  /**\n   * Called when the user clicks an individual box in the chart.\n   * Updates the browser URL.\n   */\n  private onSelection = (selection: IndiInfo) => {\n    // Don't allow selecting WikiTree private profiles.\n    if (selection.id.startsWith(PRIVATE_ID_PREFIX)) {\n      return;\n    }\n    analyticsEvent('selection_changed');\n    this.updateUrl({\n      indi: selection.id,\n      gen: selection.generation,\n    });\n  };\n\n  private onPrint = () => {\n    analyticsEvent('print');\n    this.chartRef && this.chartRef.print();\n  };\n\n  private showErrorPopup(message: string, otherStateChanges?: Partial<State>) {\n    this.setState(\n      Object.assign(\n        {},\n        this.state,\n        {\n          showErrorPopup: true,\n          error: message,\n        },\n        otherStateChanges,\n      ),\n    );\n  }\n\n  private onDownloadPdf = async () => {\n    analyticsEvent('download_pdf');\n    try {\n      this.chartRef && (await this.chartRef.downloadPdf());\n    } catch (e) {\n      this.showErrorPopup(\n        this.props.intl.formatMessage({\n          id: 'error.failed_pdf',\n          defaultMessage:\n            'Failed to generate PDF file.' +\n            ' Please try with a smaller diagram or download an SVG file.',\n        }),\n      );\n    }\n  };\n\n  private onDownloadPng = async () => {\n    analyticsEvent('download_png');\n    try {\n      this.chartRef && (await this.chartRef.downloadPng());\n    } catch (e) {\n      this.showErrorPopup(\n        this.props.intl.formatMessage({\n          id: 'error.failed_png',\n          defaultMessage:\n            'Failed to generate PNG file.' +\n            ' Please try with a smaller diagram or download an SVG file.',\n        }),\n      );\n    }\n  };\n\n  private onDownloadSvg = () => {\n    analyticsEvent('download_svg');\n    this.chartRef && this.chartRef.downloadSvg();\n  };\n\n  private onDismissErrorPopup = () => {\n    this.setState(\n      Object.assign({}, this.state, {\n        showErrorPopup: false,\n      }),\n    );\n  };\n\n  private renderMainArea = () => {\n    switch (this.state.state) {\n      case AppState.SHOWING_CHART:\n      case AppState.LOADING_MORE:\n        const sidePanelTabs = [\n          {\n            menuItem: this.props.intl.formatMessage({\n              id: 'tab.info',\n              defaultMessage: 'Info',\n            }),\n            render: () => (\n              <Details\n                gedcom={this.state.data!.gedcom}\n                indi={this.state.selection!.id}\n              />\n            ),\n          },\n          {\n            menuItem: this.props.intl.formatMessage({\n              id: 'tab.settings',\n              defaultMessage: 'Settings',\n            }),\n            render: () => (\n              <ConfigPanel\n                config={this.state.config}\n                onChange={(config) => {\n                  this.setState(Object.assign({}, this.state, {config}));\n                  this.updateUrl(configToArgs(config));\n                }}\n              />\n            ),\n          },\n        ];\n        return (\n          <div id=\"content\">\n            <ErrorPopup\n              open={this.state.showErrorPopup}\n              message={this.state.error}\n              onDismiss={this.onDismissErrorPopup}\n            />\n            {this.state.state === AppState.LOADING_MORE ? (\n              <Loader active size=\"small\" className=\"loading-more\" />\n            ) : null}\n            <Chart\n              data={this.state.data!.chartData}\n              selection={this.state.selection!}\n              chartType={this.state.chartType}\n              onSelection={this.onSelection}\n              freezeAnimation={this.state.freezeAnimation}\n              colors={this.state.config.color}\n              ref={(ref) => (this.chartRef = ref)}\n            />\n            {this.state.showSidePanel ? (\n              <Media at=\"large\" className=\"sidePanel\">\n                <Tab panes={sidePanelTabs} />\n              </Media>\n            ) : null}\n          </div>\n        );\n\n      case AppState.ERROR:\n        return <ErrorMessage message={this.state.error!} />;\n\n      case AppState.INITIAL:\n      case AppState.LOADING:\n        return <Loader active size=\"large\" />;\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Route\n          render={(props: RouteComponentProps) => (\n            <TopBar\n              {...props}\n              data={this.state.data && this.state.data.chartData}\n              allowAllRelativesChart={\n                this.state.sourceSpec?.source !== DataSourceEnum.WIKITREE\n              }\n              showingChart={\n                this.props.history.location.pathname === '/view' &&\n                (this.state.state === AppState.SHOWING_CHART ||\n                  this.state.state === AppState.LOADING_MORE)\n              }\n              standalone={this.state.standalone}\n              eventHandlers={{\n                onSelection: this.onSelection,\n                onPrint: this.onPrint,\n                onDownloadPdf: this.onDownloadPdf,\n                onDownloadPng: this.onDownloadPng,\n                onDownloadSvg: this.onDownloadSvg,\n              }}\n              showWikiTreeMenus={\n                this.state.sourceSpec?.source === DataSourceEnum.WIKITREE\n              }\n            />\n          )}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={Intro} />\n          <Route exact path=\"/view\" render={this.renderMainArea} />\n          <Redirect to={'/'} />\n        </Switch>\n      </>\n    );\n  }\n}\n\nexport const App = injectIntl(AppComponent);\n","import {IntlShape} from 'react-intl';\nimport {TopolaError} from './error';\n\n/**\n * Returns a translated message for the given error. If the message can't be\n * translated, the original error.message is returned.\n */\nexport function getI18nMessage(error: Error, intl: IntlShape): string {\n  if (!(error instanceof TopolaError)) {\n    return error.message;\n  }\n  return intl.formatMessage(\n    {\n      id: `error.${error.code}`,\n      defaultMessage: error.message,\n    },\n    error.args,\n  );\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport messages_cs from './translations/cs.json';\nimport messages_de from './translations/de.json';\nimport messages_fr from './translations/fr.json';\nimport messages_it from './translations/it.json';\nimport messages_pl from './translations/pl.json';\nimport messages_ru from './translations/ru.json';\nimport {App} from './app';\nimport {detect} from 'detect-browser';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport {IntlProvider} from 'react-intl';\nimport {MediaContextProvider, mediaStyles} from './util/media';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'canvas-toBlob';\n\nconst messages = {\n  cs: messages_cs,\n  de: messages_de,\n  fr: messages_fr,\n  it: messages_it,\n  pl: messages_pl,\n  ru: messages_ru,\n};\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nconst browser = detect();\n\nif (browser && browser.name === 'ie') {\n  ReactDOM.render(\n    <p>\n      Topola Genealogy Viewer does not support Internet Explorer. Please try a\n      different (modern) browser.\n    </p>,\n    document.querySelector('#root'),\n  );\n} else {\n  ReactDOM.render(\n    <IntlProvider locale={language} messages={messages[language]}>\n      <MediaContextProvider>\n        <style>{mediaStyles}</style>\n        <Router>\n          <Route component={App} />\n        </Router>\n      </MediaContextProvider>\n    </IntlProvider>,\n    document.querySelector('#root'),\n  );\n}\n"],"sourceRoot":""}